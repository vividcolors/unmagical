{"version":3,"sources":["../src/core/utils.ts","core/store.ts","../src/core/rules.ts","../src/core/schema.ts","core/errors.ts","core/framework.ts","core/components.ts","core/rest.ts","core/updates.ts","index.ts"],"names":[],"mappings":";AAiLa,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,QAAA,eAAA,QAAA,WAAA,QAAA,YAAA,QAAA,OAAA,QAAA,YAAA,QAAA,mBAAA,QAAA,WAAA,QAAA,cAAA,QAAA,cAAA,EA1Kb,IAAA,EAAA,EAAA,QAAA,oBAgMQ,QAAA,SAhMD,EAAA,QAqBA,IAAM,EAAW,SAAC,GACjB,IAAA,GAAK,EACH,OAAA,EAAI,GAAM,GAAK,IAAM,GAAK,GAFvB,QAAA,SAAQ,EAcd,IAAM,EAAgB,SAAC,GAEvB,IADC,IAAA,EAAQ,EAAK,MAAM,KAChB,EAAI,EAAG,EAAI,EAAM,OAAQ,KAC5B,EAAA,QAAA,UAAS,EAAM,MACjB,EAAM,GAAK,KAGR,OAAA,EAAM,KAAK,MAPP,QAAA,cAAa,EAsBnB,IAAM,EAAa,SAAC,EAAa,GAClC,GAAkB,IAAlB,EAAK,OAAO,IAA8B,KAAlB,EAAK,OAAO,GAAW,OAAO,EACtD,GAAS,MAAT,EAAc,OAAO,EAEnB,IAAA,GAAQ,EAAA,QAAA,aAAY,GACtB,EAAQ,EAAK,MAAM,KACnB,EAAO,GAGP,GAAW,EAAM,GASjB,OAPA,GADJ,EAAO,GACY,SACjB,EAAU,EAAK,QAEjB,EAAK,OAAO,EAAK,OAAS,EAAS,GAEnC,EAAM,QAEc,GAAhB,EAAM,QAA8B,GAAf,EAAK,OAAoB,GAC3C,IAAM,EAAK,OAAO,GAAO,KAAK,MAnB1B,QAAA,WAAU,EA2BhB,IAAM,EAAqB,SAAC,GAE5B,IADD,IAAA,EAAK,GACA,EAAI,EAAG,EAAI,EAAK,OAAQ,IACT,iBAAX,EAAK,KAAkB,EAAA,QAAA,UAAS,GAAK,EAAK,IACnD,GAAM,KAEN,GAAM,IAAM,EAAK,GAGd,OAAA,GATI,QAAA,mBAAkB,EAiBxB,IAAM,EAAc,SAAC,GAGrB,IAFC,IAAA,EAAQ,EAAK,MAAM,KACnB,EAAK,GACF,EAAI,EAAG,EAAI,EAAM,OAAQ,IAChC,EAAG,MAAK,EAAA,QAAA,UAAS,EAAM,KAAO,EAAM,GAAK,EAAM,IAE1C,OAAA,GANI,QAAA,YAAW,EAmBjB,IAAM,EAAS,SAAC,GAAiB,OAAM,OAAN,EAAa,OAAS,MAAM,QAAQ,GAAK,eAAiB,GAArF,QAAA,OAAM,EAOZ,IAAM,EAAc,SAAC,GAClB,QAAA,EAAA,QAAA,QAAO,IACR,IAAA,OACA,IAAA,SACA,IAAA,UACA,IAAA,SACA,IAAA,SACA,IAAA,QACI,OAAA,EACT,QACS,OAAA,IAVA,QAAA,YAAW,EA0BjB,IAAM,EAAa,SAAC,EAAc,GAIlC,IAHC,IAAA,EAAS,EAAM,MAAM,KACrB,EAAS,EAAM,MAAM,KACrB,EAAK,GACF,EAAI,EAAG,EAAI,EAAO,UACrB,EAAO,QAAU,IACjB,EAAO,IAAM,EAAO,GAFS,IAGjC,EAAG,KAAK,EAAO,IAEV,OAAA,EAAG,KAAK,MATJ,QAAA,WAAU,EAiBhB,IAAM,EAAiB,SAAC,EAA2B,GAClD,IAAA,EAAN,GACK,IAAA,IAAI,KAAK,EACJ,QAAA,EAAA,QAAA,QAAO,IACR,IAAA,OACE,IAAgB,EAAG,GAAK,IAC7B,MACG,IAAA,UACH,EAAG,GAAK,EAAI,GAAK,OAAS,QAC1B,MACG,IAAA,SACH,EAAG,GAAK,GAAK,EAAI,GACjB,MACG,IAAA,SACC,GAAA,GAA6B,KAAX,EAAI,GAAW,MACrC,EAAG,GAAK,EAAI,GAIX,OAAA,GAnBI,QAAA,eAAc;;AC4jBd,aAAA,IAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,EAAA,MAAA,KAAA,QAAA,SAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,IAAA,EAAA,QAAA,GAAA,IAAA,EAAA,GAAA,EAAA,IAAA,GAAA,MAAA,GAAA,mBAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,EAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,EAAA,EAAA,OAAA,IAAA,EAAA,QAAA,EAAA,IAAA,GAAA,OAAA,UAAA,qBAAA,KAAA,EAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,EAAA,KAAA,OAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,QAAA,SAAA,QAAA,UAAA,QAAA,SAAA,QAAA,SAAA,QAAA,UAAA,QAAA,WAAA,QAAA,QAAA,QAAA,SAAA,QAAA,KAAA,QAAA,KAAA,QAAA,QAAA,QAAA,OAAA,QAAA,IAAA,QAAA,OAAA,QAAA,OAAA,QAAA,QAAA,QAAA,KAAA,QAAA,kBAAA,QAAA,oBAAA,QAAA,OAAA,QAAA,eAAA,EAxuBb,IAAA,EAAA,QAAA,WACA,EAAA,EAAA,QAAA,sBACA,EAAA,EAAA,QAAA,mBACA,EAAA,EAAA,QAAA,mBACA,EAAA,EAAA,QAAA,wBACA,EAAA,EAAA,QAAA,qBACA,EAAA,EAAA,QAAA,mBACA,EAAA,EAAA,QAAA,qBACA,EAAA,EAAA,QAAA,qBACA,EAAA,EAAA,QAAA,qBA6BM,EAAU,SAAC,EAAc,GACzB,OAAE,EAAK,SACJ,EAAA,EAAA,SAAS,EAAkB,IAQ9B,EAAQ,SAAI,GACT,OAAA,EAAA,EAAA,UAAK,EAAA,EAAA,SAAK,KAUb,EAAU,SAAC,GACT,IAAA,EAAS,CAAC,MAAK,EAAE,SAAQ,EAAO,MAAM,MACpC,QAAA,EAAA,EAAA,QAAO,IACR,IAAA,SACA,IAAA,QACH,MACG,IAAA,SACA,IAAA,UACH,EAAG,MAAQ,GAAK,EAChB,EAAG,SAAU,EACb,MACG,IAAA,UACH,EAAG,MAAS,EAAS,OAAS,QAC9B,EAAG,SAAU,EACb,MACG,IAAA,OACH,EAAG,MAAQ,GACX,EAAG,SAAU,EACb,MACG,IAAA,SACH,EAAG,MAAQ,EACX,EAAG,SAAU,EAGV,OAAA,GAUH,EAAO,SAAC,GACN,IAAA,EAAQ,SAAC,GACL,QAAA,EAAA,EAAA,QAAO,IACR,IAAA,QAEE,IADC,IAAA,EAAK,GACF,EAAI,EAAG,EAAK,EAAgB,OAAQ,IAC3C,EAAG,GAAK,EAAM,EAAK,IAEd,OAAA,EAAQ,GACZ,IAAA,SACG,IAAA,EAAM,GACP,IAAA,IAAI,KAAM,EACb,EAAI,GAAK,EAAM,EAAK,IAEf,OAAA,EAAQ,GACjB,QACS,OAAA,EAAQ,KAGd,OAAA,EAAM,IAUT,EAAQ,SAAC,GACP,IAAA,EAAQ,EAAa,MACnB,QAAA,EAAA,EAAA,QAAO,IACR,IAAA,QAEE,IADC,IAAA,EAAK,GACF,EAAI,EAAG,EAAK,EAAgB,OAAQ,IAC3C,EAAG,GAAK,EAAM,EAAK,IAEd,OAAA,EACJ,IAAA,SACG,IAAA,EAAM,GACP,IAAA,IAAI,KAAM,EACb,EAAI,GAAK,EAAM,EAAK,IAEf,OAAA,EACT,QACS,OAAA,IAyBA,EAAY,SAAC,EAAW,EAAmB,EAAmB,GAElE,MAAA,CACL,KAFW,EAAK,GAGhB,YAAW,EACX,YAAa,EAAc,GAAK,KAChC,SAAQ,EACR,SAAQ,EACR,MAAO,KARE,QAAA,UAAS,EAqBf,IAAM,EAAS,SAAC,EAAc,GAC3B,OAAA,EAAO,OAAS,EAAO,MAAQ,EAAO,QAAU,EAAO,OADpD,QAAA,OAAM,EAWnB,IAAM,EAAa,SAAC,GAGb,IAFC,IAAA,EAAQ,EAAK,MAAM,KACnB,EAAK,GACF,EAAI,EAAG,EAAI,EAAM,OAAQ,IAChC,EAAG,KAAK,SACR,EAAG,MAAK,EAAA,EAAA,UAAS,EAAM,KAAO,EAAM,GAAK,EAAM,IAE1C,OAAA,GAUH,EAAa,SAAC,GAEb,IADD,IAAA,EAAK,GACA,EAAI,EAAG,EAAI,EAAK,OAAQ,GAAK,EACpC,GAAM,IAAM,EAAK,EAAI,GAEhB,OAAA,GAWH,EAAY,SAAC,EAAoB,GACjC,GAAU,OAAV,EAAgB,OAAO,EACvB,GAAU,OAAV,EAAgB,OAAO,EAGtB,IADC,IAAA,EAAK,GACF,EAAI,EAAG,EAAI,EAAM,UACpB,GAAK,EAAM,SACX,EAAM,EAAI,KAAO,EAAM,EAAI,GAFC,GAAK,EAGrC,EAAG,KAAK,EAAM,IACd,EAAG,KAAK,EAAM,EAAI,IAEb,OAAA,GAQI,EAAsB,SAAC,GAGlC,OAAA,EAAA,EAAA,GAAW,GAAK,CAAE,aAAY,KAHnB,QAAA,oBAAmB,EAWzB,IAAM,EAAoB,SAAC,GAEzB,MAAA,CADa,EAAM,YAAc,EAAW,EAAM,aAAe,KAGlE,EAAA,EAAA,GAAA,GAAK,CAAE,aAAY,EAAO,YAAY,SAJjC,QAAA,kBAAiB,EAavB,IAAM,EAAO,SAAC,EAAa,GACzB,OAAA,EAAQ,EAAW,GAAO,EAAM,OAD5B,QAAA,KAAI,EASV,IAAM,EAAU,SAAC,EAAa,GAC7B,IAAA,EAAQ,EAAW,GACnB,GAAM,EAAA,EAAA,SAAM,EAAO,EAAM,MAC3B,IAAE,EACE,MAAA,IAAI,MAAM,yBAA2B,GAEtC,OAAA,EAAM,IANF,QAAA,QAAO,EAcb,IAAM,EAAS,SAAC,EAAa,GAC5B,IAAA,EAAQ,EAAW,GACnB,GAAM,EAAA,EAAA,SAAM,EAAO,EAAM,MAC3B,IAAE,EACE,MAAA,IAAI,MAAM,wBAA0B,GAErC,OAAA,GANI,QAAA,OAAM,EAgBZ,IAAM,EAAS,SAAC,EAAa,EAAS,GACrC,IAAA,EAAQ,EAAW,GACnB,GAAO,EAAA,EAAA,SAAM,EAAO,EAAM,MAC5B,IAAE,EACE,MAAA,IAAI,MAAM,wBAA0B,GAEpC,QAAA,EAAA,EAAA,QAAO,EAAK,QACb,IAAA,OACA,IAAA,UACA,IAAA,SACA,IAAA,SACA,IAAA,YACH,MACF,QACQ,MAAA,IAAI,MAAM,2BAA6B,GAE3C,IAAA,GAAO,EAAA,EAAA,SAAU,EAAO,EAAK,EAAM,MACnC,EAAc,EAAM,YAAc,EAAU,EAAM,YAAa,GAAS,EAAM,YACpF,OAAA,EAAA,EAAA,GAAW,GAAK,CAAE,KAAI,EAAE,YAAW,KAlBxB,QAAA,OAAM,EA0BZ,IAAM,EAAM,SAAC,EAAa,EAAY,GAwZhC,IAAA,EAvZL,EAAQ,EAAW,GACnB,EAAW,EAAM,GACjB,GAAO,EAAA,EAAA,SAAK,GACZ,GAAO,EAAA,EAAA,SAAM,EAAU,EAAM,MAC7B,GAAQ,EAAA,EAAA,QAAO,EAAK,OACtB,GAAS,UAAT,GAA8B,SAAT,EACjB,MAAA,IAAI,MAAM,yCAA2C,GAEzD,GAAS,SAAT,EAAkB,CAEd,IAAA,EAAkB,MAAT,EAAiB,EAAK,MAAiB,OAAS,EAC3D,GAAgB,iBAAT,GAAqB,EAAQ,GAAM,EACtC,MAAA,IAAI,MAAM,wBAA0B,GAExC,GAAA,EAAQ,GAAK,EAAS,EAAK,MAAiB,OACxC,MAAA,IAAI,MAAM,6BAA+B,GAE3C,IAAA,EAAS,EAAK,GACd,GAAM,EAAA,EAAA,SAAO,EAAO,EAAQ,EAAK,OACjC,EAAM,EAAQ,GACd,GAAO,EAAA,EAAA,SAAU,EAAU,EAAK,EAAM,MAEtC,EAAc,EAAM,YAAc,EAAU,EAAM,YAAa,GAAY,EAAM,YACvF,OAAA,EAAA,EAAA,GAAW,GAAK,CAAE,KAAI,EAAE,YAAW,IAG/B,GAAe,iBAAR,EACH,MAAA,IAAI,MAAM,uBAAyB,GAErC,EAAS,EAAK,GAAd,IACA,EAAM,EAAA,EAAA,GAAK,EAAK,SAA8B,EAAA,IAAG,GAAM,EAAM,IAC7D,EAAM,EAAQ,GACd,GAAO,EAAA,EAAA,SAAU,EAAU,EAAK,EAAM,MAEtC,EAAe,EAAM,YACvB,EAAU,EAAM,YAAc,KAAS,EAAK,MAAoB,EAAQ,GADnC,EAAM,YAE/C,OAAA,EAAA,EAAA,GAAW,GAAK,CAAE,KAAI,EAAE,YAAW,KArC1B,QAAA,IAAG,EAiDT,IAAM,EAAS,SAAC,EAAa,GAC5B,IAAA,EAAQ,EAAW,GACnB,EAAW,EAAM,GACjB,GAAO,EAAA,EAAA,SAAK,GACZ,GAAO,EAAA,EAAA,SAAM,EAAU,EAAM,MAC7B,GAAQ,EAAA,EAAA,QAAO,EAAK,OACtB,GAAS,UAAT,GAA8B,SAAT,EACjB,MAAA,IAAI,MAAM,4CAA8C,GAE5D,GAAS,SAAT,EAAkB,CAEhB,GAAe,iBAAR,GAAoB,EAAO,GAAM,EACpC,MAAA,IAAI,MAAM,2BAA6B,GAE3C,GAAA,EAAO,GAAK,GAAS,EAAK,MAAiB,OACvC,MAAA,IAAI,MAAM,0BAA4B,GAExC,IAAA,GAAM,EAAA,EAAA,SAAQ,EAAM,EAAG,EAAK,OAC5B,EAAM,EAAQ,GACd,GAAO,EAAA,EAAA,SAAU,EAAU,EAAK,EAAM,MACtC,EAAc,EAAM,YAAc,EAAU,EAAM,YAAa,GAAY,EAAM,YACvF,OAAA,EAAA,EAAA,GAAW,GAAK,CAAE,KAAI,EAAE,YAAW,IAG/B,IAAE,EAAK,MAAM,eAAe,GACxB,MAAA,IAAI,MAAM,iCAAmC,GAE/C,IAAA,GAAM,EAAA,EAAA,SAAO,EAAe,EAAK,OACjC,EAAM,EAAQ,GACd,GAAO,EAAA,EAAA,SAAU,EAAU,EAAK,EAAM,MACtC,EAAc,EAAM,YAAc,EAAU,EAAM,YAAa,GAAY,EAAM,YACvF,OAAA,EAAA,EAAA,GAAW,GAAK,CAAE,KAAI,EAAE,YAAW,KA/B1B,QAAA,OAAM,EA4CZ,IAAM,EAAU,SAAC,EAAa,EAAY,GA2TpC,IAAA,EA1TL,EAAQ,EAAW,GACrB,GAAgB,GAAhB,EAAM,OAAa,CAEf,IAAA,EAAO,EAAK,GACZ,EAAc,EAAM,YAAc,GAAK,EAAM,YACnD,OAAA,EAAA,EAAA,GAAW,GAAK,CAAE,KAAI,EAAE,YAAW,IAE/B,IAAA,EAAW,EAAM,GACjB,GAAO,EAAA,EAAA,SAAK,GACZ,GAAO,EAAA,EAAA,SAAM,EAAU,EAAM,MAC7B,GAAQ,EAAA,EAAA,QAAO,EAAK,OACtB,GAAS,UAAT,GAA8B,SAAT,EACjB,MAAA,IAAI,MAAM,6CAA+C,GAE7D,GAAS,SAAT,EAAkB,CAEhB,GAAe,iBAAR,GAAoB,EAAO,GAAM,EACpC,MAAA,IAAI,MAAM,4BAA8B,GAE5C,GAAA,EAAO,GAAK,GAAS,EAAK,MAAiB,OACvC,MAAA,IAAI,MAAM,2BAA6B,GAEzC,IAAA,EAAS,EAAK,GACd,GAAM,EAAA,EAAA,SAAO,EAAM,EAAQ,EAAK,OAChC,EAAM,EAAQ,GACd,GAAO,EAAA,EAAA,SAAU,EAAU,EAAK,EAAM,MACtC,EAAc,EAAM,YAAc,EAAU,EAAM,YAAa,GAAS,EAAM,YACpF,OAAA,EAAA,EAAA,GAAW,GAAK,CAAE,KAAI,EAAE,YAAW,IAG/B,GAAe,iBAAR,EACH,MAAA,IAAI,MAAM,2BAA6B,GAE3C,KAAE,KAAS,EAAK,OACZ,MAAA,IAAI,MAAM,iCAAmC,GAE/C,EAAS,EAAK,GAAd,IACA,EAAM,EAAA,EAAA,GAAK,EAAK,SAA8B,EAAA,IAAG,GAAM,EAAM,IAC7D,EAAM,EAAQ,GACd,GAAO,EAAA,EAAA,SAAU,EAAU,EAAK,EAAM,MACtC,EAAc,EAAM,YAAc,EAAU,EAAM,YAAa,GAAS,EAAM,YACpF,OAAA,EAAA,EAAA,GAAW,GAAK,CAAE,KAAI,EAAE,YAAW,KA1C1B,QAAA,QAAO,EAuDb,IAAM,EAAO,SAAC,EAAa,EAAa,GACvC,IAAA,GAAQ,EAAA,QAAA,SAAQ,EAAM,GAGrB,OAFP,GAAQ,EAAA,QAAA,QAAO,EAAM,GACrB,GAAQ,EAAA,QAAA,KAAI,EAAM,EAAO,IAHd,QAAA,KAAI,EAgBV,IAAM,EAAO,SAAC,EAAa,EAAa,GACvC,IAAA,GAAQ,EAAA,QAAA,SAAQ,EAAM,GAErB,OADP,GAAQ,EAAA,QAAA,KAAI,EAAM,EAAO,IAFd,QAAA,KAAI,EAcV,IAAM,EAAW,SAAC,EAAa,GAChC,IAAA,EAAW,KAET,EAAS,SAAC,GACR,IAAA,GAAe,EAAA,EAAA,YAAW,EAAU,GACnC,OAAA,EAAA,QAAA,SAAQ,EAAc,IAGzB,EAAQ,SAAC,EAAU,EAAc,GAC/B,IAAA,EAAS,EAAK,MACZ,QAAA,EAAA,EAAA,QAAO,IACR,IAAA,QAEE,IADC,IAAA,EAAM,GACH,EAAI,EAAG,EAAK,EAAkB,OAAQ,IAC7C,EAAI,GAAK,EAAM,EAAO,GAAI,EAAQ,KAAM,EAAO,IAAM,GAGhD,OADP,EAAW,EACJ,EAAM,SAAS,EAAK,EAAM,EAAM,SAAS,GAAQ,GACrD,IAAA,SACG,IAAA,EAAM,GACP,IAAA,IAAI,KAAO,EACd,EAAI,GAAK,EAAM,EAAO,GAAI,EAAQ,IAAM,EAAG,EAAO,IAAM,GAGnD,OADP,EAAW,EACJ,EAAM,SAAS,EAAK,EAAM,EAAM,SAAS,GAAQ,GAC1D,QACE,EAAW,EACL,IAAA,EAAM,EAAM,SAAS,EAAQ,EAAM,EAAM,SAAS,GAAQ,GAC5D,GAAA,EAAI,QAAU,EACV,MAAA,IAAI,MAAM,8BAAgC,GAE3C,OAAA,IAIP,EAAQ,EAAW,GACnB,GAAO,EAAA,EAAA,SAAM,EAAO,EAAM,MAC5B,IAAE,EACE,MAAA,IAAI,MAAM,0BAA4B,GAExC,IAAA,EAAM,EAAM,GAAM,EAAA,EAAA,eAAc,GAAO,GACvC,GAAO,EAAA,EAAA,SAAU,EAAO,EAAK,EAAM,MACzC,OAAA,EAAA,EAAA,GAAW,GAAK,CAAE,KAAI,KA1CX,QAAA,SAAQ,EAiDd,IAAM,EAAU,SAAC,EAAiC,EAAa,GAC9D,IAAA,EAAQ,SAAC,EAAU,GACjB,IAAA,EAAS,EAAK,MACZ,QAAA,EAAA,EAAA,QAAO,IACR,IAAA,QAEE,IADC,IAAA,EAAM,GACH,EAAI,EAAG,EAAK,EAAkB,OAAQ,IAC7C,EAAI,GAAK,EAAM,EAAO,GAAI,EAAO,IAAM,GAEzC,OAAA,EAAA,EAAA,GAAW,EAAE,EAAM,IAAK,CAAE,MAAM,IAC7B,IAAA,SACG,IAAA,EAAM,GACP,IAAA,IAAI,KAAM,EACb,EAAI,GAAK,EAAM,EAAO,GAAI,EAAO,IAAM,GAEzC,OAAA,EAAA,EAAA,GAAW,EAAE,EAAM,IAAK,CAAE,MAAM,IAClC,QACE,OAAA,EAAA,EAAA,GAAW,EAAE,EAAM,IAAK,CAAE,MAAM,MAGhC,EAAQ,EAAW,GACnB,GAAO,EAAA,EAAA,SAAM,EAAO,EAAM,MAC5B,IAAE,EACE,MAAA,IAAI,MAAM,yBAA2B,GAEvC,IAAA,EAAM,EAAM,EAAM,GAClB,GAAO,EAAA,EAAA,SAAU,EAAO,EAAK,EAAM,MACzC,OAAA,EAAA,EAAA,GAAW,GAAK,CAAE,KAAI,KA3BX,QAAA,QAAO,EAkCb,IAAM,EAAa,SAAI,EAAsC,EAAO,EAAa,GAChF,IAAA,EAAQ,SAAC,EAAO,EAAS,GACvB,IAAA,EAAS,EAAI,MACX,QAAA,EAAA,EAAA,QAAO,IACR,IAAA,QACE,IAAA,IAAI,EAAI,EAAG,EAAK,EAAkB,OAAQ,IAC7C,EAAM,EAAM,EAAK,EAAO,GAAI,EAAO,IAAM,GAEpC,OAAA,EAAE,EAAK,EAAK,GAChB,IAAA,SACE,IAAA,IAAI,KAAM,EACb,EAAM,EAAM,EAAK,EAAO,GAAI,EAAO,IAAM,GAEpC,OAAA,EAAE,EAAK,EAAK,GACrB,QACS,OAAA,EAAE,EAAK,EAAK,KAGnB,EAAQ,EAAW,GACnB,GAAM,EAAA,EAAA,SAAM,EAAO,EAAM,MAC3B,IAAE,EACE,MAAA,IAAI,MAAM,4BAA8B,GAEzC,OAAA,EAAM,EAAK,EAAK,IAvBZ,QAAA,WAAU,EAiChB,IAAM,EAAY,SAAC,EAAa,EAAiB,GAkH3C,IAAA,EAjHL,EAAQ,EAAW,GACrB,GAAgB,GAAhB,EAAM,OAAa,CAEf,IAAA,EAAO,EAAU,KACjB,EAAc,EAAQ,YAAc,GAAK,EAAQ,YACvD,OAAA,EAAA,EAAA,GAAW,GAAO,CAAE,KAAI,EAAE,YAAW,IAEjC,IAAA,EAAW,EAAM,GACjB,GAAO,EAAA,EAAA,SAAK,GACZ,GAAO,EAAA,EAAA,SAAM,EAAU,EAAU,MACjC,GAAQ,EAAA,EAAA,QAAO,EAAK,OACtB,GAAS,UAAT,GAA8B,SAAT,EACjB,MAAA,IAAI,MAAM,+CAAiD,GAE/D,GAAS,SAAT,EAAkB,CAEhB,GAAe,iBAAR,GAAoB,EAAO,GAAM,EACpC,MAAA,IAAI,MAAM,8BAAgC,GAE9C,GAAA,EAAO,GAAK,GAAS,EAAK,MAAiB,OACvC,MAAA,IAAI,MAAM,6BAA+B,GAE3C,IAAA,EAAS,EAAK,MAAM,GACpB,GAAM,EAAA,EAAA,SAAO,EAAM,EAAQ,EAAK,OAChC,EAAM,EAAQ,GACd,GAAO,EAAA,EAAA,SAAU,EAAU,EAAK,EAAQ,MACxC,EAAc,EAAQ,YAAc,EAAU,EAAQ,YAAa,GAAS,EAAQ,YAC1F,OAAA,EAAA,EAAA,GAAW,GAAO,CAAE,KAAI,EAAE,YAAW,IAGjC,GAAe,iBAAR,EACH,MAAA,IAAI,MAAM,2BAA6B,GAE3C,KAAE,KAAS,EAAK,OACZ,MAAA,IAAI,MAAM,iCAAmC,GAE/C,EAAS,EAAK,MAAM,GAApB,IACA,EAAG,EAAA,EAAA,GAAQ,EAAK,SAA6B,EAAA,IAAG,GAAM,EAAM,IAC5D,EAAM,EAAQ,GACd,GAAO,EAAA,EAAA,SAAU,EAAU,EAAK,EAAQ,MACxC,EAAc,EAAQ,YAAc,EAAU,EAAQ,YAAa,GAAS,EAAQ,YAC1F,OAAA,EAAA,EAAA,GAAW,GAAO,CAAE,KAAI,EAAE,YAAW,KA1C5B,QAAA,UAAS,EAuDf,IAAM,EAAW,SAAC,EAAa,EAAkB,GA2D3C,IAAA,EA1DP,GAAS,OAAT,EAAe,CACkB,IAAA,EAAA,EAAM,MAAlC,EAAC,EAAkB,GAAL,EAAA,GAAU,EAAA,EAAzB,CAAA,iBAAA,EAAA,EAAA,EAAA,MACN,OAAA,EAAA,EAAA,GAAW,GAAK,CAAE,MAAK,IAEjB,EAAK,EAAA,EAAA,GAAO,EAAM,SAAK,EAAA,IAAG,GAAM,EAAI,IAC1C,OAAA,EAAA,EAAA,GAAW,GAAK,CAAE,MAAK,KANd,QAAA,SAAQ,EAkBd,IAAM,EAAW,SAAC,EAAa,GAC7B,OAAA,EAAM,MAAM,IAAS,MADjB,QAAA,SAAQ,EAad,IAAM,EAAY,SAAC,EAAS,EAAmB,GAChD,GAAA,EAAK,OAAA,EAAA,EAAA,GAAW,GAAK,CAAE,IAAG,EAAE,cAAa,IACY,EAAK,IAAL,EAAK,cACvD,OAD8C,EAAI,EAAnD,CAAA,MAAA,mBAFK,QAAA,UAAS,EAaf,IAAM,EAAW,SAAC,GACnB,IAAA,EAAM,IAGF,MAAA,IAAI,MAAM,sBAFhB,EAAM,IAAI,IAFD,QAAA,SAAQ,EAed,IAAM,EAAU,SAAC,GACd,OAAK,MAAL,GACS,iBAAL,GACP,SAAU,GAHJ,QAAA,QAAO;;ACjaP,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,QAAA,SAAA,QAAA,QAAA,QAAA,UAAA,QAAA,UAAA,QAAA,iBAAA,QAAA,QAAA,QAAA,iBAAA,QAAA,QAAA,QAAA,WAAA,QAAA,IAAA,QAAA,KAAA,QAAA,eAAA,QAAA,SAAA,QAAA,SAAA,QAAA,OAAA,QAAA,MAAA,QAAA,UAAA,EAtUb,IAAA,EAAA,QAAA,WAEA,EAAA,QAAA,YAUM,EAAW,SAAC,EAAY,GACxB,IAAE,EAAM,OAAO,EACf,GAAU,OAAV,EACK,OAAA,EAAA,EAAA,UAAS,GAER,OAAA,GACD,IAAA,OACI,OAAA,EACJ,IAAA,SACA,IAAA,UACI,MAAgB,iBAAT,EACX,IAAA,UACA,IAAA,WACK,MAAgB,iBAAT,GAAqB,EAAQ,GAAM,EAC/C,IAAA,UACA,IAAA,WACI,MAAgB,kBAAT,EACX,IAAA,SACI,MAAgB,iBAAT,EACX,IAAA,SACA,IAAA,UACK,MAAgB,iBAAT,GAA+B,OAAV,EACjC,IAAA,QACA,IAAA,SACI,OAAA,MAAM,QAAQ,GACvB,QACQ,MAAA,IAAI,MAAM,iBAAmB,KAW9B,EAAgB,SAAC,EAAO,GAC/B,GAAgB,iBAAT,EAAmB,MAAM,IAAI,MAAM,gBAE1C,QADW,EAAS,EAAO,IACV,CAAC,KAAK,QAAQ,IAHxB,QAAA,KAAI,EAaV,IAAM,EAAiB,SAAC,EAAc,GACvC,IAAE,MAAM,QAAQ,GAAQ,MAAM,IAAI,MAAM,qBACvC,IAAA,IAAI,EAAI,EAAG,EAAI,EAAM,OAAQ,IAC5B,GAAA,EAAM,KAAO,EAAO,OAAO,EAE1B,MAAA,CAAC,KAAK,cALF,QAAA,MAAK,EAcX,IAAM,EAAkB,SAAC,EAAO,GACjC,GAAA,IAAU,EAAO,OAAO,EACpB,QAAA,EAAA,EAAA,QAAO,IACR,IAAA,SACA,IAAA,SACA,IAAA,OACA,IAAA,UACI,MAAA,CAAC,KAAK,aAAc,KAAM,GACnC,QACS,MAAA,CAAC,KAAK,uBATN,QAAA,OAAM,EAoBZ,IAAM,EAAoB,SAAC,EAAQ,GACpC,MAAiB,WAAjB,EAAA,EAAA,QAAO,KACG,KAAV,GACG,CAAC,KAAK,mBAHF,QAAA,SAAQ,EAad,IAAM,EAAoB,SAAC,EAAO,GACnC,IAAE,MAAM,QAAQ,GAAQ,MAAM,IAAI,MAAM,qBACxC,GAAiB,WAAjB,EAAA,EAAA,QAAO,GAAoB,OAAO,EACjC,IAAA,IAAI,EAAI,EAAG,EAAI,EAAM,OAAQ,IAC5B,IAAE,EAAM,eAAe,EAAM,IAAe,MAAO,CAAC,KAAK,gBAAiB,KAAK,EAAM,IAEpF,OAAA,GANI,QAAA,SAAQ,EAgCd,IAAM,EAA0B,SAAC,EAAO,EAAO,GAChD,GAAiB,WAAjB,EAAA,EAAA,QAAO,MAAwB,gBAAkB,GAAmB,MAAM,IAAI,MAAM,qBACpF,GAAiB,WAAjB,EAAA,EAAA,QAAO,GAAoB,OAAO,EAEhC,IAAA,EAAM,EAAO,MADnB,EAAQ,GACwB,aAC5B,IAAE,EAAK,MAAO,CAAC,KAAK,6BAA8B,WAAW,UAC7D,IAAE,EAAM,MAAM,GAAM,MAAO,CAAC,KAAK,6BAA8B,OAAO,WACpE,IAAA,EAAW,EAAM,MAAM,GACzB,IAAE,MAAM,QAAQ,GAAW,MAAM,IAAI,MAAM,qBAC1C,IAAA,IAAI,EAAI,EAAG,EAAI,EAAS,OAAQ,IAC/B,IAAE,EAAM,eAAe,EAAS,IAAK,MAAO,CAAC,KAAK,sBAAuB,KAAK,EAAS,IAEtF,OAAA,GAZI,QAAA,eAAc,EAsBpB,IAAM,EAAgB,SAAC,EAAO,EAAO,GACtC,GAAgB,iBAAT,EAAmB,MAAM,IAAI,MAAM,qBACxC,IAAA,EAAS,EAAO,GAClB,GAAA,IAAW,EACL,QAAA,EAAA,EAAA,QAAO,IACR,IAAA,SACA,IAAA,SACA,IAAA,OACA,IAAA,UACI,MAAA,CAAC,KAAK,YAAa,KAAM,GAClC,QACS,MAAA,CAAC,KAAK,oBAGZ,OAAA,GAdI,QAAA,KAAI,EAgCV,IAAM,EAAe,SAAC,EAAO,EAAO,EAAQ,GAC7C,GAAiB,UAAjB,EAAA,EAAA,QAAO,GAAmB,MAAM,IAAI,MAAM,qBACxC,IAAA,EAAS,EACR,EAAgC,EAAM,GAA9B,EAAwB,EAAM,GAAvB,EAAiB,EAAM,GAAjB,EAAW,EAAM,GAAjB,OAAE,IAAA,EAAG,GAAE,EAC/B,IAAE,IAAY,IAAW,EAAM,MAAM,IAAI,MAAM,qBAC7C,IAAA,EAAc,EAAO,GAEvB,OAAiB,KADA,EAAA,EAAA,YAAW,EAAa,EAAO,EAAQ,IAEnD,EAAA,EAAA,YAAW,EAAO,EAAM,EAAQ,IAEhC,EAAA,EAAA,YAAW,EAAO,EAAI,EAAQ,IAV5B,QAAA,IAAG,EAoBT,IAAM,EAAsB,SAAC,EAAO,GACrC,GAAgB,iBAAT,EAAmB,MAAM,IAAI,MAAM,qBAC1C,MAAgB,iBAAT,IACP,EAAQ,GAAU,GACf,CAAC,KAAK,kBAAmB,KAAK,KAJ1B,QAAA,WAAU,EAahB,IAAM,EAAmB,SAAC,EAAO,GAClC,MAAgB,iBAAT,IACP,GAAS,GACN,CAAC,KAAK,eAAgB,KAAK,KAHvB,QAAA,QAAO,EAYb,IAAM,EAA4B,SAAC,EAAO,GAC3C,MAAgB,iBAAT,IACP,EAAQ,GACL,CAAC,KAAK,wBAAyB,KAAK,KAHhC,QAAA,iBAAgB,EAYtB,IAAM,EAAmB,SAAC,EAAO,GAClC,MAAgB,iBAAT,IACP,GAAS,GACN,CAAC,KAAK,eAAgB,KAAK,KAHvB,QAAA,QAAO,EAYb,IAAM,EAA4B,SAAC,EAAO,GAC3C,MAAgB,iBAAT,IACP,EAAQ,GACL,CAAC,KAAK,wBAAyB,KAAK,KAHhC,QAAA,iBAAgB,EAYtB,IAAM,EAAqB,SAAC,EAAO,GACpC,MAAgB,iBAAT,IACP,EAAM,QAAU,GACb,CAAC,KAAK,iBAAkB,KAAK,KAHzB,QAAA,UAAS,EAYf,IAAM,EAAqB,SAAC,EAAO,GACpC,MAAgB,iBAAT,IACP,EAAM,QAAU,GACb,CAAC,KAAK,iBAAkB,KAAK,KAHzB,QAAA,UAAS,EAYf,IAAM,EAAmB,SAAC,EAAO,GAClC,GAAgB,iBAAT,EAAmB,MAAM,IAAI,MAAM,qBAC1C,MAAgB,iBAAT,MACP,IAAI,OAAO,GAAO,KAAK,IACpB,CAAC,KAAK,eAAgB,KAA6B,KAJ/C,QAAA,QAAO,EAab,IAAM,EAAoB,SAAC,EAAO,GACnC,GAAgB,iBAAT,EAAmB,MAAM,IAAI,MAAM,qBAC1C,OAAE,MAAM,QAAQ,KAChB,EAAM,QAAU,GACb,CAAC,KAAK,gBAAiB,KAA6B,KAJhD,QAAA,SAAQ,EAad,IAAM,EAAoB,SAAC,EAAO,GACnC,GAAgB,iBAAT,EAAmB,MAAM,IAAI,MAAM,qBAC1C,OAAE,MAAM,QAAQ,KAChB,EAAM,QAAU,GACb,CAAC,KAAK,gBAAiB,KAA6B,KAJhD,QAAA,SAAQ;;AChIR,aAAA,IAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,EAAA,MAAA,KAAA,kBAAA,OAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,OAAA,eAAA,EAAA,EAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,qBAAA,OAAA,OAAA,SAAA,EAAA,GAAA,OAAA,eAAA,EAAA,UAAA,CAAA,YAAA,EAAA,MAAA,KAAA,SAAA,EAAA,GAAA,EAAA,QAAA,IAAA,EAAA,MAAA,KAAA,cAAA,SAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,YAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,GAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,QAAA,WAAA,QAAA,SAAA,QAAA,aAAA,QAAA,QAAA,QAAA,cAAA,EAtMb,IAAA,EAAA,QAAA,WAEA,EAAA,EAAA,QAAA,YAsGa,EAAW,SAAC,GACnB,IAAE,EAAM,OAAO,EACb,IAAA,EAAW,EAAK,OAAO,EAAK,OAAS,GACpC,MAAQ,QAAR,GAA8B,KAAZ,GAHd,QAAA,SAAQ,EAWd,IAAM,EAAU,SAAC,GAChB,IAAA,EAAK,GACL,EAAQ,SAAC,EAAe,GAEpB,OADR,EAAG,GAAQ,EACH,EAAO,MACR,IAAA,SACA,IAAA,UACE,IAAA,IAAI,KAAK,EAAO,WACnB,EAAM,EAAO,WAAW,GAAI,EAAO,IAAM,GAE3C,MACG,IAAA,QACA,IAAA,SACH,EAAM,EAAO,MAAiB,EAAO,QAOpC,OADP,EAAM,EAAQ,IACP,GApBI,QAAA,QAAO,EA6BP,QAAA,aAAqB,CAChC,KAAK,EAAE,KAAa,KAAA,EAAE,MAAe,MAAA,EAAE,OAAQ,SAAS,EAAE,SAAU,SAAS,EAAE,SAAU,eAAe,EAAE,eAAgB,KAAK,EAAE,KAAW,GAAA,EAAE,IAE9I,WAAW,EAAE,WAAY,QAAQ,EAAE,QAAS,iBAAiB,EAAE,iBAAkB,QAAQ,EAAE,QAAS,iBAAiB,EAAE,iBAAkB,UAAU,EAAE,UAAW,UAAU,EAAE,UAAW,QAAQ,EAAE,QAAS,SAAS,EAAE,SAAU,SAAS,EAAE,UAUrO,IAAM,EAAW,SAAC,GAAyB,OAAA,SAAC,EAAO,EAAK,EAAQ,GACjE,KAAE,EAAA,EAAA,aAAY,GAAQ,CACpB,GAAA,GAAU,EAAO,KAAM,CACnB,IAAA,EAAQ,CAAC,KAAK,QAAQ,EAAO,KAAM,OAAO,gBAAgB,GAChE,OAAA,EAAA,EAAA,GAAW,GAAG,CAAE,MAAK,EAAE,SAAQ,EAAM,MAAK,IAEpC,EAAQ,CAAC,KAAK,QAAS,OAAO,gBAAgB,GACpD,OAAA,EAAA,EAAA,GAAW,GAAG,CAAE,MAAK,EAAE,SAAQ,EAAM,MAAK,IAI1C,GAAA,EAAQ,CACJ,IAAA,GAAS,EAAA,QAAA,YAAW,EAAO,EAAQ,EAAQ,GAC7C,IAAW,IAAX,EACF,OAAA,EAAA,EAAA,GAAW,GAAG,CAAE,MAAK,EAAE,SAAQ,EAAM,MAAM,IAG/C,OAAA,EAAA,EAAA,GAAW,GAAG,CAAE,MAAK,EAAE,SAAQ,EAAO,MAAM,SAjBjC,QAAA,SAAQ,EA0Bd,IAAM,EAAa,SAAC,EAAW,EAAe,EAAe,GAC7D,IAAA,IAAI,KAAK,EAAQ,CACd,IAAA,EAAI,EAAM,GACZ,GAAE,EAAF,CACE,IAAA,EAAS,EAAE,EAAO,GAAI,EAAO,EAAQ,GACvC,IAAW,IAAX,EAAiB,OAAO,GAEvB,OAAA,GAPI,QAAA,WAAU,EAehB,IAAM,EAAS,SAAC,EAAc,EAAS,GAExC,GADJ,EAAQ,GAAK,GACP,EACE,MAAA,IAAI,MAAM,uBAEd,IAAE,EAAO,MAA8B,iBAAf,EAAO,KAC3B,MAAA,IAAI,MAAM,gCAEZ,IAAA,EAAO,EAAO,KAChB,IAAwG,GAAxG,CAAC,OAAQ,UAAW,WAAY,UAAW,WAAY,SAAU,UAAW,UAAU,QAAQ,GAC1F,MAAA,IAAI,MAAM,0CAA4C,GAGtD,OAAA,GACD,IAAA,OACH,MACG,IAAA,SACA,IAAA,UACG,IAAA,GAAK,EACP,GAAA,GAAK,IAAM,EACN,MAAA,CAAC,MAAM,EAAG,MAAK,EAAE,QAAQ,EAAI,SAEtC,MACG,IAAA,UACA,IAAA,WACG,IAAA,GAAK,EACP,GAAA,GAAK,IAAM,GAAS,EAAI,GAAM,EACzB,MAAA,CAAC,MAAM,EAAG,MAAK,EAAE,QAAQ,EAAI,SAEtC,MACG,IAAA,UACA,IAAA,WACC,GAAU,SAAV,GAA8B,UAAV,EACf,MAAA,CAAC,MAAc,SAAR,EAAgB,MAAK,EAAE,QAAQ,EAAI,SAEnD,MACG,IAAA,SACI,MAAA,CAAC,MAAM,EAAO,MAAK,EAAE,QAAQ,EAAI,SAExC,MAAS,IAAT,IAAe,EAAA,QAAA,UAAS,GACnB,CAAC,MAAM,KAAM,MAAK,EAAE,QAAQ,EAAI,SAElC,CAAC,MAAK,EAAE,QAAQ,EAAI,UA1ChB,QAAA,OAAM;;AC/HnB,aAAA,IAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,QAAA,eAAA,QAAA,aAAA,EAvEA,IAAA,EAAA,QAAA,WAmDa,EAAU,SAAC,GACd,MAAY,iBAAL,GAAsB,MAAL,GAAa,SAAU,GAD5C,QAAA,QAAO,EAUb,IAUK,EAVC,EAAiB,SAAC,GAAiD,OAAA,SAAC,GACzE,IAAA,EAAW,EAAQ,EAAM,OAAS,EAAQ,WAAY,EAAQ,YAAc,sBAC5E,GAAU,EAAA,EAAA,UAAS,EAAU,GACnC,OAAA,EAAA,EAAA,GAAW,GAAK,CAAE,QAAO,MAHd,QAAA,eAAc,EAU3B,SAAY,GAIV,EAAA,UAAA,qCAIA,EAAA,sBAAA,oBAEA,EAAA,MAAA,gBAIA,EAAA,aAAA,4BAIA,EAAA,gBAAA,+BAIA,EAAA,iBAAA,yCAIA,EAAA,gBAAA,0BAIA,EAAA,iBAAA,oCAIA,EAAA,eAAA,wBAIA,EAAA,gBAAA,kCAIA,EAAA,eAAA,wBAIA,EAAA,eAAA,+BAIA,EAAA,gBAAA,yCAIA,EAAA,cAAA,8BAIA,EAAA,eAAA,wCAIA,EAAA,aAAA,gBAIA,EAAA,cAAA,eAIA,EAAA,qBAAA,gBAIA,EAAA,iBAAA,eAIA,EAAA,iBAAA,4BAIA,EAAA,uBAAA,4BAIA,EAAA,8BAAA,yBAIA,EAAA,aAAA,sBAIA,EAAA,oBAAA,gBAIA,EAAA,mBAAA,oCAIA,EAAA,gBAAA,8BAIA,EAAA,yBAAA,gCAIA,EAAA,gBAAA,8BAIA,EAAA,yBAAA,gCAIA,EAAA,kBAAA,8CAIA,EAAA,kBAAA,0CAIA,EAAA,gBAAA,iBAIA,EAAA,iBAAA,gCAIA,EAAA,iBAAA,gCAIA,EAAA,YAAA,uBAIA,EAAA,YAAA,uBAIA,EAAA,YAAA,uBAIA,EAAA,YAAA,uBAIA,EAAA,YAAA,uBAIA,EAAA,YAAA,uBAIA,EAAA,YAAA,uBAIA,EAAA,YAAA,uBAIA,EAAA,YAAA,uBAIA,EAAA,YAAA,uBAIA,EAAA,YAAA,uBAIA,EAAA,YAAA,uBAIA,EAAA,YAAA,uBAIA,EAAA,YAAA,uBA9LF,CAAY,EAAA,QAAA,iBAAA,QAAA,eAAc;;ACsoBb,aAAA,IAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,EAAA,MAAA,KAAA,kBAAA,OAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,OAAA,eAAA,EAAA,EAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,qBAAA,OAAA,OAAA,SAAA,EAAA,GAAA,OAAA,eAAA,EAAA,UAAA,CAAA,YAAA,EAAA,MAAA,KAAA,SAAA,EAAA,GAAA,EAAA,QAAA,IAAA,EAAA,MAAA,KAAA,cAAA,SAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,YAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,GAAA,GAAA,EAAA,MAAA,KAAA,eAAA,SAAA,EAAA,EAAA,GAAA,GAAA,GAAA,IAAA,UAAA,OAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,KAAA,GAAA,KAAA,IAAA,IAAA,EAAA,MAAA,UAAA,MAAA,KAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,OAAA,EAAA,OAAA,GAAA,MAAA,UAAA,MAAA,KAAA,KAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,EAAA,QAAA,KAAA,QAAA,MAAA,QAAA,IAAA,QAAA,WAAA,EA/sBb,IAgHiB,EAhHjB,EAAA,QAAA,WACA,EAAA,EAAA,QAAA,YACA,EAAA,EAAA,QAAA,aACA,EAAA,EAAA,QAAA,aACA,EAAA,QAAA,YAIA,EAAA,QAAA,WAAQ,OAAA,eAAA,QAAA,QAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,SAwGR,SAAiB,GAEF,EAAA,KAAO,EAAE,KACT,EAAA,QAAU,EAAE,QACZ,EAAA,OAAS,EAAE,OACX,EAAA,IAAM,EAAE,IACR,EAAA,OAAS,EAAE,OACX,EAAA,QAAU,EAAE,QACZ,EAAA,KAAO,EAAE,KACT,EAAA,KAAO,EAAE,KACT,EAAA,UAAY,EAAE,UACd,EAAA,SAAW,EAAE,SACb,EAAA,QAAU,EAAE,QACZ,EAAA,WAAa,EAAE,WACf,EAAA,SAAW,EAAE,SAQb,EAAA,SAAW,SAAC,EAAa,GAC7B,OAAA,EAAE,QAAQ,SAAC,EAAK,GAAU,OAAA,EAAA,EAAA,GAAK,GAAG,CAAE,SAAQ,KAAQ,EAAM,IAStD,EAAA,sBAAwB,SAAC,EAAa,GAC1C,OAAA,EAAE,WAAW,SAAC,EAAK,EAAK,GAEtB,OAAA,GADG,EAAI,SAAW,EAAI,QAAU,EAAI,IAE1C,EAAG,EAAM,IASD,EAAA,iBAAmB,SAAC,EAAa,GACtC,IAAA,EAAkB,GAOjB,OANP,EAAE,WAAW,SAAC,EAAM,EAAK,GAIhB,OAHH,EAAI,SAAW,EAAI,SACrB,EAAO,KAAK,GAEP,MACN,KAAM,EAAM,GACR,GAQI,EAAA,aAAe,SAAC,EAAa,GACjC,OAAA,EAAI,WAAqB,SAAC,EAAK,EAAK,GACrC,OAAA,EAAI,QAAgB,EACpB,EAAI,SAAW,EAAI,QAAgB,CAAC,SAAQ,EAAM,MAAM,EAAI,OACzD,GACN,CAAC,SAAQ,EAAO,MAAM,MAAO,EAAM,IAQ3B,EAAA,MAAQ,SAAC,EAAW,GAMxB,MAAA,CALG,IAAI,QAAc,SAAC,EAAS,GACpC,WAAW,WACT,EAAQ,OACP,KAEM,IAUA,EAAA,gBAAkB,SAAI,EAAa,EAAiB,EAAc,GAItE,MAAA,CAHG,IAAI,QAAW,SAAC,EAAS,GACjC,EAAQ,EAAE,SAAS,EAAM,CAAC,SAAQ,EAAE,MAAK,EAAE,QAAO,EAAE,OAAM,GAAG,KAEpD,IAQA,EAAA,cAAgB,SAAC,EAAa,GAErC,OADU,EAAE,SAAS,EAAM,GAExB,EAAE,SAAS,EAAM,KAAM,GADV,GAST,EAAA,cAAgB,SAAC,EAAa,GACnC,IAAA,EAAQ,EAAE,SAAS,EAAM,GAC3B,OAAE,EACC,EAAM,SADO,MAUT,EAAA,WAAa,SAAC,EAAa,EAAU,GAIzC,MAAA,CAHG,IAAI,QAAiB,SAAC,EAAS,GACvC,EAAQ,EAAE,SAAS,EAAM,CAAC,KAAI,EAAE,QAAO,EAAE,OAAM,GAAG,KAEzC,IAQA,EAAA,YAAc,SAAC,EAAa,GAEnC,OADU,EAAE,SAAS,EAAM,GAExB,EAAE,SAAS,EAAM,KAAM,GADV,GAST,EAAA,UAAY,SAAC,EAAa,GAC/B,IAAA,EAAQ,EAAE,SAAS,EAAM,GAC3B,OAAE,EACC,EAAM,KADO,MAUT,EAAA,aAAe,SAAC,EAAa,EAAU,GAC3C,OAAA,EAAE,SAAS,EAAM,EAAM,IAQnB,EAAA,cAAgB,SAAC,EAAa,GAErC,OADU,EAAE,SAAS,EAAM,GAExB,EAAE,SAAS,EAAM,KAAM,GADV,GAST,EAAA,YAAc,SAAC,EAAa,GAChC,OAAA,EAAE,SAAS,EAAM,IASb,EAAA,QAAU,SAAC,EAAa,EAAgB,GAC5C,OAAA,EAAE,SAAS,EAAM,EAAS,IAQtB,EAAA,QAAU,SAAC,EAAa,GAC7B,IAAA,EAAQ,EAAE,SAAS,EAAM,GACvB,OAAU,OAAV,EAAkB,EAAQ,GAQvB,EAAA,SAAW,SAAC,EAAa,GAC9B,IAAA,EAAQ,EAAE,SAAS,EAAM,GACzB,EAAqB,OAAV,EAAkB,EAAQ,EACpC,OAAA,EAAE,SAAS,EAAM,EAAU,EAAG,IAQ1B,EAAA,SAAW,SAAC,EAAa,GAC9B,IAAA,EAAQ,EAAE,SAAS,EAAM,GACzB,EAAqB,OAAV,EAAkB,EAAQ,EACpC,OAAA,EAAE,SAAS,EAAM,EAAU,EAAG,IAS1B,EAAA,UAAY,SAAC,EAAa,EAAe,GAC7C,OAAA,EAAE,SAAS,EAAM,EAAO,IAQpB,EAAA,UAAY,SAAC,EAAa,GAC/B,IAAA,EAAQ,EAAE,SAAS,EAAM,GACvB,OAAU,OAAV,GAAkB,GAQf,EAAA,aAAe,SAAC,EAAa,GAClC,IAAA,EAAQ,EAAE,SAAS,EAAM,GACzB,EAAqB,OAAV,GAAkB,EAC5B,OAAA,EAAE,SAAS,GAAO,EAAS,IAYvB,EAAA,aAAe,SAAC,EAAa,EAAa,GAC9C,OAAA,EAAE,SAAS,EAAM,CAAC,SAAS,GAAI,IAQ3B,EAAA,cAAgB,SAAC,EAAa,GAClC,OAAA,EAAE,SAAS,EAAM,KAAM,IAQnB,EAAA,YAAc,SAAC,EAAa,GACjC,IAAA,EAAQ,EAAE,SAAS,EAAM,GAC3B,OAAE,EACC,EAAM,QADO,MAWT,EAAA,QAAU,SAAC,EAAa,EAAiB,EAAc,GAC5D,IAAA,EAAiB,EAAI,WAAW,GAA/B,EAAK,EAAA,MACL,OAAA,EADY,EAAA,OACN,EAAI,gBAA+B,EAAM,EAAU,EAAO,IACtE,KAAK,EAAM,SAAC,EAAQ,GAAP,IAAA,EAAI,EAAA,KAET,OADP,EAAQ,EAAI,cAAc,EAAM,GACzB,EAAI,KAAK,EAAU,EAAM,OAOvB,EAAA,WAAa,SAAC,GAClB,MAAA,CAKL,MAAO,SAAC,GACC,OAAA,SAAC,GACF,IAAA,EAAU,KAGP,OADN,EAAM,cAAsD,CAAC,OAAM,EAAE,QAAO,EAAE,IADnE,SAAC,GAAU,EAAU,KAE1B,IAQX,MAAO,SAAI,EAAgB,GACnB,IAAA,EAAI,MAAM,QAAQ,GAAK,EAAE,GAAK,EAC9B,EAAQ,MAAM,QAAQ,GAAK,EAAE,GAAK,EACpC,IAAE,EAAE,QAAQ,GAAQ,MAAM,IAAI,MAAM,0BAEjC,OADP,EAAE,SAAS,GACJ,KA7Uf,CAAiB,EAAA,QAAA,MAAA,QAAA,IAAG,KAmVpB,IAAM,EAAoB,CACxB,WAAY,EAAI,WAChB,YAAa,EAAI,YACjB,aAAc,EAAI,aAClB,cAAe,EAAI,cACnB,aAAc,EAAI,aAClB,cAAe,EAAI,cACnB,QAAS,EAAI,QACb,SAAU,EAAI,SACd,SAAU,EAAI,SACd,UAAW,EAAI,UACf,aAAc,EAAI,aAClB,QAAS,EAAI,SAOF,EAAQ,SACjB,GAwPS,IAAA,EAvPP,EAAI,EAAA,KACJ,EAAM,EAAA,OACN,EAAM,EAAA,OACN,EAAW,EAAA,YACX,EAAA,EAAA,OAAA,OAAM,IAAA,EAAG,KAAI,EACb,EAAA,EAAA,QAAA,OAAO,IAAA,EAAG,GAAE,EACZ,EAAA,EAAA,MAAA,OAAK,IAAA,EAAG,KAAI,EACZ,EAAA,EAAA,QAAA,OAAO,IAAA,EAAG,KAAI,EAGZ,IAAQ,EAAS,SAAC,EAAO,EAAU,GAAe,OAAA,IAClD,IAkLF,EAlLE,EAAW,EAAE,SAAS,GAAS,EAAE,cACjC,EAAS,EAAE,OACX,EAAiB,EAAE,eAAe,GAAW,EAAE,gBAE/C,EAAW,EAAE,QAAQ,GAErB,EAAW,CACf,eAAgB,SAAC,GAAa,OAAA,SAAC,EAAsB,GAC7C,IAAA,EAAQ,EAAG,cAA8B,QAAQ,OACjD,EAAQ,EAAG,cAAe,EAAG,cAA8B,QAAQ,kBACnE,EAAO,EAAE,OAAO,EAAM,EAAM,WAC5B,EAAG,EAAA,EAAA,GAAO,GAAI,CAAE,MAAM,IACtB,EAAY,EAAE,OAAO,EAAM,EAAK,EAAM,WAGtC,EAAQ,EAAE,OAAO,EAAM,EAAM,OAC7B,EAAI,EAAA,EAAA,GAAO,GAAK,CAAE,MAAM,IACxB,EAAQ,EAAE,OAAO,EAAM,EAAM,EAAM,OACzC,OAAA,EAAA,EAAA,GAAW,GAAK,CAAE,UAAS,EAAE,MAAK,MAEpC,cAAe,SAAC,GAAa,OAAA,SAAC,EAAsB,GAwN3C,IAAA,EAlNH,EALE,EAAQ,EAAG,cAA8B,QAAQ,OACjD,EAAQ,EAAG,cAAe,EAAG,cAA8B,QAAQ,kBACnE,GAAQ,EAAA,EAAA,eAAc,GACtB,EAAI,EAAA,EAAA,GAAO,EAAE,OAAO,EAAM,EAAM,YAAU,CAAE,SAAQ,IACpD,EAAM,EAAO,EAAO,EAAM,EAAS,IAErC,EAAY,EAAE,oBAAoB,EAAM,WAC5C,EAAY,EAAE,OAAO,EAAM,EAAK,GAChC,EAAY,EAAE,SAAS,GAAI,GAC1B,GAAD,EAA6B,EAAE,kBAAkB,IAAnC,GAAE,EAAS,EAAA,GACrB,IAAA,EAAQ,EAAO,EAAW,EAAe,GAE7C,OADA,EAAQ,EAAE,SAAS,GAAI,GACvB,EAAA,EAAA,GAAW,GAAK,CAAE,UAAS,EAAE,MAAK,MAEpC,cAAe,SAAC,GAAa,OAAA,SAAC,EAAsB,GAC5C,IAAA,EAAQ,EAAG,cAA8B,QAAQ,OACjD,EAAQ,EAAG,cAAe,EAAG,cAA8B,QAAQ,kBACnE,EAAO,EAAE,OAAO,EAAM,EAAM,WAC5B,EAAG,EAAA,EAAA,GAAO,GAAI,CAAE,MAAM,IACtB,EAAY,EAAE,OAAO,EAAM,EAAK,EAAM,WAGtC,EAAQ,EAAE,OAAO,EAAM,EAAM,OAC7B,EAAI,EAAA,EAAA,GAAO,GAAK,CAAE,MAAM,IACxB,EAAQ,EAAE,OAAO,EAAM,EAAM,EAAM,OACzC,OAAA,EAAA,EAAA,GAAW,GAAK,CAAE,UAAS,EAAE,MAAK,MAEpC,eAAgB,SAAC,GAAa,OAAA,SAAC,EAAsB,GA4L5C,IAAA,EAtLH,EALE,EAAQ,EAAG,cAA8B,QAAQ,OACjD,EAAQ,EAAG,cAAe,EAAG,cAA8B,QAAQ,kBACnE,GAAQ,EAAA,EAAA,eAAc,GACtB,EAAI,EAAA,EAAA,GAAO,EAAE,OAAO,EAAM,EAAM,YAAU,CAAE,SAAQ,IACpD,EAAM,EAAO,EAAO,EAAM,EAAS,IAErC,EAAY,EAAE,oBAAoB,EAAM,WAC5C,EAAY,EAAE,OAAO,EAAM,EAAK,GAChC,EAAY,EAAE,SAAS,GAAI,GAC1B,GAAD,EAA6B,EAAE,kBAAkB,IAAnC,GAAE,EAAS,EAAA,GACrB,IAAA,EAAQ,EAAO,EAAW,EAAe,EAAM,OAEnD,OADA,EAAQ,EAAE,SAAS,GAAI,GACvB,EAAA,EAAA,GAAW,GAAK,CAAE,UAAS,EAAE,MAAK,MAEpC,gBAAiB,SAAC,GAAa,OAAA,SAAC,EAAsB,GA6K7C,IAAA,EAvKH,EALE,EAAQ,EAAG,cAA8B,QAAQ,OACjD,EAAQ,EAAG,cAAe,EAAG,cAA8B,QAAQ,kBACnE,GAAQ,EAAA,EAAA,eAAc,GACtB,EAAI,EAAA,EAAA,GAAO,EAAE,OAAO,EAAM,EAAM,YAAU,CAAE,SAAQ,IACpD,EAAM,EAAO,EAAO,EAAM,EAAS,IAErC,EAAY,EAAE,oBAAoB,EAAM,WAC5C,EAAY,EAAE,OAAO,EAAM,EAAK,GAChC,EAAY,EAAE,SAAS,GAAI,GAC1B,GAAD,EAA6B,EAAE,kBAAkB,IAAnC,GAAE,EAAS,EAAA,GACrB,IAAA,EAAQ,EAAO,EAAW,EAAe,EAAM,OAEnD,OADA,EAAQ,EAAE,SAAS,GAAI,GACvB,EAAA,EAAA,GAAW,GAAK,CAAE,UAAS,EAAE,MAAK,MAEpC,cAAe,SAAC,GAAa,OAAA,SAAC,EAAsB,GA8J3C,IAAA,EAxJH,EALE,EAAQ,EAAG,cAA8B,QAAQ,OACjD,EAAQ,EAAG,cAAe,EAAG,cAA8B,QAAQ,kBACnE,GAAQ,EAAA,EAAA,eAAc,GACtB,EAAI,EAAA,EAAA,GAAO,EAAE,OAAO,EAAM,EAAM,YAAU,CAAE,SAAQ,IACpD,EAAM,EAAO,EAAO,EAAM,EAAS,IAErC,EAAY,EAAE,oBAAoB,EAAM,WAC5C,EAAY,EAAE,OAAO,EAAM,EAAK,GAChC,EAAY,EAAE,SAAS,GAAI,GAC1B,GAAD,EAA6B,EAAE,kBAAkB,IAAnC,GAAE,EAAS,EAAA,GACrB,IAAA,EAAQ,EAAO,EAAW,EAAe,EAAM,OAEnD,OADA,EAAQ,EAAE,SAAS,GAAI,GACvB,EAAA,EAAA,GAAW,GAAK,CAAE,UAAS,EAAE,MAAK,MAEpC,iBAAkB,SAAC,GAAa,OAAA,SAAC,EAAsB,GA+I9C,IAAA,EAxIH,EANE,EAAQ,EAAG,cAA8B,QAAQ,OAEjD,EADU,EAAG,cAAe,EAAG,cAA8B,QAAQ,oBACnD,OAAS,QAC3B,GAAQ,EAAA,EAAA,eAAc,GACtB,EAAI,EAAA,EAAA,GAAO,EAAE,OAAO,EAAM,EAAM,YAAU,CAAE,SAAQ,IACpD,EAAM,EAAO,EAAO,EAAM,EAAS,IAErC,EAAY,EAAE,oBAAoB,EAAM,WAC5C,EAAY,EAAE,OAAO,EAAM,EAAK,GAChC,EAAY,EAAE,SAAS,GAAI,GAC1B,GAAD,EAA6B,EAAE,kBAAkB,IAAnC,GAAE,EAAS,EAAA,GACrB,IAAA,EAAQ,EAAO,EAAW,EAAe,EAAM,OAEnD,OADA,EAAQ,EAAE,SAAS,GAAI,GACvB,EAAA,EAAA,GAAW,GAAK,CAAE,UAAS,EAAE,MAAK,MAEpC,qBAAsB,SAAC,GAAiE,OAAA,SAAC,EAAsB,GAIxG,IA2HE,IAAA,EA7HH,EADE,EAAQ,MAAM,QAAQ,GAAQ,EAAO,CAAC,GAExC,EAAY,EAAE,oBAAoB,EAAM,WACnC,EAAI,EAAG,EAAI,EAAM,OAAQ,IAAK,CAC/B,IAAA,EAAgB,EAAM,GAArB,EAAI,EAAA,KAAE,EAAK,EAAA,MACZ,EAAI,EAAA,EAAA,GAAO,EAAE,OAAO,EAAM,IAAU,CAAE,SAAQ,IAC9C,EAAM,EAAO,EAAO,EAAM,GAAS,EAAA,EAAA,eAAc,KACvD,EAAY,EAAE,OAAO,EAAM,EAAK,GAElC,EAAY,EAAE,SAAS,GAAI,GAC1B,GAAD,EAA6B,EAAE,kBAAkB,IAAnC,GAAE,EAAS,EAAA,GACrB,IAAA,EAAQ,EAAO,EAAW,EAAe,EAAM,OAEnD,OADA,EAAQ,EAAE,SAAS,GAAI,GACvB,EAAA,EAAA,GAAW,GAAK,CAAE,UAAS,EAAE,MAAK,MAEpC,SAAU,SAAC,GAA2C,OAAA,SAAC,EAAsB,GA+GpE,IAAA,EA5GH,EAFE,EAAU,kBAAmB,EAAO,EAAG,cAA8B,QAAQ,SAAW,EAAG,OAC3F,EAAW,kBAAmB,EAAM,KAAK,MAAO,EAAG,cAA8B,QAAQ,WAAa,QAAU,EAAG,QAErH,EAAY,EAAE,oBAAoB,EAAM,WAC5C,EAAY,EAAE,UAAU,SAAC,GAAY,EAAY,GAAS,EAAQ,cAAe,GAC3E,IAAA,EAAO,EAAQ,IAAW,EAAkB,GAC9C,IAAE,EAAM,MAAM,IAAI,MAAM,2CACxB,IAAE,MAAM,QAAQ,GAAU,MAAM,IAAI,MAAM,0CAC1C,GAAA,EAAQ,OAAS,GAAK,EAAK,OAAQ,MAAM,IAAI,MAAM,wCACjD,IAAA,EAAM,EAAK,MAAM,KAAI,EAAA,EAAA,GAAM,GAAO,GAAA,CAAE,IAAS,IACnD,EAAY,EAAE,UAAU,KAAM,KAAM,EAAE,QAAQ,GAAO,EAAM,GAC3D,EAAY,EAAE,SAAS,GAAI,GAC1B,GAAD,EAA6B,EAAE,kBAAkB,IAAnC,GAAE,EAAS,EAAA,GACrB,IAAA,EAAQ,EAAM,MAKlB,OAJM,EAAE,OAAO,EAAM,UAAW,KAC9B,EAAQ,EAAO,EAAW,EAAe,GACzC,EAAQ,EAAE,SAAS,GAAI,IAEzB,EAAA,EAAA,GAAW,GAAK,CAAE,UAAS,EAAE,MAAK,MAEpC,gBAAiB,SAAC,GAAsC,OAAA,SAAC,EAAsB,GACvE,IAAA,EAAQ,kBAAmB,EAAO,EAAG,cAA8B,QAAQ,OAAS,EAAG,KACvF,EAAU,kBAAmB,EAAM,KAAK,MAAO,EAAG,cAA8B,QAAQ,UAAY,QAAU,EAAG,OACjH,EAAQ,EAAE,SAAS,EAAM,EAAM,WACjC,IAAE,IAAW,EAAM,QAAS,MAAM,IAAI,MAAM,sDAMzC,OAHP,WAAW,WACT,EAAM,QAAQ,IACb,GACI,OAET,cAAe,SAAC,GAA+B,OAAA,SAAC,EAAsB,GA8E7D,IAAA,EA7EH,EACA,EAAY,EAAE,oBAAoB,EAAM,WAC5C,EAAY,EAAE,UAAU,SAAC,GAAY,EAAY,GAAS,EAAQ,cAAe,GAC3E,IAAA,EAAM,EAAQ,QAAQ,EAAQ,OAAQ,GAC5C,EAAY,EAAE,UAAU,KAAM,KAAM,EAAE,QAAQ,GAAO,EAAM,GAC3D,EAAY,EAAE,SAAS,GAAI,GAC1B,GAAD,EAA6B,EAAE,kBAAkB,IAAnC,GAAE,EAAS,EAAA,GACrB,IAAA,EAAQ,EAAM,MAQlB,OAPM,EAAE,OAAO,EAAM,UAAW,KAC9B,EAAQ,EAAO,EAAW,EAAe,GACzC,EAAQ,EAAE,SAAS,GAAI,IAEnB,EAAE,QAAQ,IACd,EAAQ,IAAI,GAEd,EAAA,EAAA,GAAW,GAAK,CAAE,UAAS,EAAE,MAAK,OAKlC,EAAY,EAAE,UAAU,EAAM,EAAU,GAAU,GACtD,EAAY,EAAE,SAAS,GAAI,GAC1B,GAAD,EAA6B,EAAE,kBAAkB,IAAnC,GAAE,EAAS,EAAA,GACrB,IAAA,EAAQ,EAAO,EAAW,EAAe,MAEvC,EAAuB,CAC3B,UAAS,EACT,MAHF,EAAQ,EAAE,SAAS,GAAI,GAIrB,eAAc,GAIT,MAAA,CACL,UAFc,EAAA,EAAA,KAAI,EAAO,EAD4B,SAAC,EAAO,GAAY,OAAA,EAAO,EAAM,QAC5C,GAExB,WA7MT,QAAA,MAAK,EA+NX,IAAM,EAAO,SAChB,GAyBS,IAAA,EAxBP,EAAI,EAAA,KACJ,EAAM,EAAA,OACN,EAAA,EAAA,OAAA,OAAM,IAAA,EAAG,KAAI,EACb,EAAA,EAAA,MAAA,OAAK,IAAA,EAAG,KAAI,EAGV,IAAQ,EAAS,SAAC,EAAO,EAAU,GAAe,OAAA,IAClD,IAIF,EAJE,EAAW,EAAE,SAAS,GAAS,EAAE,cAEjC,EAAW,EAAE,QAAQ,GAGvB,EAAY,EAAE,UAAU,EAAM,EAAU,GAAU,GACtD,EAAY,EAAE,SAAS,GAAI,GAC1B,GAAD,EAA6B,EAAE,kBAAkB,IAAnC,GACV,IAAA,EAAQ,EADI,EAAS,EAAA,GACK,EAAe,MAEtC,OADP,EAAQ,EAAE,SAAS,GAAI,IAlBZ,QAAA,KAAI,EA0BJ,QAAA,EAAI,EAAA;;ACsaJ,aAAA,IAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,EAAA,MAAA,KAAA,QAAA,SAAA,EAAA,GAAA,IAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,IAAA,EAAA,QAAA,GAAA,IAAA,EAAA,GAAA,EAAA,IAAA,GAAA,MAAA,GAAA,mBAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,EAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,EAAA,EAAA,OAAA,IAAA,EAAA,QAAA,EAAA,IAAA,GAAA,OAAA,UAAA,qBAAA,KAAA,EAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,EAAA,KAAA,OAAA,GAAA,EAAA,MAAA,KAAA,eAAA,SAAA,EAAA,EAAA,GAAA,GAAA,GAAA,IAAA,UAAA,OAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,KAAA,GAAA,KAAA,IAAA,IAAA,EAAA,MAAA,UAAA,MAAA,KAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,OAAA,EAAA,OAAA,GAAA,MAAA,UAAA,MAAA,KAAA,KAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,QAAA,UAAA,QAAA,cAAA,QAAA,eAAA,QAAA,aAAA,QAAA,WAAA,QAAA,SAAA,QAAA,aAAA,QAAA,UAAA,QAAA,aAAA,QAAA,WAAA,QAAA,UAAA,QAAA,iBAAA,QAAA,iBAAA,QAAA,aAAA,QAAA,UAAA,QAAA,YAAA,QAAA,WAAA,QAAA,YAAA,QAAA,QAAA,QAAA,iBAAA,QAAA,WAAA,QAAA,YAAA,QAAA,MAAA,QAAA,gBAAA,QAAA,iBAAA,QAAA,EAAA,QAAA,SAAA,EAxnCb,IAAA,EAAA,QAAA,eACA,EAAA,QAAA,eAAS,OAAA,eAAA,QAAA,MAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,OAAK,OAAA,eAAA,QAAA,IAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,KAAG,OAAA,eAAA,QAAA,mBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,oBAAkB,OAAA,eAAA,QAAA,kBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,mBAuCnC,IAAA,EAAA,QAAA,YAAQ,OAAA,eAAA,QAAA,QAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,SAMD,IAAM,EAAc,WACnB,IAAA,EAAS,SAAS,gBAClB,GAAK,EAAO,QAAQ,gBACrB,GAAK,EAAI,GACZ,EAAO,QAAQ,eAAiB,IAChC,EAAO,MAAM,SAAW,UAExB,EAAO,QAAQ,eAAiB,IAAM,EAAI,IAPjC,QAAA,YAAW,EAcjB,IAAM,EAAa,WAClB,IAAA,EAAS,SAAS,gBAClB,GAAK,EAAO,QAAQ,eACtB,GAAK,UACA,EAAO,QAAQ,eACtB,EAAO,MAAM,SAAW,MAExB,EAAO,QAAQ,eAAiB,IAAM,EAAI,IAPjC,QAAA,WAAU,EAchB,IAAM,EAAmB,SAAC,EAAY,EAAgB,GACrD,IAAA,EAAM,WAAW,WACrB,IACA,EAAK,SAAW,MACf,KACH,EAAK,SAAW,WACd,IACA,aAAa,KAPJ,QAAA,iBAAgB,EActB,IAAM,EAAU,SAAQ,EAAe,GAA6B,OAAA,SAAC,GACnE,OAAA,SAAC,EAAO,GAAa,OAAA,SAAC,EAAO,GAC5B,IAIA,EAAI,EAJG,SAAC,EAAO,GACb,IAAA,EAAI,EAAG,EAAH,CAAM,EAAO,GACf,MAAY,mBAAL,EAAmB,EAAE,EAAO,GAAW,GAE9C,CAAS,EAAO,GACpB,EAAiB,mBAAL,EAAmB,EAAE,EAAO,GAAW,EACrD,GAAA,EAAG,OAAO,EACH,EAAG,EAAH,CAAM,EAAO,GAChB,MAAY,mBAAL,EAAmB,EAAE,EAAO,GAAW,MAV7C,QAAA,QAAO,EAyFb,IAAM,EAAc,SAAwB,GAC1C,OAAA,SAAC,EAAO,GAAwB,OAAA,SAAC,EAAsB,GACrD,IAAA,EAAuB,EAAK,KAAnB,EAAU,EAAI,EAAxB,CAAA,SACA,EAAM,EAAA,IAAI,OAAO,EAAM,EAAM,OAC/B,IAAE,EAAK,OAAO,KACZ,IAAA,EAAY,EAAI,SAAsB,EAAI,UAAf,EAC3B,EAAK,EAAA,EAAA,GACN,GAAU,CACG,eAAA,EACW,0BAAA,QAC3B,QAAS,EAAQ,eACjB,OAAQ,EAAQ,cAChB,MAAO,EAAI,MACX,QAAO,EACP,QAAS,EAAI,MAAQ,EAAM,eAAe,EAAI,OAAO,QAAU,KAE1D,OAAA,EAAA,EAAC,WAAA,EAAA,EAAA,CAAC,EAAG,GAAU,GAAQ,OAhBrB,QAAA,YAAW,EA2CjB,IAAM,EAAa,SAAwB,GACzC,OAAA,SAAC,EAAO,GAAa,OAAA,SAAC,EAAO,GAC3B,IAAA,EAAuB,EAAK,KAAnB,EAAU,EAAI,EAAxB,CAAA,SACA,EAAM,EAAA,IAAI,OAAO,EAAM,EAAM,OAC/B,IAAE,EAAK,OAAO,KACZ,IAAA,EAAY,EAAI,SAAsB,EAAI,UAAf,EAC3B,EAAK,EAAA,EAAA,GACN,GAAU,CACG,eAAA,EACW,0BAAA,QAC3B,QAAS,EAAQ,cACjB,SAAU,EAAQ,eAClB,MAAO,EAAI,MACX,QAAO,EACP,QAAS,EAAI,MAAQ,EAAM,eAAe,EAAI,OAAO,QAAU,KAE1D,OAAA,EAAA,EAAC,WAAA,EAAA,EAAA,CAAC,EAAG,GAAU,GAAQ,OAhBrB,QAAA,WAAU,EA6ChB,IAAM,EAAc,SAAwB,GAC1C,OAAA,SAAC,EAAO,GAAa,OAAA,SAAC,EAAO,GAC3B,IAAA,EAAuB,EAAK,KAAnB,EAAU,EAAI,EAAxB,CAAA,SACA,EAAM,EAAA,IAAI,OAAO,EAAM,EAAM,OAC/B,IAAE,EAAK,OAAO,KACZ,IAAA,EAAY,EAAI,SAAsB,EAAI,UAAf,EAC3B,EAAK,EAAA,EAAA,GACN,GAAU,CACG,eAAA,EACW,0BAAA,QAC3B,SAAU,EAAQ,gBAClB,QAAO,EACP,QAAS,EAAI,MAAQ,EAAM,eAAe,EAAI,OAAO,QAAU,GAC/D,MAAO,EAAI,QAEN,OAAA,EAAA,EAAC,WAAA,EAAA,EAAA,CAAC,EAAG,GAAU,GAAQ,OAfrB,QAAA,YAAW,EA4CjB,IAAM,EAAY,SAAwB,GACxC,OAAA,SAAC,EAAO,GAAwB,OAAA,SAAC,EAAO,GACtC,IAAA,EAA8B,EAAK,KAA7B,EAAwB,EAAK,MAAnB,EAAU,EAAI,EAA/B,CAAA,OAAA,UACA,EAAM,EAAA,IAAI,OAAO,EAAM,EAAM,OAC/B,IAAE,EAAK,OAAO,KACZ,IAAA,EAAY,EAAI,SAAsB,EAAI,UAAf,EAC3B,EAAK,EAAA,EAAA,GACN,GAAU,CACG,eAAA,EACW,0BAAA,QAC3B,SAAU,EAAQ,cAClB,QAAS,GAAS,EAAI,MACtB,QAAO,EACP,QAAS,EAAI,MAAQ,EAAM,eAAe,EAAI,OAAO,QAAU,GAC/D,MAAK,IAEA,OAAA,EAAA,EAAC,WAAA,EAAA,EAAA,CAAC,EAAG,GAAU,GAAQ,OAhBrB,QAAA,UAAS,EA2Cf,IAAM,EAAe,SAAwB,GAC3C,OAAA,SAAC,EAAO,GAAwB,OAAA,SAAC,EAAO,GACtC,IAAA,EAAuB,EAAK,KAAnB,EAAU,EAAI,EAAxB,CAAA,SACA,EAAM,EAAA,IAAI,OAAO,EAAM,EAAM,OAC/B,IAAE,EAAK,OAAO,KACZ,IAAA,EAAY,EAAI,SAAsB,EAAI,UAAf,EAC3B,EAAK,EAAA,EAAA,GACN,GAAU,CACG,eAAA,EACa,4BAAA,UAC7B,SAAU,EAAQ,iBAClB,QAAS,EAAI,MACb,QAAO,EACP,QAAS,EAAI,MAAQ,EAAM,eAAe,EAAI,OAAO,QAAU,KAE1D,OAAA,EAAA,EAAC,WAAA,EAAA,EAAA,CAAC,EAAG,GAAU,GAAQ,OAfrB,QAAA,aAAY,EAuClB,IAAM,EAAmB,SAAwB,GAC/C,OAAA,SAAC,EAAO,GAAa,OAAA,SAAC,EAAO,GAC3B,IAAA,EAAkC,EAAK,OAA/B,EAA0B,EAAK,QAAnB,EAAU,EAAI,EAAnC,CAAA,SAAA,YACA,EAAK,EAAA,EAAA,GACN,GAAU,CACK,iBAAA,EACC,kBAAA,KAAK,eAA4B,IAAX,EAAyB,KAAO,GACzE,QAAS,EAAQ,WAEZ,OAAA,EAAA,EAAC,WAAA,EAAA,EAAA,CAAC,EAAG,GAAU,GAAQ,OATrB,QAAA,iBAAgB,EAiCtB,IAAM,EAAmB,SAAwB,GAC/C,OAAA,SAAC,EAAO,GAAa,OAAA,SAAC,EAAO,GAC3B,IAAA,EAA+B,EAAK,KAA9B,EAAyB,EAAK,OAAnB,EAAU,EAAI,EAAhC,CAAA,OAAA,WACA,EAAK,EAAA,EAAA,GACN,GAAU,CACG,eAAA,EACE,iBAAA,KAAK,eAA2B,IAAV,EAAwB,KAAO,GACvE,QAAS,EAAQ,kBAEZ,OAAA,EAAA,EAAC,WAAA,EAAA,EAAA,CAAC,EAAG,GAAU,GAAQ,OATrB,QAAA,iBAAgB,EAkCtB,IAAM,EAAY,SAAwB,GACxC,OAAA,SAAC,EAAO,GAAa,OAAA,SAAC,EAAO,GAC3B,IAAA,EAA6C,EAAK,KAA5C,EAAuC,EAAK,aAA5C,OAAY,IAAA,GAAQ,EAAK,EAAU,EAAI,EAA9C,CAAA,OAAA,iBACF,IAAE,EAAA,IAAI,KAAK,EAAM,EAAM,OAAQ,OAAO,KACpC,IAAA,EAAM,EAAA,IAAI,OAAO,EAAM,EAAM,OAC7B,EAAmB,EAAe,EAAA,IAAI,aAAa,EAAM,EAAM,OAAS,CAAC,QAAQ,EAAI,SAAW,EAAI,QAAS,MAAM,EAAI,OAAtH,EAAO,EAAA,QAAE,EAAK,EAAA,MACf,EAAK,EAAA,EAAA,GACN,GAAU,CACb,QAAO,EACP,QAAS,EAAQ,EAAM,eAAe,GAAO,QAAU,KAElD,OAAA,EAAA,EAAC,WAAA,EAAA,EAAA,CAAC,EAAG,GAAU,GAAQ,OAXrB,QAAA,UAAS,EAetB,IAAM,EAA6C,CACjD,KAAM,SAAC,IACL,EAAA,QAAA,eACA,EAAG,QAAQ,CACT,CAAC,QAAS,GACV,CAAC,QAAS,IACT,MAEL,MAAO,SAAC,IACN,EAAA,QAAA,eACA,EAAG,QAAQ,CACT,CAAC,UAAW,cACZ,CAAC,UAAW,gBAKZ,EAA6C,CACjD,KAAM,SAAC,EAAY,IACjB,EAAA,QAAA,cACM,IAAA,EAAO,EAAG,QAAQ,CACtB,CAAC,QAAS,GACV,CAAC,QAAS,IACT,MACH,EAAA,QAAA,kBAAiB,EAAI,EAAM,IAE7B,MAAO,SAAC,EAAY,IAClB,EAAA,QAAA,cACM,IAAA,EAAO,EAAG,QAAQ,CACtB,CAAC,UAAW,YACZ,CAAC,UAAW,eACX,MACH,EAAA,QAAA,kBAAiB,EAAI,EAAM,KAyBlB,EAAa,SAAC,EAA2B,GAAyB,OAAA,SAAwB,GAC9F,OAAA,SAAC,EAAO,GAAa,OAAA,SAAC,EAAO,GAC5B,IAAA,EAAa,EACb,EAAO,EAAW,KAClB,EAAO,EAAA,IAAI,UAAU,EAAM,EAAM,OACnC,GAAA,GAAyB,OAAT,EAAe,OAAO,KACpC,IAAA,EAAK,EAAA,EAAA,GACN,GAAU,CACb,KAAI,EACJ,SAAU,EAAe,GACzB,SAAU,EAAe,GACzB,MAAiB,OAAT,IAEH,OAAA,EAAA,EAAC,WAAA,EAAA,EAAA,CAAC,EAAG,GAAU,GAAQ,QAbrB,QAAA,WAAU,EAiBvB,IAAM,EAA+C,CACnD,KAAM,SAAC,GACL,EAAG,QAAQ,CACT,CAAC,QAAS,GACV,CAAC,QAAS,IACT,KACH,EAAG,kBAEL,KAAM,SAAC,GACL,EAAG,QAAQ,CACT,CAAC,UAAW,cACZ,CAAC,UAAW,aACX,KACH,EAAG,kBAEL,MAAO,SAAC,GACA,IAAA,EAAI,EAAG,wBACb,EAAG,QAAQ,CACT,CAAC,OAAO,EAAG,UAAW,GACtB,CAAC,OAAO,KAAO,UAAwB,IAAX,EAAE,OAAgB,GAAM,MACpD,CAAC,OAAO,EAAG,UAAU,SACpB,KACH,EAAG,mBAGD,EAA+C,CACnD,KAAM,SAAC,EAAI,GACH,IAAA,EAAO,EAAG,QAAQ,CACtB,CAAC,QAAS,GACV,CAAC,QAAS,IACT,MACH,EAAA,QAAA,kBAAiB,EAAI,EAAM,IAE7B,KAAM,SAAC,EAAI,GACH,IAAA,EAAO,EAAG,QAAQ,CACtB,CAAC,UAAW,YACZ,CAAC,UAAW,eACX,MACH,EAAA,QAAA,kBAAiB,EAAI,EAAM,IAE7B,MAAO,SAAC,EAAI,GACJ,IAAA,EAAI,EAAG,wBACP,EAAO,EAAG,QAAQ,CACtB,CAAC,UAAwB,IAAX,EAAE,OAAgB,GAAM,MACtC,CAAC,UAAW,IACX,MACH,EAAA,QAAA,kBAAiB,EAAI,EAAM,KA0BlB,EAAe,SAAC,EAAkC,GAAyB,OAAA,SAAwB,GACvG,OAAA,SAAC,EAAO,GAAa,OAAA,SAAC,EAAO,GAC3B,IAAA,EAA+B,EAAK,SAApC,OAAQ,IAAA,EAAG,EAAC,EAAK,EAAU,EAAI,EAAhC,CAAA,aACA,EAAO,EAAW,KAClB,EAAO,EAAA,IAAI,YAAY,EAAM,EAAM,OACrC,GAAA,GAAyB,OAAT,EAAe,OAAO,KACpC,IAAA,EAAK,EAAA,EAAA,GACN,GAAU,CACb,KAAO,SAAU,EAAQ,EAAM,eAAe,GAAQ,EACtD,MAAgB,OAAT,EACP,SAAU,EAAiB,GAC3B,SAAU,EAAiB,KAEzB,GAAA,EAAW,EAAG,CACZ,IAAA,EAAY,KACV,EAAW,EAAM,SACvB,EAAM,SAAW,SAAC,GAChB,EAAY,WAAW,WAAM,OAAA,EAAQ,SAAS,CAAC,OAAO,gBAAiB,QAAQ,CAAC,MAAS,GACrF,GAAU,EAAS,IAEnB,IAAA,EAAW,EAAM,SACvB,EAAM,SAAW,SAAC,EAAI,GAChB,GACF,aAAa,GAEX,GAAU,EAAS,EAAI,IAGxB,OAAA,EAAA,EAAC,WAAA,EAAA,EAAA,CAAC,EAAG,GAAU,GAAQ,QA5BrB,QAAA,aAAY,EAmDlB,IAAM,EAAY,SAAC,EAA2B,GAAyB,OAAA,SAAwB,GAC7F,OAAA,SAAC,EAAO,GAAa,OAAA,SAAC,EAAO,GAC5B,IAAA,EAAa,EACf,IAAE,EAAW,OAAS,EAAc,OAAO,KACzC,IAAA,EAAK,EAAA,EAAA,GACN,GAAU,CACb,SAAU,EAAe,GACzB,SAAU,EAAe,KAEpB,OAAA,EAAA,EAAC,WAAA,EAAA,EAAA,CAAC,EAAG,GAAU,GAAQ,QATrB,QAAA,UAAS,EAgCf,IAAM,EAAe,SAAC,GAAyB,OAAA,SAAwB,GACrE,OAAA,SAAC,EAAO,GAAa,OAAA,SAAC,EAAO,GAC5B,IAAA,EAAa,EACb,EAAO,EAAW,KAClB,EAAU,EAAA,IAAI,YAAY,EAAM,EAAM,OACxC,GAAY,OAAZ,GAAoB,EAAc,OAAO,KACvC,IAAA,EAAK,EAAA,EAAA,GACN,GAAU,CACb,MAAmB,OAAZ,EACP,QAAsB,OAAZ,OAAoB,EAAY,IAErC,OAAA,EAAA,EAAC,WAAA,EAAA,EAAA,CAAC,EAAG,GAAU,GAAQ,QAXrB,QAAA,aAAY,EAmClB,IAAM,EAAW,SAAC,GAAyB,OAAA,SAAwB,GACjE,OAAA,SAAC,EAAO,GAAa,OAAA,SAAC,EAAO,GAC5B,IAAA,EAAa,EACb,EAAQ,EAAW,MACnB,EAAO,EAAW,KAElB,EAAS,GADC,EAAA,IAAI,QAAQ,EAAM,EAAM,OAEpC,IAAE,GAAS,EAAc,OAAO,KAC9B,IAAA,EAAK,EAAA,EAAA,GACN,GAAU,CACb,MAAK,IAEA,OAAA,EAAA,EAAC,WAAA,EAAA,EAAA,CAAC,EAAG,GAAU,GAAQ,QAZrB,QAAA,SAAQ,EAgBrB,IAAM,EAA+C,CACnD,KAAM,SAAC,GACL,EAAG,QAAQ,CACT,CAAC,QAAS,GACV,CAAC,QAAS,IACT,KACH,EAAG,kBAEL,MAAO,SAAC,GACA,IAAA,EAAI,EAAG,wBACb,EAAG,QAAQ,CACT,CAAC,OAAO,EAAG,UAAW,GACtB,CAAC,OAAO,KAAO,UAAwB,IAAX,EAAE,OAAgB,GAAM,MACpD,CAAC,OAAO,EAAG,UAAU,SACpB,KACH,EAAG,mBAGD,EAA+C,CACnD,KAAM,SAAC,EAAI,GACH,IAAA,EAAO,EAAG,QAAQ,CACtB,CAAC,QAAS,GACV,CAAC,QAAS,IACT,MACH,EAAA,QAAA,kBAAiB,EAAI,EAAM,IAE7B,MAAO,SAAC,EAAI,GACJ,IAAA,EAAI,EAAG,wBACP,EAAO,EAAG,QAAQ,CACtB,CAAC,UAAwB,IAAX,EAAE,OAAgB,GAAM,MACtC,CAAC,UAAW,IACX,MACH,EAAA,QAAA,kBAAiB,EAAI,EAAM,KAsBlB,EAAa,SAAC,GAAyB,OAAA,SAAwB,GACnE,OAAA,SAAC,EAAO,GAAa,OAAA,SAAC,EAAO,GAC5B,IAAA,EAAa,EACb,EAAO,EAAW,KAClB,EAAQ,EAAA,IAAI,UAAU,EAAM,EAAM,OACpC,IAAE,GAAS,EAAc,OAAO,KAC9B,IAAA,EAAK,EAAA,EAAA,GACN,GAAU,CACb,MAAK,IAEA,OAAA,EAAA,EAAC,WAAA,EAAA,EAAA,CAAC,EAAG,GAAU,GAAQ,QAVrB,QAAA,WAAU,EA8BhB,IAAM,EAAe,SAAC,GAA8B,OAAA,SAAwB,GAC1E,OAAA,SAAC,EAAO,GAAa,OAAA,SAAC,EAAO,GAC5B,IACA,EAAK,EAAA,EAAA,GADQ,GAEJ,CACb,SAAU,EAAiB,GAC3B,SAAU,EAAiB,KAEtB,OAAA,EAAA,EAAC,WAAA,EAAA,EAAA,CAAC,EAAG,GAAU,GAAQ,QARrB,QAAA,aAAY,EAYzB,IAAM,EAAc,SAAC,EAAe,EAAc,EAAoB,GAE/D,IADC,IAAA,EAAK,GACF,EAAI,EAAS,EAAO,GAAK,EAAS,EAAO,IAC5C,EAAI,GACJ,EAAI,GACR,EAAG,KAAK,GAEH,OAAA,GA6BI,EAAiB,SAAwB,GAC7C,OAAA,SAAC,EAAO,GAAa,OAAA,SAAC,EAAO,GAC3B,IAAA,EAAsF,EAAK,SAAjF,EAA4E,EAAK,MAAjF,OAAK,IAAA,EAAG,EAAC,EAAE,EAAiE,EAAK,aAAtE,OAAY,IAAA,EAAG,OAAM,EAAE,EAA0C,EAAK,cAA/C,OAAa,IAAA,EAAG,QAAO,EAAK,EAAU,EAAI,EAAvF,CAAA,WAAA,QAAA,eAAA,kBACA,EAAQ,EAAA,IAAI,QAAQ,EAAW,SAAU,EAAM,OAC/C,GAAc,EAAA,IAAI,QAAQ,EAAW,cAAe,EAAM,OAC1D,EAAO,EAAM,GACf,GAAA,EAAa,EAAG,CACZ,IACA,EAAO,KAAK,KAAK,EAAa,EAAM,IACpC,EAAW,EAAY,EAAM,EAFrB,EAEmC,GAC3C,EAAK,EAAA,EAAA,GACN,GAAU,CACb,SAAQ,EACR,QAAS,EACT,KAPY,EAOE,EAAO,EAAO,EAAI,KAChC,KAAM,EAAO,EAAO,EAAO,EAAI,KAC/B,MATY,EASG,EAAO,EATV,EAS0B,KACtC,KAAM,EAAO,EAAQ,EAAO,EAAO,KACnC,SAAQ,IAEH,OAAA,EAAA,EAAC,WAAA,EAAA,EAAA,CAAC,EAAG,GAAU,GAAQ,IAExB,EAAK,EAAA,EAAA,GACN,GAAU,CACb,SAAQ,EACR,QAAS,KACT,KAAM,KACN,KAAM,KACN,MAAO,KACP,KAAM,KACN,SAAU,KAEL,OAAA,EAAA,EAAC,WAAA,EAAA,EAAA,CAAC,EAAG,GAAU,GAAQ,OAhCvB,QAAA,eAAc,EAqC3B,IAAM,EAAuB,SAAC,EAAa,EAAmF,EAAqB,EAAkB,GAC/J,IAAA,EAAW,KACR,MAAA,CACL,SAAU,SAAC,GACH,IAAA,EAAG,EAAA,EAAA,GACJ,GAAM,CACT,YAAa,GAAgB,OAO3B,IAJJ,EAAW,UAAU,EAAI,IAChB,OAAO,SAAS,KAAK,SAAC,EAAe,GAC5C,EAAS,CAAC,KAAI,EAAE,MAAM,MAEpB,EAAW,CACP,IAAA,EAAU,SAAS,eAAe,GACpC,IACF,EAAQ,QAAU,EAAS,SAIjC,UAAW,SAAC,GACN,IACF,EAAS,UACT,EAAW,SA4BN,EAAgB,SAAwB,GAC5C,OAAA,SAAC,EAAO,GAAa,OAAA,SAAC,EAAO,GAC3B,IAAA,EAAsD,EAAK,KAArD,EAAgD,EAAK,UAArD,OAAS,IAAA,EAAG,KAAI,EAAE,EAA8B,EAAK,OAAnC,OAAM,IAAA,EAAG,GAAE,EAAK,EAAU,EAAI,EAAvD,CAAA,OAAA,YAAA,WACA,EAAM,EAAA,IAAI,OAAO,EAAM,EAAM,OAC/B,IAAE,EAAK,OAAO,KACZ,IAAA,EAAwB,EAAqB,EAAM,EAAQ,qBAAsB,EAAI,MAAO,EAAW,GAAtG,EAAQ,EAAA,SAAE,EAAS,EAAA,UACpB,EAAY,EAAI,SAAsB,EAAI,UAAf,EAC3B,EAAK,EAAA,EAAA,GACN,GAAU,CACb,QAAO,EACP,QAAS,EAAI,MAAQ,EAAM,eAAe,EAAI,OAAO,QAAU,GAC/D,SAAQ,EACR,UAAS,IAEJ,OAAA,EAAA,EAAC,WAAA,EAAA,EAAA,CAAC,EAAG,GAAU,GAAQ,OAdrB,QAAA,cAAa,EAkB1B,IAAM,EAAmB,SAAC,EAAa,EAAmF,EAAqB,EAAkB,GAC3J,IAAA,EAAW,KACR,MAAA,CACL,SAAU,SAAC,GACH,IAAA,EAAI,EAAA,EAAA,GACL,GAAO,CACV,aAAa,EACb,QAAS,GAAgB,KACzB,GAAE,IAWA,IARJ,EAAW,MAAM,OAAO,IACf,GAAG,QAAS,WACnB,EAAS,CAAC,KAAI,EAAE,MAAM,OACrB,GAAG,OAAQ,SAAC,GACP,IAAA,EAAQ,EAAQ,EAAM,SAAS,WAAa,KAClD,EAAS,OACT,EAAS,CAAC,KAAI,EAAE,MAAK,MAEnB,EAAW,CACP,IAAA,EAAU,SAAS,eAAe,GACpC,IACF,EAAQ,QAAU,SAAC,GACjB,EAAS,SAAS,UAK1B,UAAW,SAAC,GACN,IACF,EAAS,UACT,EAAW,SA6BN,EAAY,SAAwB,GACxC,OAAA,SAAC,EAAO,GAAa,OAAA,SAAC,EAAO,GAC3B,IAAA,EAAuD,EAAK,KAAtD,EAAiD,EAAK,UAAtD,OAAS,IAAA,EAAG,KAAI,EAAE,EAA+B,EAAK,QAApC,OAAO,IAAA,EAAG,GAAE,EAAK,EAAU,EAAI,EAAxD,CAAA,OAAA,YAAA,YACA,EAAM,EAAA,IAAI,OAAO,EAAM,EAAM,OAC/B,IAAE,EAAK,OAAO,KACZ,IAAA,EAAwB,EAAiB,EAAM,EAAQ,qBAAsB,EAAI,MAAO,EAAW,GAAlG,EAAQ,EAAA,SAAE,EAAS,EAAA,UACpB,EAAY,EAAI,SAAsB,EAAI,UAAf,EAC3B,EAAK,EAAA,EAAA,GACN,GAAU,CACb,MAAO,EAAI,MACX,QAAO,EACP,QAAS,EAAI,MAAQ,EAAM,eAAe,EAAI,OAAO,QAAU,GAC/D,SAAQ,EACR,UAAS,IAEJ,OAAA,EAAA,EAAC,WAAA,EAAA,EAAA,CAAC,EAAG,GAAU,GAAQ,OAfrB,QAAA,UAAS,EA0BtB,IAAM,EAAsB,SAAC,EAAa,EAAwD,EAAiD,GAC7I,IAAA,EAAW,KACX,EAAS,KACT,EAAQ,KACN,EAAgB,EAAA,EAAA,GACjB,GAAO,CACV,QAAS,SAAC,GACF,IAAA,EAAW,EAAG,KAAK,QAAQ,OACjC,EAAS,EAAG,KAAK,mBACjB,EAAQ,CACN,OAAQ,UACR,QAAS,CAAC,EAAM,EAAW,IAAM,EAAG,SAAU,MAGlD,MAAO,SAAC,GACN,WAAW,WACT,EAAG,KAAK,aAAa,EAAG,KAAM,GAC9B,EAAS,MACR,GACG,IAAA,EAAS,EAAG,GAAG,QAAQ,OAC7B,EAAM,CACJ,KAAI,EACJ,OAAQ,CACN,KAAM,EAAS,IAAM,EAAG,eAKzB,MAAA,CACL,SAAU,SAAC,GAET,EAAW,SAAS,OAAO,EAAI,GAC/B,EAAQ,EAAS,OAAO,SAAS,MAEnC,UAAW,WACL,IACF,EAAS,UACT,EAAW,SA8BN,EAAe,SAAwB,GAC3C,OAAA,SAAC,EAAO,GAAa,OAAA,SAAC,EAAO,GAC3B,IAAA,EAA2C,EAAK,KAA1C,EAAqC,EAAK,KAApC,EAA+B,EAAK,QAApC,OAAO,IAAA,EAAG,GAAE,EAAK,EAAU,EAAI,EAA5C,CAAA,OAAA,OAAA,YACA,EAAQ,EAAA,IAAI,SAAS,EAAM,EAAM,OACjC,IAAW,EACX,EAAwB,EAAoB,EAAM,EAAQ,SAAU,EAAQ,gBAAiB,GAA5F,EAAQ,EAAA,SAAE,EAAS,EAAA,UACpB,EAAK,EAAA,EAAA,GACN,GAAU,CACG,eAAA,EAChB,OAAM,EACN,SAAU,EAAQ,EAAM,SAAW,GACnC,MAAO,EAAQ,EAAM,MAAQ,GAC7B,SAAQ,EACR,UAAS,IAEJ,OAAA,EAAA,EAAC,WAAA,EAAA,EAAA,CAAC,EAAG,GAAU,GAAQ,OAfrB,QAAA,aAAY;;ACnlCZ,aAAA,IAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,wBAAA,EAhCb,IAAA,EAAA,QAAA,WAUM,EAAkB,SAAC,GACjB,IAAA,EAAU,EAAS,OAAS,IAAM,EAAS,WAC3C,EAAQ,IAAI,MAAM,GAEjB,OADP,EAAM,KAAO,QAAU,EAAS,OACzB,GAkBI,EAAqB,SAAC,EAAgB,QAAA,IAAA,IAAA,EAAA,IAC3C,IAAA,EAAI,EAAA,CACR,WAAY,KACZ,qBAAqB,EACrB,iBAAkB,gBAClB,iBAAkB,GAClB,cAAe,GACf,iBAAkB,GAClB,iBAAkB,IACf,GAEE,MAAA,CACL,OAAQ,SAAC,GACD,IAAA,EAAY,EAAA,EAAA,CAChB,OAAQ,MACR,KAAM,QACH,EAAK,kBAAgB,CACxB,QAAO,EAAA,CACW,eAAA,oBACZ,EAAK,iBAAiB,SAAW,MAGnC,EAAK,IAAI,iBAAgB,EAAA,EAAA,gBAAe,EAAO,EAAK,sBACpD,EAAM,EAAU,IAAM,EAAG,WACxB,OAAA,MAAM,EAAK,GACjB,KAAK,SAA0B,GAC1B,IAAE,EAAS,GAAI,MAAM,EAAgB,GAClC,OAAA,EAAS,OACf,KAAK,SAAC,GAEE,MAAA,CAAC,SAAQ,EAAE,YADG,EAAS,QAAQ,IAAI,EAAK,wBAKrD,IAAK,SAAC,GACE,IAAA,EAAY,EAAA,EAAA,CAChB,OAAQ,OACR,KAAM,QACH,EAAK,eAAa,CACrB,QAAO,EAAA,CACW,eAAA,oBACZ,EAAK,cAAc,SAAW,IAEpC,KAAM,KAAK,UAAU,KAGhB,OAAA,MADK,EACM,GACjB,KAAK,SAAyB,GACzB,IAAE,EAAS,GAAI,MAAM,EAAgB,GAClC,OAAA,EAAS,UAGpB,QAAS,SAAC,GACF,IAAA,EAAY,EAAA,EAAA,CAChB,OAAQ,MACR,KAAM,QACH,EAAK,kBAAgB,CACxB,QAAO,EAAA,CACW,eAAA,oBACZ,EAAK,iBAAiB,SAAW,IAEvC,KAAM,KAAK,UAAU,KAEjB,EAAM,EAAU,IAAM,EAAO,EAAK,YACjC,OAAA,MAAM,EAAK,GACjB,KAAK,SAAyB,GACzB,IAAE,EAAS,GAAI,MAAM,EAAgB,GAClC,OAAA,EAAS,UAGpB,OAAQ,SAAC,GACD,IAAA,EAAY,EAAA,EAAA,CAChB,OAAQ,SACR,KAAM,QACH,EAAK,kBAAgB,CACxB,QAAO,EAAA,CACW,eAAA,oBACZ,EAAK,iBAAiB,SAAW,MAGnC,EAAM,EAAU,IAAM,EAAO,EAAK,YACjC,OAAA,MAAM,EAAK,GACjB,KAAK,SAAyB,GACzB,IAAE,EAAS,GAAI,MAAM,EAAgB,QAnFpC,QAAA,mBAAkB;;ACtC/B,aAuhBa,IAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,kBAAA,QAAA,SAAA,QAAA,WAAA,QAAA,YAAA,QAAA,WAAA,QAAA,WAAA,QAAA,SAAA,QAAA,MAAA,QAAA,OAAA,QAAA,sBAAA,QAAA,YAAA,QAAA,UAAA,QAAA,WAAA,QAAA,YAAA,QAAA,WAAA,QAAA,WAAA,QAAA,cAAA,EAphBb,IAAA,EAAA,QAAA,eAuBa,EAAW,SAAC,EAAiB,EAAiB,GACnD,IAAA,EAAO,CACX,OAAQ,UACR,KAAM,EAAA,IAAI,QAAQ,EAAU,IAEvB,OAAA,EAAA,IAAI,IAAI,EAAU,EAAM,IALpB,QAAA,SAAQ,EAYd,IAAM,EAAa,SAAC,EAAW,EAAiB,GAC/C,IAAA,EAAO,CACX,OAAQ,MACR,KAAI,GAEC,OAAA,EAAA,IAAI,IAAI,EAAU,EAAM,IALpB,QAAA,WAAU,EAsBhB,IAAM,EAAa,SAAC,GAA0B,OAAA,SAAC,EAAiB,EAAiB,EAA2B,GAC3G,IAAA,EAAiB,EAAA,IAAI,WAAW,GAA/B,EAAK,EAAA,MAAE,EAAK,EAAA,MACb,EAAI,EAAA,CACR,cAAe,KACf,YAAa,UACb,YAAa,UACb,YAAa,WACV,GAEC,EAAa,EAAW,UACxB,EAAW,EAAW,QACtB,EAAY,EAAW,SACvB,EAAY,EAAW,SACvB,EAAiB,EAAW,cAI9B,GAHJ,EAAQ,EAAA,IAAI,SAAS,EAAU,GAC/B,EAAQ,EAAA,IAAI,SAAS,EAAU,GACb,EAAA,IAAI,sBAAsB,EAAU,GAQ7C,OANH,EAAK,eACP,OAAO,WAAW,WACV,IAAA,EAAW,SAAS,cAAc,EAAK,eACzC,GAAU,EAAS,kBACtB,KAEE,EAEP,EAAQ,EAAA,IAAI,aAAa,EAAK,YAAa,KAAM,GAC3C,IAAA,EAAO,EAAA,IAAI,QAAQ,EAAU,GAC7B,EAAU,EAAA,IAAI,QAAQ,EAAY,GACjC,OAAA,EAAM,EAAW,GAAQ,GAAO,GACtC,KAAK,EAAM,SAAC,EAAO,GACZ,IAAA,EAAQ,EAAA,IAAI,QAAQ,EAAW,GAC9B,OAAA,EAAM,EAAW,OAAO,GAAQ,MAExC,KAAK,EAAM,SAAC,EAAwB,GAAvB,IAAA,EAAQ,EAAA,SAAE,EAAU,EAAA,WAKzB,OAJP,EAAQ,EAAA,IAAI,QAAQ,EAAW,EAAU,GACzC,EAAQ,EAAA,IAAI,QAAQ,EAAU,KAAM,GACpC,EAAQ,EAAA,IAAI,QAAQ,EAAgB,EAAY,GAChD,EAAQ,EAAA,IAAI,cAAc,EAAK,YAAa,GACrC,EAAM,EAAA,IAAI,MAAM,IAAK,OAE7B,KAAK,EAAM,SAAC,EAAS,GACb,OAAA,EAAA,IAAI,aAAa,EAAK,YAAa,GAAI,MAE/C,MAAM,EAAM,SAAC,EAAO,GACnB,EAAQ,EAAA,IAAI,cAAc,EAAK,YAAa,GAC5C,QAAQ,MAAM,mBAAoB,GAC5B,IAAA,EAAkB,CAAC,KAAK,EAAM,KAAM,OAAO,EAAM,SAChD,OAAA,EAAA,IAAI,aAAa,EAAK,YAAa,EAAS,QAhD5C,QAAA,WAAU,EAyDhB,IAAM,EAAc,SAAC,EAAiB,GAEpC,OADP,EAAQ,EAAA,IAAI,QAAQ,EAAU,KAAM,IADzB,QAAA,YAAW,EAmBjB,IAAM,EAAa,SAAC,GAA0B,OAAA,SAAC,EAAiB,EAAiB,EAA2B,GAC3G,IAAA,EAAiB,EAAA,IAAI,WAAW,GAA/B,EAAK,EAAA,MAAE,EAAK,EAAA,MACb,EAAI,EAAA,CACR,YAAa,UACb,YAAa,UACb,YAAa,UACb,YAAa,WACV,GAEC,EAAY,EAAW,SACvB,EAAY,EAAW,SACvB,EAAiB,EAAW,cAC3B,OAAA,EAAM,EAAA,IAAI,WAAW,EAAK,YAAa,GAAI,IACjD,KAAK,EAAM,SAAC,EAAI,GACT,IAAA,EAAO,EAAA,IAAI,QAAQ,EAAU,GAE/B,OADJ,EAAQ,EAAA,IAAI,YAAY,EAAK,YAAa,GACpC,GACN,EAAQ,EAAA,IAAI,aAAa,EAAK,YAAa,KAAM,GAC1C,EAAM,EAAW,OAAO,GAAO,GACrC,KAAK,EAAM,SAAC,EAAS,GACd,IAAA,EAAQ,EAAA,IAAI,QAAQ,EAAW,GAC9B,OAAA,EAAM,EAAW,OAAO,GAAQ,MAExC,KAAK,EAAM,SAAC,EAAwB,GAAvB,IAAA,EAAQ,EAAA,SAAE,EAAU,EAAA,WAIzB,OAHP,EAAQ,EAAA,IAAI,cAAc,EAAK,YAAa,GAC5C,EAAQ,EAAA,IAAI,QAAQ,EAAW,EAAU,GACzC,EAAQ,EAAA,IAAI,QAAQ,EAAgB,EAAY,GACzC,EAAM,EAAA,IAAI,MAAM,IAAK,OAE7B,KAAK,EAAM,SAAC,EAAS,GACb,OAAA,EAAA,IAAI,aAAa,EAAK,YAAa,GAAI,MAE/C,MAAM,EAAM,SAAC,EAAO,GACnB,EAAQ,EAAA,IAAI,cAAc,EAAK,YAAa,GAC5C,QAAQ,MAAM,kBAAmB,GAC3B,IAAA,EAAkB,CAAC,KAAK,EAAM,KAAM,OAAO,EAAM,SAChD,OAAA,EAAA,IAAI,aAAa,EAAK,YAAa,EAAS,OApBpC,OAhBR,QAAA,WAAU,EAuDhB,IAAM,EAAY,SAAC,GAA0B,OAAA,SAAC,EAAiB,EAA0B,GACxF,IAAA,EAAiB,EAAA,IAAI,WAAW,GAA/B,EAAK,EAAA,MAAE,EAAK,EAAA,MACb,EAAI,EAAA,CACR,YAAa,UACb,YAAa,UACb,KAAM,KACN,aAAc,MACX,GAEC,EAAY,EAAW,SACvB,EAAY,EAAW,SACvB,EAAiB,EAAW,cAClC,EAAQ,EAAA,IAAI,aAAa,EAAK,YAAa,KAAM,GAC3C,IAAA,EAAQ,EAAA,IAAI,QAAQ,EAAW,GAI9B,OAHW,OAAd,EAAK,MAAiB,EAAK,eAC7B,EAAM,EAAK,cAAgB,EAAK,MAE3B,EAAM,EAAW,OAAO,GAAQ,GACtC,KAAK,EAAM,SAAC,EAAwB,GAAvB,IAAA,EAAQ,EAAA,SAAE,EAAU,EAAA,WAOzB,OANP,EAAQ,EAAA,IAAI,cAAc,EAAK,YAAa,GAC1B,OAAd,EAAK,MAAiB,EAAK,eAC7B,EAAQ,EAAA,IAAI,QAAQ,EAAY,IAAM,EAAK,aAAc,EAAK,KAAM,IAEtE,EAAQ,EAAA,IAAI,QAAQ,EAAW,EAAU,GACzC,EAAQ,EAAA,IAAI,QAAQ,EAAgB,EAAY,MAGjD,MAAM,EAAM,SAAC,EAAO,GACnB,EAAQ,EAAA,IAAI,cAAc,EAAK,YAAa,GAC5C,QAAQ,MAAM,iBAAkB,GAC1B,IAAA,EAAkB,CAAC,KAAK,EAAM,KAAM,OAAO,EAAM,SAChD,OAAA,EAAA,IAAI,aAAa,EAAK,YAAa,EAAS,QA/B1C,QAAA,UAAS,EAgDf,IAAM,EAAc,SAAC,GAA0B,OAAA,SAAC,EAAiB,EAAiB,EAA4B,GAC/G,IAAA,EAAgB,KAQhB,GAPA,kBAAmB,IACrB,EAAgB,EAAQ,qBACjB,EAAQ,eAEjB,EAAQ,EAAA,IAAI,SAAS,EAAU,GAC/B,EAAQ,EAAA,IAAI,SAAS,EAAU,GACb,EAAA,IAAI,sBAAsB,EAAU,GAQ7C,OANH,GACF,OAAO,WAAW,WACV,IAAA,EAAW,SAAS,cAAc,GACpC,GAAU,EAAS,kBACtB,KAEE,EAGH,IAAA,EAAiB,EAAA,IAAI,WAAW,GAA/B,EAAK,EAAA,MAAE,EAAK,EAAA,MACb,EAAI,EAAA,CACR,YAAa,UACb,YAAa,WACV,GAEC,EAAY,EAAW,SACvB,EAAY,EAAW,SACvB,EAAiB,EAAW,cAClC,EAAQ,EAAA,IAAI,aAAa,EAAK,YAAa,KAAM,GAC3C,IAAA,EAAQ,EAAA,IAAI,QAAQ,EAAU,GAC7B,OAAA,EAAM,EAAW,OAAO,GAAQ,GACtC,KAAK,EAAM,SAAC,EAAwB,GAAvB,IAAA,EAAQ,EAAA,SAAE,EAAU,EAAA,WAKzB,OAJP,EAAQ,EAAA,IAAI,cAAc,EAAK,YAAa,GAC5C,EAAQ,EAAA,IAAI,QAAQ,EAAW,EAAO,GACtC,EAAQ,EAAA,IAAI,QAAQ,EAAW,EAAU,GACzC,EAAQ,EAAA,IAAI,QAAQ,EAAgB,EAAY,MAGjD,MAAM,EAAM,SAAC,EAAO,GACnB,EAAQ,EAAA,IAAI,cAAc,EAAK,YAAa,GAC5C,QAAQ,MAAM,gBAAiB,GACzB,IAAA,EAAkB,CAAC,KAAK,EAAM,KAAM,OAAO,EAAM,SAChD,OAAA,EAAA,IAAI,aAAa,EAAK,YAAa,EAAS,QA1C1C,QAAA,YAAW,EAkDjB,IAAM,EAAwB,SAAC,GAC7B,MAAA,CACL,SAAQ,QAAA,SACR,WAAU,QAAA,WACV,YAAY,EAAA,QAAA,YAAW,GACvB,YAAW,QAAA,YACX,YAAY,EAAA,QAAA,YAAW,GACvB,WAAW,EAAA,QAAA,WAAU,GACrB,aAAa,EAAA,QAAA,aAAY,KARhB,QAAA,sBAAqB,EA2B3B,IAAM,EAAS,SAAC,GAA0B,OAAA,SAAC,EAAwB,EAAuB,GACzF,IAAA,EAAiB,EAAA,IAAI,WAAW,GAA/B,EAAK,EAAA,MAAE,EAAK,EAAA,MACb,EAAI,EAAA,CACR,KAAM,GACN,cAAe,KACf,YAAa,UACb,YAAa,UACb,YAAa,WACV,GAKD,GAHJ,EAAQ,EAAA,IAAI,SAAS,EAAK,KAAM,GAChC,EAAQ,EAAA,IAAI,SAAS,EAAK,KAAM,GACd,EAAA,IAAI,sBAAsB,EAAK,KAAM,GAQ9C,OANH,EAAK,eACP,OAAO,WAAW,WACV,IAAA,EAAW,SAAS,cAAc,EAAK,eACzC,GAAU,EAAS,kBACtB,KAEE,EAED,IAAA,EAAO,EAAA,IAAI,QAAQ,EAAK,KAAM,GAE7B,OADP,EAAQ,EAAA,IAAI,aAAa,EAAK,YAAa,KAAM,GAC1C,EAAM,EAAW,GAAQ,GAAO,GACtC,KAAK,EAAM,SAAC,EAAM,GAEV,OADP,EAAQ,EAAA,IAAI,cAAc,EAAK,YAAa,GACrC,EAAM,EAAA,IAAI,MAAM,IAAK,IAC3B,KAAK,EAAM,SAAC,EAAS,GACb,OAAA,EAAA,IAAI,aAAa,EAAK,YAAa,CAAC,KAAI,GAAG,SAGrD,MAAM,EAAM,SAAC,EAAO,GACnB,EAAQ,EAAA,IAAI,cAAc,EAAK,YAAa,GAC5C,QAAQ,MAAM,iBAAkB,GAC1B,IAAA,EAAkB,CAAC,KAAK,EAAM,KAAM,OAAO,EAAM,SAChD,OAAA,EAAA,IAAI,aAAa,EAAK,YAAa,EAAS,QApC5C,QAAA,OAAM,EAoDZ,IAAM,EAAQ,SAAC,EAAW,EAAsB,GAC/C,IAAA,EAAiB,EAAA,IAAI,WAAW,GAA/B,EAAK,EAAA,MAAE,EAAK,EAAA,MACb,EAAI,EAAA,CACR,YAAa,WACV,GAEE,OAAA,EAAM,EAAA,IAAI,WAAW,EAAK,YAAa,GAAI,IACjD,KAAK,EAAM,SAAC,EAAI,GAEX,OADJ,EAAQ,EAAA,IAAI,YAAY,EAAK,YAAa,GACtC,EACK,EAAA,IAAI,QAAQ,GAAI,EAAM,GAEtB,MAZA,QAAA,MAAK,EAqBX,IAAM,EAAW,SAAC,EAAiB,EAAiB,GACnD,IAAA,EAAO,CACX,OAAQ,UACR,OAAQ,EACR,KAAM,EAAA,IAAI,QAAQ,EAAU,IAGvB,OADP,EAAQ,EAAA,IAAI,QAAQ,EAAU,EAAM,IANzB,QAAA,SAAQ,EAcd,IAAM,EAAa,SAAC,EAAkB,EAAW,EAAiB,GACjE,IAAA,EAAO,CACX,OAAQ,MACR,OAAQ,EACR,KAAI,GAGC,OADP,EAAQ,EAAA,IAAI,QAAQ,EAAU,EAAM,IANzB,QAAA,WAAU,EAsBhB,IAAM,EAAa,SAAC,EAAiB,EAAmB,EAA2B,GAClF,IAAA,EAAI,EAAA,CACR,cAAe,KACf,WAAY,MACT,GAEC,EAAa,EAAW,UACxB,EAAa,EAAW,UACxB,EAAW,EAAW,QAIxB,GAHJ,EAAQ,EAAA,IAAI,SAAS,EAAU,GAC/B,EAAQ,EAAA,IAAI,SAAS,EAAU,GACb,EAAA,IAAI,sBAAsB,EAAU,GAQ7C,OANH,EAAK,eACP,OAAO,WAAW,WACV,IAAA,EAAW,SAAS,cAAc,EAAK,eACzC,GAAU,EAAS,kBACtB,KAEE,EAED,IAAA,EAAS,EAAA,IAAI,QAAQ,EAAY,GACjC,EAAO,EAAA,IAAI,QAAQ,EAAY,GAC/B,EAAO,EAAA,IAAI,QAAQ,EAAU,GAC/B,GAAU,OAAV,EAAiB,CACf,GAAA,EAAK,YAAc,EAAY,CAC3B,IAAA,EAAS,EAAA,IAAI,QAAQ,EAAY,GACvC,EAAQ,EAAA,IAAI,QAAQ,EAAY,EAAS,EAAG,GAC5C,EAAK,EAAK,YAAc,EAE1B,EAAQ,EAAA,IAAI,IAAI,EAAM,EAAM,QAE5B,EAAQ,EAAA,IAAI,QAAQ,EAAM,EAAM,GAG3B,OADP,EAAQ,EAAA,IAAI,QAAQ,EAAU,KAAM,IAlC3B,QAAA,WAAU,EA2ChB,IAAM,EAAc,SAAC,EAAiB,GAEpC,OADP,EAAQ,EAAA,IAAI,QAAQ,EAAU,KAAM,IADzB,QAAA,YAAW,EAgBjB,IAAM,EAAa,SAAC,EAAiB,EAA2B,GAC/D,IAAA,EAAiB,EAAA,IAAI,WAAW,GAA/B,EAAK,EAAA,MAAE,EAAK,EAAA,MACb,EAAI,EAAA,CACR,YAAa,WACV,GAEE,OAAA,EAAM,EAAA,IAAI,WAAW,EAAK,YAAa,GAAI,IACjD,KAAK,EAAM,SAAC,EAAI,GAEX,OADJ,EAAQ,EAAA,IAAI,YAAY,EAAK,YAAa,GACtC,EACF,EAAQ,EAAA,IAAI,OAAO,EAAU,GAGtB,MAbA,QAAA,WAAU,EA8BhB,IAAM,EAAW,SAAC,EAAiB,EAAmB,EAAyB,GAC9E,IAAA,EAAI,EAAA,CACR,UAAW,GACX,WAAY,MACT,GAEC,EAAO,EAAA,IAAI,QAAQ,EAAU,GAC/B,GAAA,EAAK,YAAc,EAAY,CAC3B,IAAA,EAAS,EAAA,IAAI,QAAQ,EAAY,GACvC,EAAK,EAAK,YAAc,EACxB,EAAQ,EAAA,IAAI,IAAI,EAAY,EAAS,EAAG,GAEpC,IAAA,EAAY,EAAK,WAAa,EAE7B,OADP,EAAQ,EAAA,IAAI,IAAI,EAAW,EAAM,IAbtB,QAAA,SAAQ,EAqBd,IAAM,EAAoB,SAAC,GACzB,MAAA,CACL,QAAQ,EAAA,QAAA,QAAO,GACf,MAAK,QAAA,MACL,SAAQ,QAAA,SACR,WAAU,QAAA,WACV,WAAU,QAAA,WACV,YAAW,QAAA,YACX,WAAU,QAAA,WACV,SAAQ,QAAA,WATC,QAAA,kBAAiB;;AC5gBN,aAAA,IAAA,EAAA,MAAA,KAAA,kBAAA,OAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,OAAA,eAAA,EAAA,EAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,OAAA,SAAA,EAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,KAAA,qBAAA,OAAA,OAAA,SAAA,EAAA,GAAA,OAAA,eAAA,EAAA,UAAA,CAAA,YAAA,EAAA,MAAA,KAAA,SAAA,EAAA,GAAA,EAAA,QAAA,IAAA,EAAA,MAAA,KAAA,cAAA,SAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,YAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,GAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,MAAA,QAAA,eAAA,QAAA,eAAA,QAAA,eAAA,QAAA,OAAA,QAAA,aAAA,QAAA,SAAA,QAAA,kBAAA,QAAA,sBAAA,QAAA,QAAA,QAAA,mBAAA,QAAA,aAAA,QAAA,UAAA,QAAA,cAAA,QAAA,eAAA,QAAA,aAAA,QAAA,WAAA,QAAA,SAAA,QAAA,aAAA,QAAA,UAAA,QAAA,aAAA,QAAA,WAAA,QAAA,UAAA,QAAA,iBAAA,QAAA,iBAAA,QAAA,aAAA,QAAA,UAAA,QAAA,YAAA,QAAA,WAAA,QAAA,YAAA,QAAA,QAAA,QAAA,iBAAA,QAAA,WAAA,QAAA,YAAA,QAAA,KAAA,QAAA,MAAA,QAAA,IAAA,QAAA,OAAA,EATxB,IAAA,EAAA,QAAA,oBAAQ,OAAA,eAAA,QAAA,IAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,KAAG,OAAA,eAAA,QAAA,MAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,OAAK,OAAA,eAAA,QAAA,QAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,SAAO,OAAA,eAAA,QAAA,OAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,QACvB,IAAA,EAAA,QAAA,qBAAQ,OAAA,eAAA,QAAA,cAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,eAAa,OAAA,eAAA,QAAA,aAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,cAAY,OAAA,eAAA,QAAA,mBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,oBAAkB,OAAA,eAAA,QAAA,UAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,WAAS,OAAA,eAAA,QAAA,cAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,eAAa,OAAA,eAAA,QAAA,aAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,cAAY,OAAA,eAAA,QAAA,cAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,eAAa,OAAA,eAAA,QAAA,YAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,aAAW,OAAA,eAAA,QAAA,eAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,gBAAc,OAAA,eAAA,QAAA,mBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,oBAAkB,OAAA,eAAA,QAAA,mBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,oBAAkB,OAAA,eAAA,QAAA,YAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,aAAW,OAAA,eAAA,QAAA,aAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,cAAY,OAAA,eAAA,QAAA,eAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,gBAAc,OAAA,eAAA,QAAA,YAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,aAAW,OAAA,eAAA,QAAA,eAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,gBAAc,OAAA,eAAA,QAAA,WAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,YAAU,OAAA,eAAA,QAAA,aAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,cAAY,OAAA,eAAA,QAAA,eAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,gBAAc,OAAA,eAAA,QAAA,iBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,kBAAgB,OAAA,eAAA,QAAA,gBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,iBAAe,OAAA,eAAA,QAAA,YAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,aAAW,OAAA,eAAA,QAAA,eAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,gBAC3S,IAAA,EAAA,QAAA,eAAQ,OAAA,eAAA,QAAA,qBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,sBACR,IAAA,EAAA,EAAA,QAAA,mBACQ,QAAA,QAAA,EACR,IAAA,EAAA,QAAA,kBAAQ,OAAA,eAAA,QAAA,wBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,yBAAuB,OAAA,eAAA,QAAA,oBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,qBAC/B,IAAA,EAAA,QAAA,iBAAQ,OAAA,eAAA,QAAA,WAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,YAAU,OAAA,eAAA,QAAA,eAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,gBAAc,OAAA,eAAA,QAAA,SAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,UAChC,IAAA,EAAA,QAAA,iBAAQ,OAAA,eAAA,QAAA,iBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,kBAAgB,OAAA,eAAA,QAAA,iBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,kBAExB,IAAA,EAAA,QAAA,oBAAQ,OAAA,eAAA,QAAA,iBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,kBAAgB,OAAA,eAAA,QAAA,QAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA","file":"index.js","sourceRoot":"src","sourcesContent":["\r\n/**\r\n * Some utility functions.\r\n * \r\n * @module core/utils \r\n */\r\n\r\nimport showText from 'string-template'\r\n\r\n/**\r\n * JSON path's index portion.  \r\n * We handle JSON path of `\"/abc/1/def\"` as an index array of `[\"abc\", 1, \"def\"]`.\r\n * \r\n * @category Types\r\n */\r\nexport type Index = string|number\r\n\r\n/**\r\n * Returns true if x is an string representation of an integer value.\r\n * \r\n * @example\r\n * ```js\r\n * isIntStr(\"abc\");  // => false\r\n * isIntStr(\"123\");  // => true\r\n * isIntStr(\"1a\");   // => false\r\n * ```\r\n * @category Entries\r\n */\r\nexport const isIntStr = (x:string):boolean => {\r\n  const n = +x\r\n  return (n % 1 === 0 && x === \"\" + n)\r\n}\r\n\r\n/**\r\n * Returns the array-index independent normalized path.\r\n * \r\n * @example\r\n * ```\r\n * normalizePath(\"/abc/1/def\");  // => \"/abc/\" + \"*\" + \"/def\"\r\n * ```\r\n * @category Entries\r\n */\r\nexport const normalizePath = (path:string):string => {\r\n  const frags = path.split('/')\r\n  for (let i = 1; i < frags.length; i++) {\r\n    if (isIntStr(frags[i])) {\r\n      frags[i] = '*'\r\n    }\r\n  }\r\n  return frags.join('/')\r\n}\r\n\r\n/**\r\n * Concatenates two paths, `path' can be a relative one.\r\n * It roughly follows the Relative JSON path standard.\r\n * \r\n * @example\r\n * ```\r\n * appendPath(\"/abc/def\", \"1/zzz\");  // => \"/abc/zzz\"\r\n * appendPath(\"/abc/def\", \"0/zzz\");  // => \"/abc/def/zzz\"\r\n * appendPath(\"/abc/def\", \"/zzz\");   // => \"/zzz\"\r\n * ```\r\n * @category Entries\r\n */\r\nexport const appendPath = (base:string, path:string):string => {\r\n  if (path.charAt(0) == '' || path.charAt(0) == '/') return path  // absolute path\r\n  if (path === '0') return base  // easy frequent case\r\n  \r\n  const base1 = pathToArray(base)\r\n  let frag0 = path.split('/')\r\n  let frag = []\r\n  let unused = null\r\n\r\n  let upcount = +frag0[0]\r\n  frag = base1\r\n  if (upcount > frag.length) {\r\n    upcount = frag.length\r\n  }\r\n  frag.splice(frag.length - upcount, upcount)\r\n\r\n  frag0.shift()\r\n\r\n  if (frag0.length == 0 && frag.length == 0) return ''\r\n  return '/' + frag.concat(frag0).join('/')\r\n}\r\n\r\n/**\r\n * Normalizes not a string path but an array path, then returns a normalized string path.\r\n * \r\n * @category Entries\r\n */\r\nexport const normalizePathArray = (path:Index[]):string => {\r\n  let rv = ''\r\n  for (let i = 0; i < path.length; i++) {\r\n    if (typeof path[i] == 'number' || isIntStr(\"\" + path[i])) {\r\n      rv += '/*'\r\n    } else {\r\n      rv += '/' + path[i]\r\n    }\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * Separates a path described by a string into an Index array.\r\n * \r\n * @category Entries\r\n */\r\nexport const pathToArray = (path:string):Index[] => {\r\n  const frags = path.split('/')\r\n  const rv = []\r\n  for (let i = 1; i < frags.length; i++) {\r\n    rv.push(isIntStr(frags[i]) ? +frags[i] : frags[i])\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * A variant of `typeof', which handles null and Array appropreately.\r\n * \r\n * @example\r\n * ```\r\n * typeOf([]);    // => 'array'\r\n * typeOf(null);  // => 'null'\r\n * ```\r\n * @category Entries\r\n */\r\nexport const typeOf = (x:any):string => x === null ? 'null' : Array.isArray(x) ? 'array' : typeof x\r\n\r\n/**\r\n * Returns true if `x' is a json value. This is just a shallow test.\r\n * \r\n * @category Entries\r\n */\r\nexport const isJsonValue = (x:any):boolean => {\r\n  switch (typeOf(x)) {\r\n    case 'null': \r\n    case 'number': \r\n    case 'boolean': \r\n    case 'string': \r\n    case 'object': \r\n    case 'array': \r\n      return true\r\n    default: \r\n      return false\r\n  }\r\n}\r\n\r\n/**\r\n * Extracts common portion of paths.\r\n * \r\n * @example\r\n * ```\r\n * commonPath(\"/abc/def\", \"/abc/zzz\");  // => \"/abc\"\r\n * commonPath(\"/abc/def\", \"/abc/deX\");  // => \"/abc\"\r\n * commonPath(\"/abc\", \"/xxx\");  // => \"\"\r\n * commonPath(\"/abc/def/aaa\", \"/abc/def/bbb\");  // => \"/abc/def\"\r\n * ```\r\n * @category Entries\r\n */\r\nexport const commonPath = (path1:string, path2:string):string => {\r\n  const frags1 = path1.split('/')\r\n  const frags2 = path2.split('/')\r\n  const rv = []\r\n  for (let i = 0; i < frags1.length; i++) {\r\n    if (frags2.length <= i) break\r\n    if (frags1[i] != frags2[i]) break\r\n    rv.push(frags1[i])\r\n  }\r\n  return rv.join('/')\r\n}\r\n\r\n/**\r\n * Builds a query string from `obj'.\r\n * \r\n * @category Entries\r\n */\r\nexport const normalizeQuery = (obj:Record<string,string>, omitEmptyParam:boolean):Record<string,string> => {\r\n  const rv = /** @type {Record<string, string>} */ ({})\r\n  for (let p in obj) {\r\n    switch (typeOf(p)) {\r\n      case 'null': \r\n        if (!omitEmptyParam) rv[p] = ''\r\n        break\r\n      case 'boolean': \r\n        rv[p] = obj[p] ? 'true' : 'false'\r\n        break\r\n      case 'number': \r\n        rv[p] = \"\" + obj[p]\r\n        break\r\n      case 'string': \r\n        if (omitEmptyParam && obj[p] === \"\") break\r\n        rv[p] = obj[p]\r\n        break\r\n    }\r\n  }\r\n  return rv\r\n}\r\n\r\nexport {showText}","/**\r\n * This is the core data store object in Unmagical, and it is an abstract data type.\r\n * @module core/store\r\n */\r\n\r\nimport {normalizePath, typeOf, isIntStr, normalizePathArray, appendPath, Index} from './utils'\r\nimport rhasPath from 'ramda/src/hasPath'\r\nimport init from 'ramda/src/init'\r\nimport rpath from 'ramda/src/path'\r\nimport assocPath from 'ramda/src/assocPath'\r\nimport insert from 'ramda/src/insert'\r\nimport last from 'ramda/src/last'\r\nimport dissoc from 'ramda/src/dissoc'\r\nimport rremove from 'ramda/src/remove'\r\nimport update from 'ramda/src/update'\r\nimport {Json, Schema, Mdr, SchemaDb, Lookup, Validate} from './schema'\r\n\r\n\r\n/**\r\n * Store is the abstract data type.\r\n * @ignore\r\n */\r\nexport type Store = {\r\n  tree: Json, \r\n  trackUpdate: boolean, \r\n  updatePoint: Index[], \r\n  schemaDb: SchemaDb, \r\n  validate: Validate, \r\n  extra: Record<string,any>, \r\n  ret?: any, \r\n  onPromiseThen?: any\r\n}\r\n\r\n\r\n/**\r\n * see: https://github.com/ramda/ramda/pull/2841\r\n * Anyway, here we fix the original behavior.\r\n * @function\r\n * @private\r\n * @param {string[]} path \r\n * @param {any} x \r\n * @return {boolean}\r\n */\r\nconst hasPath = (path:Index[], x:any):boolean => {\r\n  if (! path.length) return true\r\n  return rhasPath(path as string[], x)\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @private\r\n */\r\nconst init2 = <T>(list:T[]) => {\r\n  return init(init(list))\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @private\r\n * @param {Json} value \r\n * @return {Mdr} \r\n */\r\nconst makeMdr = (value:Json):Mdr => {\r\n  const rv:Mdr = {value, invalid:false, error:null}\r\n  switch (typeOf(value)) {\r\n    case 'object': // FALLTHRU\r\n    case 'array': \r\n      break\r\n    case 'number': // FALLTHRU\r\n    case 'integer': \r\n      rv.input = '' + value\r\n      rv.touched = false\r\n      break\r\n    case 'boolean': \r\n      rv.input = (value) ? 'true' : 'false'\r\n      rv.touched = false\r\n      break\r\n    case 'null': \r\n      rv.input = ''\r\n      rv.touched = false\r\n      break\r\n    case 'string': \r\n      rv.input = value as string\r\n      rv.touched = false\r\n      break\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @private\r\n * @param data \r\n * @returns Mdr\r\n */\r\nconst wrap = (data):Mdr => {\r\n  const inner = (data:Json):Mdr => {\r\n    switch (typeOf(data)) {\r\n      case 'array': \r\n        const es = []\r\n        for (let i = 0; i < (data as Json[]).length; i++) {\r\n          es[i] = inner(data[i])\r\n        }\r\n        return makeMdr(es)\r\n      case 'object': \r\n        const rec = {}\r\n        for (let p in (data as Object)) {\r\n          rec[p] = inner(data[p])\r\n        }\r\n        return makeMdr(rec)\r\n      default: \r\n        return makeMdr(data)\r\n    }\r\n  }\r\n  return inner(data)\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @private\r\n * @param {Json} tree \r\n * @returns {Json}\r\n */\r\nconst strip = (tree:Json):Json => {\r\n  const root = (tree as Mdr).value\r\n  switch (typeOf(root)) {\r\n    case 'array': \r\n      const es = []\r\n      for (let i = 0; i < (root as Json[]).length; i++) {\r\n        es[i] = strip(root[i])\r\n      }\r\n      return es\r\n    case 'object': \r\n      const rec = {}\r\n      for (let p in (root as Object)) {\r\n        rec[p] = strip(root[p])\r\n      }\r\n      return rec\r\n    default: \r\n      return root\r\n  }\r\n}\r\n\r\n/**\r\n * @en Makes store.\r\n * @ja storeを作る。\r\n * @param data\r\n * - `en` initial data\r\n * - `ja` 初期データ\r\n * @param schemaDb\r\n * - `en` schema database\r\n * - `ja` スキーマデータベース\r\n * @param validate\r\n * - `en` validation function\r\n * - `ja` バリデーション関数\r\n * @param trackUpdate\r\n * - `en` if true, then store is created with update tracking in place.\r\n * - `ja` trueならstoreはアップデートトラッキングをしている状態で作られます。\r\n * @returns \r\n * - `en` newly created store\r\n * - `ja` 新しく作成されたstore\r\n * \r\n * @category Entries\r\n */\r\nexport const makeStore = (data:Json, schemaDb:SchemaDb, validate:Validate, trackUpdate:boolean):Store => {\r\n  const tree = wrap(data) as Json\r\n  return {\r\n    tree, \r\n    trackUpdate, \r\n    updatePoint: trackUpdate ? [] : null, \r\n    schemaDb, \r\n    validate, \r\n    extra: {}\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @param {Store} store0 \r\n * @param {Store} store1 \r\n * @returns {boolean}\r\n * \r\n * @category Entries\r\n */\r\nexport const isSame = (store0:Store, store1:Store):boolean => {\r\n  return (store0.tree === store1.tree && store0.extra === store1.extra)\r\n}\r\n\r\n/**\r\n * Internalizes a path\r\n * @function\r\n * @private\r\n * @param {string} path \r\n * @returns {(string|number)[]}\r\n */\r\nconst internPath = (path:string):Index[] => {\r\n  const frags = path.split('/')\r\n  const rv = []\r\n  for (let i = 1; i < frags.length; i++) {\r\n    rv.push('value')\r\n    rv.push(isIntStr(frags[i]) ? +frags[i] : frags[i])\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @private\r\n * @param {(string|number)[]} path \r\n * @returns {string}\r\n */\r\nconst externPath = (path:Index[]):string => {\r\n  let rv = \"\"\r\n  for (let i = 0; i < path.length; i += 2) {\r\n    rv += \"/\" + path[i + 1]\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @private\r\n * @param {((string|number)[])|null} path0 \r\n * @param {((string|number)[])|null} path1\r\n * @returns {((string|number)[])|null} \r\n */\r\nconst intersect = (path0:Index[]|null, path1:Index[]|null):Index[]|null => {\r\n  if (path0 === null) return path1\r\n  if (path1 === null) return path0\r\n\r\n  const rv = []\r\n  for (let i = 0; i < path0.length; i += 2) {\r\n    if (i >= path1.length) break\r\n    if (path0[i + 1] !== path1[i + 1]) break\r\n    rv.push(path0[i])\r\n    rv.push(path0[i + 1])\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * \r\n * @category Entries\r\n */\r\nexport const beginUpdateTracking = (store:Store):Store => {\r\n  // Essentially, `updatePoint' should be set to null, but it can be omitted \r\n  // because the value when disabled is null.\r\n  return {...store, trackUpdate:true}\r\n}\r\n\r\n/**\r\n * \r\n * \r\n * @category Entries\r\n */\r\nexport const endUpdateTracking = (store:Store):[string|null, Store] => {\r\n  const updatePoint = store.updatePoint ? externPath(store.updatePoint) : null\r\n  return [\r\n    updatePoint, \r\n    {...store, trackUpdate:false, updatePoint:null}\r\n  ]\r\n}\r\n\r\n/**\r\n * \r\n * \r\n * @category Entries\r\n */\r\nexport const test = (path:string, store:Store):boolean => {\r\n  return hasPath(internPath(path), store.tree)\r\n}\r\n\r\n/**\r\n * Extracts a subtree of Store.\r\n * \r\n * @category Entries\r\n */\r\nexport const extract = (path:string, store:Store):Json => {\r\n  const epath = internPath(path)\r\n  const mdr = rpath(epath, store.tree)\r\n  if (! mdr) {\r\n    throw new Error('extract/1: not found: ' + path)\r\n  }\r\n  return strip(mdr as Json)\r\n}\r\n\r\n/**\r\n * Low-level api.\r\n * \r\n * @category Entries\r\n */\r\nexport const getMdr = (path:string, store:Store):Mdr => {\r\n  const epath = internPath(path)\r\n  const mdr = rpath(epath, store.tree)\r\n  if (! mdr) {\r\n    throw new Error('getMdr/1: not found: ' + path)\r\n  }\r\n  return mdr\r\n}\r\n\r\n/**\r\n * Low-level api. This function executes neither validation nor coercion.\r\n * \r\n * The value of MDR must be a scalar.\r\n * \r\n * @category Entries\r\n */\r\nexport const setMdr = (path:string, mdr:Mdr, store:Store):Store => {\r\n  const epath = internPath(path)\r\n  const mdr0 = rpath(epath, store.tree) as Mdr\r\n  if (! mdr0) {\r\n    throw new Error('setMdr/1: not found: ' + path)\r\n  }\r\n  switch (typeOf(mdr0.value)) {\r\n    case 'null': \r\n    case 'boolean': \r\n    case 'number': \r\n    case 'string': \r\n    case 'undefined': \r\n      break\r\n    default: \r\n      throw new Error('setMdr/2: not a scalar: ' + path)\r\n  }\r\n  const tree = assocPath(epath, mdr, store.tree)\r\n  const updatePoint = store.trackUpdate ? intersect(store.updatePoint, epath) : store.updatePoint\r\n  return {...store, tree, updatePoint}\r\n}\r\n\r\n/**\r\n * Adds value to store. `add' function of JSON patch.\r\n * \r\n * @category Entries\r\n */\r\nexport const add = (path:string, value:Json, store:Store):Store => {\r\n  const epath = internPath(path)\r\n  const location = init2(epath)\r\n  const name = last(epath)\r\n  const mdr0 = rpath(location, store.tree) as Mdr\r\n  const type0 = typeOf(mdr0.value)\r\n  if (type0 != 'object' && type0 != 'array') {\r\n    throw new Error('add/1 neither an object nor an array: ' + path)\r\n  }\r\n  if (type0 == 'array') {\r\n    // insert into array\r\n    const index = (name === '-') ? (mdr0.value as Json[]).length : name\r\n    if (typeof index != 'number' || index % 1 !== 0) {\r\n      throw new Error('add/2 invalid index: ' + path)\r\n    }\r\n    if (index < 0 || index > (mdr0.value as Json[]).length) {\r\n      throw new Error('add/3 index out of range: ' + path)\r\n    }\r\n    const value1 = wrap(value) as Json\r\n    const lis = insert(index, value1, mdr0.value as Json[])\r\n    const mdr = makeMdr(lis)\r\n    const tree = assocPath(location, mdr, store.tree)\r\n    // Insertion to a list is an update not to an item but to the list.\r\n    const updatePoint = store.trackUpdate ? intersect(store.updatePoint, location) : store.updatePoint\r\n    return {...store, tree, updatePoint}\r\n  } else {\r\n    // define or replace into object\r\n    if (typeof name != 'string') {\r\n      throw new Error('add/4 invalid name: ' + path)\r\n    }\r\n    const value1 = wrap(value)\r\n    const rec = {...(mdr0.value as {[prop:string]:Json}), [name]:value1} as Json\r\n    const mdr = makeMdr(rec)\r\n    const tree = assocPath(location, mdr, store.tree)\r\n    // Adding a property is an update to an object, while replacing a property is an update to an property value.\r\n    const updatePoint = !store.trackUpdate ? store.updatePoint \r\n      : intersect(store.updatePoint, (name in (mdr0.value as Object)) ? epath : location)\r\n    return {...store, tree, updatePoint}\r\n  }\r\n}\r\n\r\n/**\r\n * Removes a value specified by path from store. `remove' function of JSON patch.\r\n * @function\r\n * @param {string} path \r\n * @param {store} store \r\n * @returns {store}\r\n * @category Entries\r\n */\r\nexport const remove = (path:string, store:Store):Store => {\r\n  const epath = internPath(path)\r\n  const location = init2(epath)\r\n  const name = last(epath)\r\n  const mdr0 = rpath(location, store.tree) as Mdr\r\n  const type0 = typeOf(mdr0.value)\r\n  if (type0 != 'object' && type0 != 'array') {\r\n    throw new Error('remove/1 neither an object nor an array: ' + path)\r\n  }\r\n  if (type0 == 'array') {\r\n    // removes from array\r\n    if (typeof name != 'number' || name % 1 !== 0) {\r\n      throw new Error('remove/2 invalid index: ' + path)\r\n    }\r\n    if (name < 0 || name >= (mdr0.value as Json[]).length) {\r\n      throw new Error('remove/3 out of range: ' + path)\r\n    }\r\n    const lis = rremove(name, 1, mdr0.value as Json[])\r\n    const mdr = makeMdr(lis)\r\n    const tree = assocPath(location, mdr, store.tree)\r\n    const updatePoint = store.trackUpdate ? intersect(store.updatePoint, location) : store.updatePoint\r\n    return {...store, tree, updatePoint}\r\n  } else {\r\n    // delete property from object\r\n    if (! mdr0.value.hasOwnProperty(name)) {\r\n      throw new Error('remove/4: property not found: ' + path)\r\n    }\r\n    const rec = dissoc(name as never, mdr0.value as object)\r\n    const mdr = makeMdr(rec)\r\n    const tree = assocPath(location, mdr, store.tree)\r\n    const updatePoint = store.trackUpdate ? intersect(store.updatePoint, location) : store.updatePoint\r\n    return {...store, tree, updatePoint}\r\n  }\r\n}\r\n\r\n/**\r\n * Replaces a value specified by path into value.  Implements replace function of JSON patch.\r\n * @function\r\n * @param {string} path \r\n * @param {Json} value \r\n * @param {Store} store \r\n * @returns {Store}\r\n * @category Entries\r\n */\r\nexport const replace = (path:string, value:Json, store:Store):Store => {\r\n  const epath = internPath(path)\r\n  if (epath.length == 0) {\r\n    // replace whole data\r\n    const tree = wrap(value) as Json\r\n    const updatePoint = store.trackUpdate ? [] : store.updatePoint\r\n    return {...store, tree, updatePoint}\r\n  }\r\n  const location = init2(epath)\r\n  const name = last(epath)\r\n  const mdr0 = rpath(location, store.tree) as Mdr\r\n  const type0 = typeOf(mdr0.value)\r\n  if (type0 != 'object' && type0 != 'array') {\r\n    throw new Error('replace/1 neither an object nor an array: ' + path)\r\n  }\r\n  if (type0 == 'array') {\r\n    // replace an element in array\r\n    if (typeof name != 'number' || name % 1 !== 0) {\r\n      throw new Error('replace/2 invalid index: ' + path)\r\n    }\r\n    if (name < 0 || name >= (mdr0.value as Json[]).length) {\r\n      throw new Error('replace/3 out of range: ' + path)\r\n    }\r\n    const value1 = wrap(value) as Json\r\n    const lis = update(name, value1, mdr0.value as Json[])\r\n    const mdr = makeMdr(lis)\r\n    const tree = assocPath(location, mdr, store.tree)\r\n    const updatePoint = store.trackUpdate ? intersect(store.updatePoint, epath) : store.updatePoint\r\n    return {...store, tree, updatePoint}\r\n  } else {\r\n    // replace a property of object\r\n    if (typeof name != 'string') {\r\n      throw new Error('replace/4 invalid name: ' + path)\r\n    }\r\n    if (!(name in (mdr0.value as {[prop:string]:Json}))) {\r\n      throw new Error('replace/5 undefined property: ' + path)\r\n    }\r\n    const value1 = wrap(value)\r\n    const rec = {...(mdr0.value as {[prop:string]:Json}), [name]:value1} as {[prop:string]:Json}\r\n    const mdr = makeMdr(rec)\r\n    const tree = assocPath(location, mdr, store.tree)\r\n    const updatePoint = store.trackUpdate ? intersect(store.updatePoint, epath) : store.updatePoint\r\n    return {...store, tree, updatePoint}\r\n  }\r\n}\r\n\r\n/**\r\n * Moves a value located in from, to a location specified by path.  Implements move function of JSON patch.\r\n * @function\r\n * @param {string} from \r\n * @param {string} path \r\n * @param {Store} store\r\n * @returns {Store} \r\n * @category Entries\r\n */\r\nexport const move = (from:string, path:string, store:Store):Store => {\r\n  const value = extract(from, store)\r\n  store = remove(from, store)\r\n  store = add(path, value, store)\r\n  return store\r\n}\r\n\r\n/**\r\n * Copies a value located in from, to a location specified by path.  Impelementing copy function of JSON patch.\r\n * @function\r\n * @param {string} from \r\n * @param {string} path \r\n * @param {Store} store\r\n * @returns {Store} \r\n * @category Entries\r\n */\r\nexport const copy = (from:string, path:string, store:Store):Store => {\r\n  const value = extract(from, store)\r\n  store = add(path, value, store)\r\n  return store\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @param {string} path \r\n * @param {Store} store\r\n * @returns {Store} \r\n * @category Entries\r\n */\r\nexport const validate = (path:string, store:Store):Store => {\r\n  let basePath = null\r\n\r\n  const lookup = (path:string) => {\r\n    const pathToLookup = appendPath(basePath, path)\r\n    return extract(pathToLookup, store)\r\n  }\r\n\r\n  const inner = (mdr0:Mdr, npath:string, path:string):Mdr => {\r\n    const value0 = mdr0.value\r\n    switch (typeOf(value0)) {\r\n      case 'array': \r\n        const lis = []\r\n        for (let i = 0; i < (value0 as Json[]).length; i++) {\r\n          lis[i] = inner(value0[i], npath + '/*', path + '/' + i)\r\n        }\r\n        basePath = path\r\n        return store.validate(lis, mdr0, store.schemaDb[npath], lookup)\r\n      case 'object': \r\n        const rec = {}\r\n        for (let p in  (value0 as Record<string,Json>)) {\r\n          rec[p] = inner(value0[p], npath + '/' + p, path + '/' + p)\r\n        }\r\n        basePath = path\r\n        return store.validate(rec, mdr0, store.schemaDb[npath], lookup)\r\n      default: \r\n        basePath = path\r\n        const mdr = store.validate(value0, mdr0, store.schemaDb[npath], lookup)\r\n        if (mdr.value !== value0) {\r\n          throw new Error('validate/0: value changed: ' + path)\r\n        }\r\n        return mdr\r\n    }\r\n  }\r\n\r\n  const epath = internPath(path)\r\n  const mdr0 = rpath(epath, store.tree)\r\n  if (! mdr0) {\r\n    throw new Error('validate/1: not found: ' + path)\r\n  }\r\n  const mdr = inner(mdr0, normalizePath(path), path)\r\n  const tree = assocPath(epath, mdr, store.tree)\r\n  return {...store, tree}\r\n}\r\n\r\n/**\r\n * By f, maps every mdr descending to a location specified by path.\r\n * @category Entries\r\n */\r\nexport const mapDeep = (f:(mdr:Mdr, path:string) => Mdr, path:string, store:Store):Store => {\r\n  const inner = (mdr0:Mdr, path:string):Mdr => {\r\n    const value0 = mdr0.value\r\n    switch (typeOf(value0)) {\r\n      case 'array': \r\n        const lis = []\r\n        for (let i = 0; i < (value0 as Json[]).length; i++) {\r\n          lis[i] = inner(value0[i], path + '/' + i)\r\n        }\r\n        return {...f(mdr0, path), value:lis}\r\n      case 'object': \r\n        const rec = {}\r\n        for (let p in (value0 as Record<string,Json>)) {\r\n          rec[p] = inner(value0[p], path + '/' + p)\r\n        }\r\n        return {...f(mdr0, path), value:rec}\r\n      default: \r\n        return {...f(mdr0, path), value:value0}\r\n    }\r\n  }\r\n  const epath = internPath(path)\r\n  const mdr0 = rpath(epath, store.tree)\r\n  if (! mdr0) {\r\n    throw new Error('mapDeep/1: not found: ' + path)\r\n  }\r\n  const mdr = inner(mdr0, path)\r\n  const tree = assocPath(epath, mdr, store.tree)\r\n  return {...store, tree}\r\n}\r\n\r\n/**\r\n * By f, deeply reduces a subtree of path.\r\n * @category Entries\r\n */\r\nexport const reduceDeep = <T>(f:(cur:T, mdr:Mdr, path:string) => T, cur:T, path:string, store:Store):T => {\r\n  const inner = (cur:T, mdr:Mdr, path:string):T => {\r\n    const value0 = mdr.value\r\n    switch (typeOf(value0)) {\r\n      case 'array': \r\n        for (let i = 0; i < (value0 as Json[]).length; i++) {\r\n          cur = inner(cur, value0[i], path + '/' + i)\r\n        }\r\n        return f(cur, mdr, path)\r\n      case 'object': \r\n        for (let p in (value0 as Record<string,Json>)) {\r\n          cur = inner(cur, value0[p], path + '/' + p)\r\n        }\r\n        return f(cur, mdr, path)\r\n      default: \r\n        return f(cur, mdr, path)\r\n    }\r\n  }\r\n  const epath = internPath(path)\r\n  const mdr = rpath(epath, store.tree)\r\n  if (! mdr) {\r\n    throw new Error('reduceDeep/1: not found: ' + path)\r\n  }\r\n  return inner(cur, mdr, path)\r\n}\r\n\r\n/**\r\n * \r\n * @param path \r\n * @param fromStore \r\n * @param toStore \r\n * @category Entries\r\n */\r\nexport const duplicate = (path:string, fromStore:Store, toStore:Store):Store => {\r\n  const epath = internPath(path)\r\n  if (epath.length == 0) {\r\n    // duplicate whole data\r\n    const tree = fromStore.tree\r\n    const updatePoint = toStore.trackUpdate ? [] : toStore.updatePoint\r\n    return {...toStore, tree, updatePoint}\r\n  }\r\n  const location = init2(epath)\r\n  const name = last(epath)\r\n  const mdr0 = rpath(location, fromStore.tree) as Mdr\r\n  const type0 = typeOf(mdr0.value)\r\n  if (type0 != 'object' && type0 != 'array') {\r\n    throw new Error('duplicate/1 neither an object nor an array: ' + path)\r\n  }\r\n  if (type0 == 'array') {\r\n    // duplicate an element in an array\r\n    if (typeof name != 'number' || name % 1 !== 0) {\r\n      throw new Error('duplicate/2 invalid index: ' + path)\r\n    }\r\n    if (name < 0 || name >= (mdr0.value as Json[]).length) {\r\n      throw new Error('duplicate/3 out of range: ' + path)\r\n    }\r\n    const value1 = mdr0.value[name]\r\n    const lis = update(name, value1, mdr0.value as Json[])\r\n    const mdr = makeMdr(lis)\r\n    const tree = assocPath(location, mdr, toStore.tree)\r\n    const updatePoint = toStore.trackUpdate ? intersect(toStore.updatePoint, epath) : toStore.updatePoint\r\n    return {...toStore, tree, updatePoint}\r\n  } else {\r\n    // duplicate a property of an object\r\n    if (typeof name != 'string') {\r\n      throw new Error('replace/4 invalid name: ' + path)\r\n    }\r\n    if (!(name in (mdr0.value as Record<string,Json>))) {\r\n      throw new Error('replace/5 undefined property: ' + path)\r\n    }\r\n    const value1 = mdr0.value[name]\r\n    const rec = {...(mdr0.value as Record<string,Json>), [name]:value1}\r\n    const mdr = makeMdr(rec)\r\n    const tree = assocPath(location, mdr, toStore.tree)\r\n    const updatePoint = toStore.trackUpdate ? intersect(toStore.updatePoint, epath) : toStore.updatePoint\r\n    return {...toStore, tree, updatePoint}\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @param {string} name \r\n * @param {Object|null} info \r\n * @param {Store} store\r\n * @returns {Store} \r\n * @category Entries\r\n */\r\nexport const setExtra = (name:string, info:Object|null, store:Store):Store => {\r\n  if (info === null) {\r\n    const {[name]:_unused, ...extra} = store.extra\r\n    return {...store, extra}\r\n  } else {\r\n    const extra = {...store.extra, [name]:info}\r\n    return {...store, extra}\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @param {string} name \r\n * @param {Store} store\r\n * @returns {Object|null} \r\n * @category Entries\r\n */\r\nexport const getExtra = (name:string, store:Store):Object|null => {\r\n  return store.extra[name] || null\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @param {any} ret \r\n * @param {any} onPromiseThen\r\n * @param {Store} store \r\n * @returns {Store}\r\n * @category Entries\r\n */\r\nexport const setPortal = (ret:any, onPromiseThen:any, store:Store):Store => {\r\n  if (ret) return {...store, ret, onPromiseThen}\r\n  const {ret:_unused, onPromiseThen:_unused2, ...store2} = store\r\n  return store2\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @param {Store} store\r\n * @returns {void} \r\n * @category Entries\r\n */\r\nexport const doReturn = (store:Store):void => {\r\n  if (store.ret) {\r\n    store.ret(store)\r\n  } else {\r\n    throw new Error('doReturn/0: no ret')\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @param {any} x\r\n * @returns {boolean} \r\n * @category Entries\r\n */\r\nexport const isStore = (x:any):boolean => {\r\n  return (x != null \r\n    && typeof x == \"object\" \r\n    && \"tree\" in x)\r\n}","/**\r\n * Predefined valiation rules\r\n * \r\n * @module core/rules\r\n */\r\n\r\nimport {typeOf} from './utils'\r\nimport {Scalar} from './errors'\r\nimport {RuleFunc, Json, Schema, nullable, applyRules} from './schema'\r\n\r\n\r\ntype SwitchRequiredParam = {tagProperty:string, types:{[tag:string]:string[]}}\r\n\r\ntype IfParam = [string, Schema, Schema, Schema?]\r\n\r\n/**\r\n * Returns true if the value is in an specified type\r\n */\r\nconst testType = (value:Json, type:string):boolean => {\r\n  if (! type) return true\r\n  if (value === null) {\r\n    return nullable(type)\r\n  } else {\r\n    switch (type) {\r\n      case 'null': \r\n        return false\r\n      case 'number':  // FALLTHRU\r\n      case 'number?': \r\n        return typeof value == 'number'\r\n      case 'integer':  // FALLTHRU\r\n      case 'integer?': \r\n        return (typeof value == 'number' && value % 1 === 0)\r\n      case 'boolean':  // FALLTHRU\r\n      case 'boolean?': \r\n        return typeof value == 'boolean'\r\n      case 'string': \r\n        return typeof value == 'string'\r\n      case 'object':  // FALLTHRU\r\n      case 'object?': \r\n        return (typeof value == 'object' && value !== null)\r\n      case 'array':  // FALLTHRU\r\n      case 'array?': \r\n        return Array.isArray(value)\r\n      default: \r\n        throw new Error('unknown type: ' + type)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Valid if a type of `value` is that specified by `param`.\r\n * @param param null|boolean|boolean?|integer|integer?|number|number?|string|object|object?|array|array?\r\n * @param value value to validate\r\n * @category Predefined Rules\r\n */\r\nexport const type:RuleFunc = (param, value) => {\r\n  if (typeof param != 'string') throw new Error('invalid type')\r\n  const result = testType(value, param)\r\n  if (! result) return {code:'type.'+param}\r\n  return true\r\n}\r\n\r\n/**\r\n * Valid if `value` is either of values in `param`. Comparison is executed with `===`.\r\n * @param param candidates\r\n * @param value value to validate\r\n * @category Predefined Rules\r\n */\r\nexport const $enum:RuleFunc = (param:Json[], value) => {\r\n  if (! Array.isArray(param)) throw new Error('invalid parameter')\r\n  for (let i = 0; i < param.length; i++) {\r\n    if (param[i] === value) return true\r\n  }\r\n  return {code:'rule.enum'}\r\n}\r\n\r\n/**\r\n * Valid if `value` is `===` to `param`.\r\n * @param param const\r\n * @param value value to validate\r\n * @category Predefined Rules\r\n */\r\nexport const $const:RuleFunc = (param, value) => {\r\n  if (param === value) return true\r\n  switch (typeOf(param)) {\r\n    case 'string': \r\n    case 'number': \r\n    case 'null': \r\n    case 'boolean': \r\n      return {code:'rule.const', hint:(param as Scalar)}\r\n    default: \r\n      return {code:'rule.const.nohint'}\r\n  }\r\n}\r\n\r\n/**\r\n * Valid if `value` is not a empty string.<br>\r\n * If `value` is not a string, then valid.\r\n * @param _param unused\r\n * @param value \r\n * @category Predefined Rules\r\n */\r\nexport const notEmpty:RuleFunc = (_param, value) => {\r\n  if (typeOf(value) != 'string') return true\r\n  if (value !== '') return true\r\n  return {code:'rule.notEmpty'}\r\n}\r\n\r\n/**\r\n * Valid if `value` of Object has all properties specifed by `param`.\r\n * If `value` is not an Object, then valid.\r\n * @param param a list of property names\r\n * @param value \r\n * @category Predefined Rules\r\n */\r\nexport const required:RuleFunc = (param, value) => {\r\n  if (! Array.isArray(param)) throw new Error('invalid parameter')\r\n  if (typeOf(value) != 'object') return true\r\n  for (let i = 0; i < param.length; i++) {\r\n    if (! value.hasOwnProperty(param[i] as string)) return {code:'rule.required', hint:param[i] as string}\r\n  }\r\n  return true\r\n}\r\n\r\n/**\r\n * Valid if `value` of Object is an instance of a tagged union specified by `param`\r\n * @example\r\n * ```javascript\r\n * param = {\r\n *   tagProperty: \"tag\", \r\n *   types: {\r\n *     leafOf: [\"value\"], \r\n *     nodeOf: [\"left\", \"right\"]\r\n *   }\r\n * }\r\n * switchRequired of `{tag:\"leafOf\", value:1}` evaludates valid.\r\n * switchRequired of `{tag:\"nodeOf\", left:otherNode}` evaluates invalid since `right` property is missing.\r\n * ```\r\n * @remark\r\n * We can use tagged unions by using the switchRequired rule.<br>\r\n * But notice, even if the property sets are different, if the property names \r\n * are the same, the schema will be the same.\r\n * @param param \r\n * @param value \r\n * @param lookup \r\n * @category Predefined Rules\r\n */\r\nexport const switchRequired:RuleFunc = (param, value, lookup) => {\r\n  if (typeOf(param) != 'object' || !('tagProperty' in (param as object))) throw new Error('invalid parameter')\r\n  if (typeOf(value) != 'object') return true\r\n  param = param as SwitchRequiredParam\r\n  const tag = lookup('0/' + param.tagProperty) as string\r\n  if (! tag) return {code:'rule.switchRequired.nohint', decription:'no tag'}\r\n  if (! param.types[tag]) return {code:'rule.switchRequired.nohint', detail:'no type'}\r\n  const required = param.types[tag]\r\n  if (! Array.isArray(required)) throw new Error('invalid parameter')\r\n  for (let i = 0; i < required.length; i++) {\r\n    if (! value.hasOwnProperty(required[i])) return {code:'rule.switchRequired', hint:required[i]}\r\n  }\r\n  return true\r\n}\r\n\r\n/**\r\n * Valid if `value` is strictly equals to a value located in a path specified by `param`.\r\n * @param param path to the value to be compared\r\n * @param value \r\n * @param lookup \r\n * @category Predefined Rules\r\n */\r\nexport const same:RuleFunc = (param, value, lookup) => {\r\n  if (typeof param != 'string') throw new Error('invalid parameter')\r\n  const target = lookup(param)\r\n  if (target !== value) {\r\n    switch (typeOf(target)) {\r\n      case 'string': \r\n      case 'number': \r\n      case 'null': \r\n      case 'boolean': \r\n        return {code:'rule.same', hint: target as Scalar}\r\n      default: \r\n        return {code:'rule.same.nohint'}\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\n/**\r\n * Valid if either of: \r\n * - {target} conforms the rules of {match}, and `value` conforms the rules of {then}.\r\n * - {target} doesn't conform the rules of {match}, and `value` conforms the rules of {else}.\r\n * Where `param` is an array of:\r\n * - {target} -- path to the target value\r\n * - {match} -- rules for target\r\n * - {then} -- rules of then clause\r\n * - {else} -- rules of else clause\r\n * @param param \r\n * @param value \r\n * @param lookup \r\n * @param rules \r\n * @category Predefined Rules\r\n */\r\nexport const $if:RuleFunc = (param, value, lookup, rules) => {\r\n  if (typeOf(param) != 'array') throw new Error('invalid parameter')\r\n  const param1 = param as IfParam\r\n  const [target, match, then, el = {}] = param1\r\n  if (! target || ! match || ! then) throw new Error('invalid parameter')\r\n  const targetValue = lookup(target)\r\n  const targetResult = applyRules(targetValue, match, lookup, rules)\r\n  if (targetResult === true) {\r\n    return applyRules(value, then, lookup, rules)\r\n  } else {\r\n    return applyRules(value, el, lookup, rules)\r\n  }\r\n}\r\n\r\n/**\r\n * Valid if `value`, where it is a number, is multiple of `param`.\r\n * @param param \r\n * @param value \r\n * @category Predefined Rules\r\n */\r\nexport const multipleOf:RuleFunc = (param, value) => {\r\n  if (typeof param != 'number') throw new Error('invalid parameter')\r\n  if (typeof value != 'number') return true\r\n  if (value % param === 0) return true\r\n  return {code:'rule.multipleOf', hint:param}\r\n}\r\n\r\n/**\r\n * \r\n * @param param \r\n * @param value \r\n * @category Predefined Rules\r\n */\r\nexport const maximum:RuleFunc = (param, value) => {\r\n  if (typeof value != 'number') return true\r\n  if (param >= value) return true\r\n  return {code:'rule.maximum', hint:param as Scalar}\r\n}\r\n\r\n/**\r\n * \r\n * @param param \r\n * @param value \r\n * @category Predefined Rules\r\n */\r\nexport const exclusiveMaximum:RuleFunc = (param, value) => {\r\n  if (typeof value != 'number') return true\r\n  if (param > value) return true\r\n  return {code:'rule.exclusiveMaximum', hint:param as Scalar}\r\n}\r\n\r\n/**\r\n * \r\n * @param param \r\n * @param value \r\n * @category Predefined Rules\r\n */\r\nexport const minimum:RuleFunc = (param, value) => {\r\n  if (typeof value != 'number') return true\r\n  if (param <= value) return true\r\n  return {code:'rule.minimum', hint:param as Scalar}\r\n}\r\n\r\n/**\r\n * \r\n * @param param \r\n * @param value \r\n * @category Predefined Rules\r\n */\r\nexport const exclusiveMinimum:RuleFunc = (param, value) => {\r\n  if (typeof value != 'number') return true\r\n  if (param < value) return true\r\n  return {code:'rule.exclusiveMinimum', hint:param as Scalar}\r\n}\r\n\r\n/**\r\n * \r\n * @param param \r\n * @param value \r\n * @category Predefined Rules\r\n */\r\nexport const maxLength:RuleFunc = (param, value) => {\r\n  if (typeof value != 'string') return true\r\n  if (value.length <= param) return true\r\n  return {code:'rule.maxLength', hint:param as Scalar}\r\n}\r\n\r\n/**\r\n * \r\n * @param param \r\n * @param value \r\n * @category Predefined Rules\r\n */\r\nexport const minLength:RuleFunc = (param, value) => {\r\n  if (typeof value != 'string') return true\r\n  if (value.length >= param) return true\r\n  return {code:'rule.minLength', hint:param as Scalar}\r\n}\r\n\r\n/**\r\n * \r\n * @param param \r\n * @param value \r\n * @category Predefined Rules\r\n */\r\nexport const pattern:RuleFunc = (param, value) => {\r\n  if (typeof param != 'string') throw new Error('invalid parameter')\r\n  if (typeof value != 'string') return true\r\n  if (new RegExp(param).test(value)) return true\r\n  return {code:'rule.pattern', hint: /** @type {string} */ (param)}\r\n}\r\n\r\n/**\r\n * \r\n * @param param \r\n * @param value \r\n * @category Predefined Rules\r\n */\r\nexport const maxItems:RuleFunc = (param, value) => {\r\n  if (typeof param != 'number') throw new Error('invalid parameter')\r\n  if (! Array.isArray(value)) return true\r\n  if (value.length <= param) return true\r\n  return {code:'rule.maxItems', hint: /** @type {number} */ (param)}\r\n}\r\n\r\n/**\r\n * \r\n * @param param \r\n * @param value \r\n * @category Predefined Rules\r\n */\r\nexport const minItems:RuleFunc = (param, value) => {\r\n  if (typeof param != 'number') throw new Error('invalid parameter')\r\n  if (! Array.isArray(value)) return true\r\n  if (value.length >= param) return true\r\n  return {code:'rule.minItems', hint: /** @type {number} */ (param)}\r\n}\r\n","/**\r\n * Data schema and validation\r\n * \r\n * @module core/schema\r\n */\r\n\r\nimport {isJsonValue} from './utils'\r\nimport {MgError} from './errors'\r\nimport * as R from './rules'\r\n\r\n/**\r\n * Json array to silence tsc.\r\n * \r\n * @category Types\r\n */\r\nexport interface JsonArray extends Array<Json> {}\r\n\r\n/**\r\n * Json Object to silence tsc.\r\n * \r\n * @category Types\r\n */\r\nexport interface JsonObject extends Record<string,Json> {}\r\n\r\n/**\r\n * Simple Json type definition\r\n * \r\n * @category Types\r\n */\r\nexport type Json = null | number | string | boolean | JsonArray | JsonObject\r\n\r\n/**\r\n * Type of lookup function used in validation rules.\r\n * \r\n * @category Types\r\n */\r\nexport type Lookup = (path:string) => Json\r\n\r\n/**\r\n * Type of validation rule functions.<br>\r\n * They returns true if validation succeeded.<br>\r\n * Otherwise return MgError.\r\n * \r\n * @category Types\r\n */\r\nexport type RuleFunc = (param:Json, value:Json, lookup:Lookup, rules:Rules) => true|MgError\r\n\r\n/**\r\n * Named set of Rule functions.\r\n * \r\n * @category Types\r\n */\r\nexport type Rules = Record<string,RuleFunc>\r\n\r\n/**\r\n * The schema is modeled after JSON Schema.\r\n * \r\n * @category Types\r\n */\r\nexport type Schema = Record<string,Json>\r\n\r\n/**\r\n * Compiled schema.<br>\r\n * You can lookup a schema by a normalized path.\r\n * \r\n * @category Types\r\n */\r\nexport type SchemaDb = Record<string,Schema>\r\n\r\n/**\r\n * Mdr (abbreviation of Meta data record) is where meta data of each value of the model data comes. \r\n * \r\n * @category Types\r\n */\r\nexport type Mdr = {\r\n  /**\r\n   * `true` if the value is invalid.\r\n   */\r\n  invalid?: boolean, \r\n  /**\r\n   * Non-null if the value has error.\r\n   */\r\n  error?: MgError, \r\n  /**\r\n   * `true` if the user changed this value.\r\n   */\r\n  touched?: boolean, \r\n  /**\r\n   * Raw string of user input.\r\n   */\r\n  input?: string, \r\n  /**\r\n   * the value itself of this value.\r\n   */\r\n  value?: Json\r\n}\r\n\r\n/**\r\n * Type of validation function.\r\n * \r\n * @category Types\r\n */\r\nexport type Validate = (value:any, mdr:Mdr, schema:Schema, lookup:Lookup) => Mdr\r\n\r\n\r\n/**\r\n * Returns true if type specification allows null.\r\n * \r\n * @category Entries\r\n */\r\nexport const nullable = (type:string):boolean => {\r\n  if (! type) return true\r\n  const lastChar = type.charAt(type.length - 1)\r\n  return type == 'null' || lastChar == '?'\r\n}\r\n\r\n/**\r\n * Builds a map from path to schema.\r\n * \r\n * @category Entries\r\n */\r\nexport const buildDb = (schema:Schema):SchemaDb => {\r\n  const db = {}\r\n  const inner = (schema:Schema, path:string) => {\r\n    db[path] = schema\r\n    switch (schema.type) {\r\n      case 'object': \r\n      case 'object?': \r\n        for (let p in schema.properties as Record<string,Json>) {\r\n          inner(schema.properties[p], path + '/' + p)\r\n        }\r\n        break\r\n      case 'array': \r\n      case 'array?': \r\n        inner(schema.items as Schema, path + '/*')\r\n        break\r\n      default: \r\n        break\r\n    }\r\n  }\r\n  inner(schema, \"\")\r\n  return db\r\n}\r\n\r\n/**\r\n * default validation rules.\r\n * Rules prefixed by '$' is registered by its true name. Use `defaultRules.if` instead of `defaultRules.$if`.\r\n * \r\n * @category Entries\r\n */\r\nexport const defaultRules:Rules = {\r\n  type:R.type, 'enum':R.$enum, 'const':R.$const, notEmpty:R.notEmpty, required:R.required, switchRequired:R.switchRequired, same:R.same, 'if':R.$if, \r\n  // TODO: allOf, eitherOf, not\r\n  multipleOf:R.multipleOf, maximum:R.maximum, exclusiveMaximum:R.exclusiveMaximum, minimum:R.minimum, exclusiveMinimum:R.exclusiveMinimum, maxLength:R.maxLength, minLength:R.minLength, pattern:R.pattern, maxItems:R.maxItems, minItems:R.minItems\r\n}\r\n\r\n/**\r\n * Validates a value with a schema. It is a shallow validation.\r\n * \r\n * @param rules set of validation rules, which means that you can add your own rules.\r\n * \r\n * @category Entries\r\n */\r\nexport const validate = (rules:Rules):Validate => (value, mdr, schema, lookup) => {\r\n  if (! isJsonValue(value)) {\r\n    if (schema && schema.type) {\r\n      const error = {code:'type.'+schema.type, detail:'given value: '+value}\r\n      return {...mdr, value, invalid:true, error}\r\n    } else {\r\n      const error = {code:'value', detail:'given value: '+value}\r\n      return {...mdr, value, invalid:true, error}\r\n    }\r\n  }\r\n\r\n  if (schema) {\r\n    const result = applyRules(value, schema, lookup, rules)\r\n    if (result !== true) {\r\n      return {...mdr, value, invalid:true, error:result}\r\n    }\r\n  }\r\n  return {...mdr, value, invalid:false, error:null}\r\n}\r\n\r\n/**\r\n * \r\n * \r\n * \r\n * @category Entries\r\n */\r\nexport const applyRules = (value:any, schema:Schema, lookup:Lookup, rules:Rules):true|MgError => {\r\n  for (let p in schema) {\r\n    const f = rules[p]\r\n    if (! f) continue\r\n    const result = f(schema[p], value, lookup, rules)\r\n    if (result !== true) return result\r\n  }\r\n  return true\r\n}\r\n\r\n/**\r\n * Executes coercion. Coercion is a process that interpretes a user input of string into a value of schema-specified type.\r\n * \r\n * @category Entries\r\n */\r\nexport const coerce = (input:string, mdr:Mdr, schema:Schema):Mdr => {\r\n  input = \"\" + input  // coerce to string\r\n  if (! schema) {\r\n    throw new Error('coerce/0: no schema')\r\n  }\r\n  if (! schema.type || typeof schema.type != 'string') {\r\n    throw new Error('coerce/1: type not specified')\r\n  }\r\n  const type = schema.type\r\n  if (['null', 'boolean', 'boolean?', 'integer', 'integer?', 'number', 'number?', 'string'].indexOf(type) == -1) {\r\n    throw new Error('coerce/2: not a coercion enabled type: ' + type)\r\n  }\r\n\r\n  switch (type) {\r\n    case 'null': \r\n      break\r\n    case 'number': \r\n    case 'number?': \r\n      const n = +input\r\n      if (\"\" + n === input) {\r\n        return {value:n, input, touched:mdr.touched}\r\n      }\r\n      break\r\n    case 'integer': \r\n    case 'integer?': \r\n      const i = +input\r\n      if (\"\" + i === input && i % 1 === 0) {\r\n        return {value:i, input, touched:mdr.touched}\r\n      }\r\n      break\r\n    case 'boolean': \r\n    case 'boolean?': \r\n      if (input === \"true\" || input === \"false\") {\r\n        return {value:input===\"true\", input, touched:mdr.touched}\r\n      }\r\n      break\r\n    case 'string': \r\n      return {value:input, input, touched:mdr.touched}\r\n  }\r\n  if (input == \"\" && nullable(type)) {\r\n    return {value:null, input, touched:mdr.touched}\r\n  }\r\n  return {input, touched:mdr.touched}\r\n}\r\n\r\n\r\n","/**\r\n * An error type and error messages.\r\n * \r\n * @module core/errors\r\n */\r\n\r\nimport {showText} from './utils'\r\n\r\n/**\r\n * Type of `MgError.hint`\r\n * \r\n * @category Types\r\n */\r\nexport type Scalar = string|number|boolean|null\r\n\r\n/**\r\n * Error type\r\n * \r\n * @category Types\r\n */\r\nexport type MgError = {\r\n  /**\r\n   * An error code. This is used to distinguish an error type from others.\r\n   */\r\n  code: string, \r\n\r\n  /**\r\n   * A detail description for developers.\r\n   */\r\n  detail?: string, \r\n\r\n  /**\r\n   * A hint data to build an error message.\r\n   */\r\n  hint?: Scalar, \r\n\r\n  /**\r\n   * An error message for users.<br>\r\n   * Usually this property is undefined, so someone should call normalizeError() to generate a message.\r\n   */\r\n  message?: string\r\n}\r\n\r\n/**\r\n * A type of normalizeError function.\r\n * \r\n * @category Types\r\n */\r\nexport type NormalizeError = (error:MgError) => MgError\r\n\r\n/**\r\n * Returns true if a given object is an instance of MgError\r\n * \r\n * @param x\r\n * \r\n * @category Entries\r\n */\r\nexport const isError = (x:any):boolean => {\r\n  return (typeof x == 'object' && x != null && 'code' in x)\r\n}\r\n\r\n/**\r\n * Extends a MgError for viewing, and returns its extended instance.<br>\r\n * Actually, this function adds `message` value to the error.\r\n * \r\n * @category Entries\r\n */\r\nexport const normalizeError = (catalog:Record<string,string>):NormalizeError => (error) => {\r\n  const template = catalog[error.code] || catalog['detail' in error ? '_fallback' : '_fallback.nodetail']\r\n  const message = showText(template, error)\r\n  return {...error, message}\r\n}\r\n\r\n/**\r\n * \r\n * @category Entries\r\n */\r\nexport enum defaultCatalog {\r\n  /**\r\n   * In fact, this is not an error code. This entry will be used when generating a message for an unknown code.\r\n   */\r\n  '_fallback' = 'Error code:{code}; detail:{detail}', \r\n  /**\r\n   * In fact, this is not an error code. This entry will be used when generating a message for an unknown code.\r\n   */\r\n  '_fallback.nodetail' = 'Error code:{code}', \r\n  \r\n  'value' = 'Invalid value', \r\n  /**\r\n   * @name \"type.null\"\r\n   */\r\n  'type.null' = 'Please input a null value', \r\n  /**\r\n   * @name \"type.boolean\"\r\n   */\r\n  'type.boolean' = 'Please input a boolean value', \r\n  /**\r\n   * @name \"type.boolean?\"\r\n   */\r\n  'type.boolean?' = 'Please input a boolean value or a null', \r\n  /**\r\n   * @name \"type.integer\"\r\n   */\r\n  'type.integer' = 'Please input an integer', \r\n  /**\r\n   * @name \"type.integer?\"\r\n   */\r\n  'type.integer?' = 'Please input an integer or a null', \r\n  /**\r\n   * @name \"type.number\"\r\n   */\r\n  'type.number' = 'Please input a number', \r\n  /**\r\n   * @name \"type.number?\"\r\n   */\r\n  'type.number?' = 'Please input a number or a null', \r\n  /**\r\n   * @name \"type.string\"\r\n   */\r\n  'type.string' = 'Please input a string', \r\n  /**\r\n   * @name \"type.object\"\r\n   */\r\n  'type.object' = 'Please input an object value', \r\n  /**\r\n   * @name \"type.object?\"\r\n   */\r\n  'type.object?' = 'Please input an object value or a null', \r\n  /**\r\n   * @name \"type.array\"\r\n   */\r\n  'type.array' = 'Please input an array value', \r\n  /**\r\n   * @name \"type.array?\"\r\n   */\r\n  'type.array?' = 'Please input an array value or a null', \r\n  /**\r\n   * @name \"rule.enum\"\r\n   */\r\n  'rule.enum' = 'Invalid input', \r\n  /**\r\n   * @name \"rule.const\"\r\n   */\r\n  'rule.const' = 'Input {hint}',  // param\r\n  /**\r\n   * @name \"rule.const.nohint\"\r\n   */\r\n  'rule.const.nohint' = 'Invalid input', \r\n  /**\r\n   * @name \"rule.notEmpty\"\r\n   */\r\n  'rule.notEmpty' = 'Please input', \r\n  /**\r\n   * @name \"rule.required\"\r\n   */\r\n  'rule.required' = 'Missing property \"{hint}\"',  // param[i]\r\n  /**\r\n   * @name \"rule.switchRequired\"\r\n   */\r\n  'rule.switchRequired' = 'Missing property \"{hint}\"',  // required[i]\r\n  /**\r\n   * @name \"rule.sqitchRequired.nohint\"\r\n   */\r\n  'rule.switchRequired.nohint' = 'Properties are missing', \r\n  /**\r\n   * @name \"rule.same\"\r\n   */\r\n  'rule.same' = 'Please input {hint}',  // target\r\n  /**\r\n   * @name \"rule.same.nohint\"\r\n   */\r\n  'rule.same.nohint' = 'Invalid input', \r\n  /**\r\n   * @name \"rule.multipleOf\"\r\n   */\r\n  'rule.multipleOf' = 'Please enter a multiple of {hint}',  // param\r\n  /**\r\n   * @name \"rule.maximum\"\r\n   */\r\n  'rule.maximum' = 'Please enter {hint} or less',  // param\r\n  /**\r\n   * @name \"rule.exclusiveMaximum\"\r\n   */\r\n  'rule.exclusiveMaximum' = 'Please enter less than {hint}',  // param\r\n  /**\r\n   * @name \"rule.minimum\"\r\n   */\r\n  'rule.minimum' = 'Please enter {hint} or more',  // param\r\n  /**\r\n   * @name \"rule.exclusiveMinimum\"\r\n   */\r\n  'rule.exclusiveMinimum' = 'Please enter more than {hint}',  // param\r\n  /**\r\n   * @name \"rule.maxLength\"\r\n   */\r\n  'rule.maxLength' = 'Please enter no more than {hint} characters',  // param\r\n  /**\r\n   * @name \"rule.minLength\"\r\n   */\r\n  'rule.minLength' = 'Please enter at least {hint} characters',  // param\r\n  /**\r\n   * @name \"rule.pattern\"\r\n   */\r\n  'rule.pattern' = 'Invalid format',  // param\r\n  /**\r\n   * @name \"rule.maxItems\"\r\n   */\r\n  'rule.maxItems' = 'Please make it {hint} or less',  // param\r\n  /**\r\n   * @name \"rule.minItems\"\r\n   */\r\n  'rule.minItems' = 'Please make it {hint} or more',  // param\r\n  /**\r\n   * @name \"http.400\"\r\n   */\r\n  'http.400' = 'HTTP error: {detail}', \r\n  /**\r\n   * @name \"http.401\"\r\n   */\r\n  'http:401' = 'HTTP error: {detail}', \r\n  /**\r\n   * @name \"http.403\"\r\n   */\r\n  'http:403' = 'HTTP error: {detail}', \r\n  /**\r\n   * @name \"http.404\"\r\n   */\r\n  'http.404' = 'HTTP error: {detail}', \r\n  /**\r\n   * @name \"http.405\"\r\n   */\r\n  'http.405' = 'HTTP error: {detail}', \r\n  /**\r\n   * @name \"http.406\"\r\n   */\r\n  'http.406' = 'HTTP error: {detail}', \r\n  /**\r\n   * @name \"http.407\"\r\n   */\r\n  'http.407' = 'HTTP error: {detail}', \r\n  /**\r\n   * @name \"http.408\"\r\n   */\r\n  'http.408' = 'HTTP error: {detail}', \r\n  /**\r\n   * @name \"http.409\"\r\n   */\r\n  'http.409' = 'HTTP error: {detail}', \r\n  /**\r\n   * @name \"http.410\"\r\n   */\r\n  'http.410' = 'HTTP error: {detail}', \r\n  /**\r\n   * @name \"http.500\"\r\n   */\r\n  'http.500' = 'HTTP error: {detail}', \r\n  /**\r\n   * @name \"http.501\"\r\n   */\r\n  'http.501' = 'HTTP error: {detail}', \r\n  /**\r\n   * @name \"http.502\"\r\n   */\r\n  'http.502' = 'HTTP error: {detail}', \r\n  /**\r\n   * @name \"http.503\"\r\n   */\r\n  'http.503' = 'HTTP error: {detail}', \r\n\r\n}","/**\r\n * @module core/framework\r\n */\r\n\r\nimport { normalizePath } from './utils'\r\nimport * as E from './store'\r\nimport * as S from './schema'\r\nimport * as X from './errors'\r\nimport { app, h as h0, VNode, ActionType, View as HaView } from 'hyperapp'\r\nimport {MgError, NormalizeError} from './errors'\r\nimport {Json, Schema, Mdr, SchemaDb, Lookup, Rules} from './schema'\r\nimport {Store} from './store'\r\nexport {Store} from './store'\r\n\r\n/**\r\n * @category Types\r\n */\r\nexport type Validity = {invalid:boolean, error:MgError|null}\r\n\r\n/**\r\n * Developer-supplied evolve function.<br>\r\n * In this function, derived data are calculated.\r\n * \r\n * @param store an store before evolve\r\n * @param updatePointer a common path of currently updated data\r\n * @param prevStore an store before current update\r\n * @returns evolved store\r\n * @category Types\r\n */\r\nexport type Evolve = (store:Store, updatePointer:string|null, prevStore:Store|null) => Store\r\n\r\n/**\r\n * Developer-supplied render function.<br>\r\n * Render function maps store to vdom.\r\n * \r\n * @param store current store\r\n * @returns VDOM\r\n * @category Types\r\n */\r\nexport type Render = (store:Store) => VNode<{}> | HaView<UnmagicalState, UnmagicalActions>\r\n\r\n/**\r\n * Type of update function.\r\n * @param args one or more arguments; The last parameter will be Store.\r\n * @category Types\r\n */\r\nexport type Update = (...args:any[]) => Store|Promise<any>\r\n\r\ntype ThenHandler = (result:any) => any\r\ntype XThenHandler = (result:any, store:Store) => any\r\ntype DialogState = {\r\n  data: any, \r\n  fulfill: (result:any) => undefined, \r\n  reject: (result:any) => undefined\r\n}\r\ntype OnPromiseThenParam = {\r\n  result: any,\r\n  ret: (any:any) => void,\r\n  handler: XThenHandler\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport type UnmagicalState = {\r\n  baseStore: Store, \r\n  store: Store, \r\n  normalizeError: NormalizeError\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport type UnmagicalActions = {\r\n  onTextboxInput: UnmagicalAction<Event>, \r\n  onTextboxBlur: UnmagicalAction<Event>, \r\n  onSliderInput: UnmagicalAction<Event>, \r\n  onSliderChange: UnmagicalAction<Event>, \r\n  onListboxChange: UnmagicalAction<Event>, \r\n  onRadioChange: UnmagicalAction<Event>, \r\n  onCheckboxChange: UnmagicalAction<Event>, \r\n  onSmartControlChange: UnmagicalAction<{path:string,input:string}|[{path:string,input:string}]>, \r\n  onUpdate: UnmagicalAction<Event|{update:string,context:any[]}>, \r\n  onPromiseSettle: UnmagicalAction<Event|{name:string,result:any}>, \r\n  onPromiseThen: UnmagicalAction<OnPromiseThenParam>\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport type UnmagicalAction<T> = ActionType<T, UnmagicalState, UnmagicalActions>\r\n\r\n/**\r\n * @category start\r\n */\r\nexport type StartParameter = {\r\n  data: Json, \r\n  schema: Schema, \r\n  render: Render, \r\n  containerEl: Element, \r\n  evolve?: Evolve, \r\n  updates?: Record<string,Update>\r\n  rules?: Rules, \r\n  catalog?: Record<string,string>\r\n}\r\n\r\n/**\r\n * @category start\r\n */\r\nexport type StartValue = {\r\n  onUpdate: UnmagicalAction<Event|{update:string,context:any[]}>\r\n}\r\n\r\n/**\r\n * @namespace\r\n */\r\nexport namespace API {\r\n  // re-export from store\r\n  export const test = E.test\r\n  export const extract = E.extract\r\n  export const getMdr = E.getMdr\r\n  export const add = E.add\r\n  export const remove = E.remove\r\n  export const replace = E.replace\r\n  export const move = E.move\r\n  export const copy = E.copy\r\n  export const duplicate = E.duplicate\r\n  export const validate = E.validate\r\n  export const mapDeep = E.mapDeep\r\n  export const reduceDeep = E.reduceDeep\r\n  export const getExtra = E.getExtra\r\n\r\n  /**\r\n   * \r\n   * @param {string} path \r\n   * @param {Store} store\r\n   * @returns {Store} \r\n   */\r\n  export const touchAll = (path:string, store:Store):Store => {\r\n    return E.mapDeep((mdr, _path) => ({...mdr, touched:true}), path, store)\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {string} path \r\n   * @param {Store} store\r\n   * @returns {number} \r\n   */\r\n  export const countValidationErrors = (path:string, store:Store):number => {\r\n    return E.reduceDeep((cur, mdr, _path) => {\r\n      const d = mdr.touched && mdr.invalid ? 1 : 0\r\n      return cur + d\r\n    }, 0, path, store)\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {string} path \r\n   * @param {Store} store\r\n   * @returns {string[]} \r\n   */\r\n  export const validationErrors = (path:string, store:Store):string[] => {\r\n    const errors:string[] = []\r\n    E.reduceDeep((_cur, mdr, path) => {\r\n      if (mdr.touched && mdr.invalid) {\r\n        errors.push(path)\r\n      }\r\n      return null\r\n    }, null, path, store)\r\n    return errors\r\n  }\r\n\r\n  /**\r\n   * @param {string} path\r\n   * @param {Store} store\r\n   * @returns {{invalid:boolean, error:MgError|null}}\r\n   */\r\n  export const foldValidity = (path:string, store:Store):Validity => {\r\n    return API.reduceDeep<Validity>((cur, mdr, _path) => {\r\n      if (cur.invalid) return cur\r\n      if (mdr.touched && mdr.invalid) return {invalid:true, error:mdr.error}\r\n      return cur\r\n    }, {invalid:false, error:null}, path, store)\r\n  }\r\n\r\n  /**\r\n   * @param {number} ms\r\n   * @param {Store} store\r\n   * @returns {[Promise, Store]}\r\n   */\r\n  export const sleep = (ms:number, store:Store):[Promise<null>, Store] => {\r\n    const p = new Promise<null>((fulfill, reject) => {\r\n      setTimeout(() => {\r\n        fulfill(null)\r\n      }, ms)\r\n    })\r\n    return [p, store]\r\n  }\r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {string} itemPath\r\n   * @param {string} group\r\n   * @param {Store} store\r\n   * @returns {[Promise, Store]}\r\n   */\r\n  export const startReordering = <T>(name:string, itemPath:string, group:string, store:Store):[Promise<T>, Store] => {\r\n    const p = new Promise<T>((fulfill, reject) => {\r\n      store = E.setExtra(name, {itemPath, group, fulfill, reject}, store)\r\n    })\r\n    return [p, store]\r\n  }\r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Store} store\r\n   * @returns {Store}\r\n   */\r\n  export const endReordering = (name:string, store:Store):Store => {\r\n    const extra = E.getExtra(name, store)\r\n    if (! extra) return store\r\n    return E.setExtra(name, null, store)\r\n  }\r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Store} store\r\n   * @returns {string|null}\r\n   */\r\n  export const getReordering = (name:string, store:Store):string|null => {\r\n    const extra = E.getExtra(name, store) as {itemPath:string}|null\r\n    if (! extra) return null\r\n    return extra.itemPath\r\n  }\r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {any} data\r\n   * @param {Store} store\r\n   * @returns {[Promise, Store]}\r\n   */\r\n  export const openDialog = (name:string, data:any, store:Store):[Promise<boolean>,Store] => {\r\n    const p = new Promise<boolean>((fulfill, reject) => {\r\n      store = E.setExtra(name, {data, fulfill, reject}, store)\r\n    })\r\n    return [p, store]\r\n  }\r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Store} store\r\n   * @returns {Store}\r\n   */\r\n  export const closeDialog = (name:string, store:Store):Store => {\r\n    const extra = E.getExtra(name, store)\r\n    if (! extra) return store\r\n    return E.setExtra(name, null, store)\r\n  }\r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Store} store\r\n   * @returns {any|null}\r\n   */\r\n  export const getDialog = (name:string, store:Store):any|null => {\r\n    const extra = E.getExtra(name, store) as DialogState|null\r\n    if (! extra) return null\r\n    return extra.data\r\n  }\r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {any} data\r\n   * @param {Store} store\r\n   * @returns {Store}\r\n   */\r\n  export const openFeedback = (name:string, data:any, store:Store):Store => {\r\n    return E.setExtra(name, data, store)\r\n  }\r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Store} store\r\n   * @returns {Store}\r\n   */\r\n  export const closeFeedback = (name:string, store:Store):Store => {\r\n    const extra = E.getExtra(name, store)\r\n    if (! extra) return store\r\n    return E.setExtra(name, null, store)\r\n  }\r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Store} store\r\n   * @returns {any|null}\r\n   */\r\n  export const getFeedback = (name:string, store:Store):any|null => {\r\n    return E.getExtra(name, store)\r\n  }\r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {number} current\r\n   * @param {Store} store\r\n   * @returns {Store}\r\n   */\r\n  export const setPage = (name:string, current:number, store:Store):Store => {\r\n    return E.setExtra(name, current, store)\r\n  }\r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Store} store\r\n   * @returns {number}\r\n   */\r\n  export const getPage = (name:string, store:Store):number => {\r\n    const extra = E.getExtra(name, store) as number|null\r\n    return (extra !== null) ? extra : 0\r\n  }\r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Store} store\r\n   * @returns {Store}\r\n   */\r\n  export const nextPage = (name:string, store:Store):Store => {\r\n    const extra = E.getExtra(name, store) as number|null\r\n    const current = (extra !== null) ? extra : 0\r\n    return E.setExtra(name, current + 1, store)\r\n  }\r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Store} store\r\n   * @returns {Store}\r\n   */\r\n  export const prevPage = (name:string, store:Store):Store => {\r\n    const extra = E.getExtra(name, store) as number|null\r\n    const current = (extra !== null) ? extra : 0\r\n    return E.setExtra(name, current - 1, store)\r\n  }\r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {boolean} shown\r\n   * @param {Store} store\r\n   * @returns {Store}\r\n   */\r\n  export const setSwitch = (name:string, shown:boolean, store:Store):Store => {\r\n    return E.setExtra(name, shown, store)\r\n  }\r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Store} store\r\n   * @returns {boolean}\r\n   */\r\n  export const getSwitch = (name:string, store:Store):boolean => {\r\n    const extra = E.getExtra(name, store) as boolean|null\r\n    return (extra !== null) ? extra : false\r\n  }\r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Store} store\r\n   * @returns {Store}\r\n   */\r\n  export const toggleSwitch = (name:string, store:Store):Store => {\r\n    const extra = E.getExtra(name, store) as boolean|null\r\n    const current = (extra !== null) ? extra : false\r\n    return E.setExtra(name, !current, store)\r\n  }\r\n\r\n  /*\r\n   * TODO: progress bar, ReadStream, ...\r\n   */\r\n  /**\r\n   * @param {string} name\r\n   * @param {any} unknown\r\n   * @param {Store} store\r\n   * @returns {Store}\r\n   */\r\n  export const openProgress = (name:string, unknown:any, store:Store):Store => {\r\n    return E.setExtra(name, {current:-1}, store)\r\n  }\r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Store} store\r\n   * @returns {Store}\r\n   */\r\n  export const closeProgress = (name:string, store:Store):Store => {\r\n    return E.setExtra(name, null, store)\r\n  }\r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Store} store\r\n   * @returns {number|null}\r\n   */\r\n  export const getProgress = (name:string, store:Store):number|null => {\r\n    const extra = E.getExtra(name, store) as {current:number}|null\r\n    if (! extra) return null\r\n    return extra.current\r\n  }\r\n  \r\n  /**\r\n   * @param {string} name \r\n   * @param {string} fromPath \r\n   * @param {string} group\r\n   * @param {Store} store\r\n   * @returns {Store|Promise}\r\n   */\r\n  export const reorder = (name:string, fromPath:string, group:string, store:Store):Store|Promise<{path:string}> => {\r\n    const {enter, leave} = API.makePortal(store)\r\n    return leave(API.startReordering<{path:string}>(name, fromPath, group, store))\r\n    .then(enter(({path}, store) => {\r\n      store = API.endReordering(name, store)\r\n      return API.move(fromPath, path, store)\r\n    }))\r\n  }\r\n\r\n  /**\r\n   * @param {Store} store\r\n   */\r\n  export const makePortal = (store:Store) => {\r\n    return {\r\n      /**\r\n       * @param {(result:any, store:Store) => any} handler\r\n       * @returns {(result:any) => any}\r\n       */\r\n      enter: (handler:XThenHandler):ThenHandler => {  // Our customized handler :: [result, store] => ...\r\n        return (result) => {  // This is the actual, standard promise handler\r\n          let result1 = null  // We will get the result in this variable.\r\n          const ret = (res1) => {result1 = res1}\r\n          (store.onPromiseThen as UnmagicalAction<OnPromiseThenParam>)({result, handler, ret})  // enter into hyperapp. Its result is undefined.\r\n          return result1\r\n        }\r\n      }, \r\n      /**\r\n       * @param {[(Promise|Error), Store] | (Promise|Error)} x\r\n       * @param {Store} [y]\r\n       * @returns {Promise|Error}\r\n       */\r\n      leave: <T>(x:[T, Store]|T, y?:Store):T => {\r\n        const p = Array.isArray(x) ? x[0] : x\r\n        const store = Array.isArray(x) ? x[1] : y\r\n        if (! E.isStore(store)) throw new Error('exit/1: store required')\r\n        E.doReturn(store)\r\n        return p\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst updateEnabledApis = {\r\n  openDialog: API.openDialog, \r\n  closeDialog: API.closeDialog, \r\n  openFeedback: API.openFeedback, \r\n  closeFeedback: API.closeFeedback, \r\n  openProgress: API.openProgress, \r\n  closeProgress: API.closeProgress, \r\n  setPage: API.setPage, \r\n  nextPage: API.nextPage, \r\n  prevPage: API.prevPage, \r\n  setSwitch: API.setSwitch, \r\n  toggleSwitch: API.toggleSwitch, \r\n  reorder: API.reorder\r\n}\r\n\r\n/**\r\n * Starts frontend application.\r\n * @category start\r\n */\r\nexport const start = (\r\n    {\r\n      data, \r\n      schema, \r\n      render, \r\n      containerEl, \r\n      evolve = null, \r\n      updates = {}, \r\n      rules = null, \r\n      catalog = null\r\n    }:StartParameter):StartValue => {\r\n  // complements reasonable defaults\r\n  if (! evolve) evolve = (store, _pointer, _prevStore) => store\r\n  const validate = S.validate(rules || S.defaultRules)\r\n  const coerce = S.coerce\r\n  const normalizeError = X.normalizeError(catalog || X.defaultCatalog)\r\n\r\n  const schemaDb = S.buildDb(schema)\r\n\r\n  const actions0 = {\r\n    onTextboxInput: (ev:Event) => (state:UnmagicalState, actions:UnmagicalActions) => {\r\n      const path = (ev.currentTarget as HTMLElement).dataset.mgPath\r\n      const value = ev.currentTarget[(ev.currentTarget as HTMLElement).dataset.mgValueAttribute]\r\n      const mdr0 = E.getMdr(path, state.baseStore)\r\n      const mdr = {...mdr0, input:value}\r\n      const baseStore = E.setMdr(path, mdr, state.baseStore)\r\n      // We don't call evolve() here, because oninput is not a check point of evolve().\r\n      // Thus we update not only baseStore but also store.\r\n      const mdrb0 = E.getMdr(path, state.store)\r\n      const mdrb = {...mdrb0, input:value}\r\n      const store = E.setMdr(path, mdrb, state.store)\r\n      return {...state, baseStore, store}\r\n    }, \r\n    onTextboxBlur: (ev:Event) => (state:UnmagicalState, actions:UnmagicalActions) => {\r\n      const path = (ev.currentTarget as HTMLElement).dataset.mgPath\r\n      const value = ev.currentTarget[(ev.currentTarget as HTMLElement).dataset.mgValueAttribute]\r\n      const npath = normalizePath(path)\r\n      const mdr0 = {...E.getMdr(path, state.baseStore), touched:true}\r\n      const mdr = coerce(value, mdr0, schemaDb[npath])\r\n      let updatePointer\r\n      let baseStore = E.beginUpdateTracking(state.baseStore)\r\n      baseStore = E.setMdr(path, mdr, baseStore)\r\n      baseStore = E.validate(\"\", baseStore);\r\n      [updatePointer, baseStore] = E.endUpdateTracking(baseStore)\r\n      let store = evolve(baseStore, updatePointer, baseStore)\r\n      store = E.validate(\"\", store)\r\n      return {...state, baseStore, store}\r\n    }, \r\n    onSliderInput: (ev:Event) => (state:UnmagicalState, actions:UnmagicalActions) => {\r\n      const path = (ev.currentTarget as HTMLElement).dataset.mgPath\r\n      const value = ev.currentTarget[(ev.currentTarget as HTMLElement).dataset.mgValueAttribute]\r\n      const mdr0 = E.getMdr(path, state.baseStore)\r\n      const mdr = {...mdr0, input:value}\r\n      const baseStore = E.setMdr(path, mdr, state.baseStore)\r\n      // We don't call evolve() here, because oninput is not a check point of evolve().\r\n      // Thus we update not only baseStore but also store.\r\n      const mdrb0 = E.getMdr(path, state.store)\r\n      const mdrb = {...mdrb0, input:value}\r\n      const store = E.setMdr(path, mdrb, state.store)\r\n      return {...state, baseStore, store}\r\n    }, \r\n    onSliderChange: (ev:Event) => (state:UnmagicalState, actions:UnmagicalActions) => {\r\n      const path = (ev.currentTarget as HTMLElement).dataset.mgPath\r\n      const value = ev.currentTarget[(ev.currentTarget as HTMLElement).dataset.mgValueAttribute]\r\n      const npath = normalizePath(path)\r\n      const mdr0 = {...E.getMdr(path, state.baseStore), touched:true}\r\n      const mdr = coerce(value, mdr0, schemaDb[npath])\r\n      let updatePointer\r\n      let baseStore = E.beginUpdateTracking(state.baseStore)\r\n      baseStore = E.setMdr(path, mdr, baseStore)\r\n      baseStore = E.validate(\"\", baseStore);\r\n      [updatePointer, baseStore] = E.endUpdateTracking(baseStore)\r\n      let store = evolve(baseStore, updatePointer, state.store)\r\n      store = E.validate(\"\", store)\r\n      return {...state, baseStore, store}\r\n    }, \r\n    onListboxChange: (ev:Event) => (state:UnmagicalState, actions:UnmagicalActions) => {\r\n      const path = (ev.currentTarget as HTMLElement).dataset.mgPath\r\n      const value = ev.currentTarget[(ev.currentTarget as HTMLElement).dataset.mgValueAttribute]\r\n      const npath = normalizePath(path)\r\n      const mdr0 = {...E.getMdr(path, state.baseStore), touched:true}\r\n      const mdr = coerce(value, mdr0, schemaDb[npath])\r\n      let updatePointer\r\n      let baseStore = E.beginUpdateTracking(state.baseStore)\r\n      baseStore = E.setMdr(path, mdr, baseStore)\r\n      baseStore = E.validate(\"\", baseStore);\r\n      [updatePointer, baseStore] = E.endUpdateTracking(baseStore)\r\n      let store = evolve(baseStore, updatePointer, state.store)\r\n      store = E.validate(\"\", store)\r\n      return {...state, baseStore, store}\r\n    }, \r\n    onRadioChange: (ev:Event) => (state:UnmagicalState, actions:UnmagicalActions) => {\r\n      const path = (ev.currentTarget as HTMLElement).dataset.mgPath\r\n      const value = ev.currentTarget[(ev.currentTarget as HTMLElement).dataset.mgValueAttribute]\r\n      const npath = normalizePath(path)\r\n      const mdr0 = {...E.getMdr(path, state.baseStore), touched:true}\r\n      const mdr = coerce(value, mdr0, schemaDb[npath])\r\n      let updatePointer\r\n      let baseStore = E.beginUpdateTracking(state.baseStore)\r\n      baseStore = E.setMdr(path, mdr, baseStore)\r\n      baseStore = E.validate(\"\", baseStore);\r\n      [updatePointer, baseStore] = E.endUpdateTracking(baseStore)\r\n      let store = evolve(baseStore, updatePointer, state.store)\r\n      store = E.validate(\"\", store)\r\n      return {...state, baseStore, store}\r\n    }, \r\n    onCheckboxChange: (ev:Event) => (state:UnmagicalState, actions:UnmagicalActions) => {\r\n      const path = (ev.currentTarget as HTMLElement).dataset.mgPath\r\n      const checked = ev.currentTarget[(ev.currentTarget as HTMLElement).dataset.mgCheckedAttribute]\r\n      const value = checked ? \"true\" : \"false\"\r\n      const npath = normalizePath(path)\r\n      const mdr0 = {...E.getMdr(path, state.baseStore), touched:true}\r\n      const mdr = coerce(value, mdr0, schemaDb[npath])\r\n      let updatePointer\r\n      let baseStore = E.beginUpdateTracking(state.baseStore)\r\n      baseStore = E.setMdr(path, mdr, baseStore)\r\n      baseStore = E.validate(\"\", baseStore);\r\n      [updatePointer, baseStore] = E.endUpdateTracking(baseStore)\r\n      let store = evolve(baseStore, updatePointer, state.store)\r\n      store = E.validate(\"\", store)\r\n      return {...state, baseStore, store}\r\n    }, \r\n    onSmartControlChange: (pair:{path:string,input:string}|[{path:string,input:string}]) => (state:UnmagicalState, actions:UnmagicalActions) => {\r\n      const pairs = Array.isArray(pair) ? pair : [pair]\r\n      let updatePointer\r\n      let baseStore = E.beginUpdateTracking(state.baseStore)\r\n      for (let i = 0; i < pairs.length; i++) {\r\n        const {path, input} = pairs[i]\r\n        const mdr0 = {...E.getMdr(path, baseStore), touched:true}\r\n        const mdr = coerce(input, mdr0, schemaDb[normalizePath(path)])\r\n        baseStore = E.setMdr(path, mdr, baseStore)\r\n      }\r\n      baseStore = E.validate(\"\", baseStore);\r\n      [updatePointer, baseStore] = E.endUpdateTracking(baseStore)\r\n      let store = evolve(baseStore, updatePointer, state.store)\r\n      store = E.validate(\"\", store)\r\n      return {...state, baseStore, store}\r\n    }, \r\n    onUpdate: (ev:Event|{update:string,context:any[]}) => (state:UnmagicalState, actions:UnmagicalActions) => {\r\n      const update = ('currentTarget' in ev) ? (ev.currentTarget as HTMLElement).dataset.mgUpdate : ev.update\r\n      const context = ('currentTarget' in ev) ? JSON.parse((ev.currentTarget as HTMLElement).dataset.mgContext || \"null\") : ev.context\r\n      let updatePointer:string\r\n      let baseStore = E.beginUpdateTracking(state.baseStore)\r\n      baseStore = E.setPortal((store0) => {baseStore = store0}, actions.onPromiseThen, baseStore)\r\n      const func = updates[update] || updateEnabledApis[update]\r\n      if (! func) throw new Error('onUpdate/0: no update or unknown update')\r\n      if (! Array.isArray(context)) throw new Error('onUpdate/1: parameter must be an array')\r\n      if (context.length + 1 != func.length) throw new Error('onUpdate/2: bad number of parameters')\r\n      const res = func.apply(null, [...context, baseStore])\r\n      baseStore = E.setPortal(null, null, E.isStore(res) ? res : baseStore)\r\n      baseStore = E.validate(\"\", baseStore);\r\n      [updatePointer, baseStore] = E.endUpdateTracking(baseStore)\r\n      let store = state.store\r\n      if (! E.isSame(state.baseStore, baseStore)) {\r\n        store = evolve(baseStore, updatePointer, store)\r\n        store = E.validate(\"\", store)\r\n      }\r\n      return {...state, baseStore, store}\r\n    }, \r\n    onPromiseSettle: (ev:Event|{name:string,result:any}) => (state:UnmagicalState, actions:UnmagicalActions) => {\r\n      const name = ('currentTarget' in ev) ? (ev.currentTarget as HTMLElement).dataset.mgName : ev.name\r\n      const result = ('currentTarget' in ev) ? JSON.parse((ev.currentTarget as HTMLElement).dataset.mgResult || \"null\") : ev.result\r\n      const extra = E.getExtra(name, state.baseStore) as DialogState\r\n      if (! extra || ! extra.fulfill) throw new Error('onPromiseSettle/0: no callback or unknown callback')\r\n      // Calling fulfill() will cause the process to re-enter the hyperapp, \r\n      // so we call fulfill() not now but in a different opportunity.\r\n      setTimeout(() => {\r\n        extra.fulfill(result)\r\n      }, 0)\r\n      return null  // indicating no update.\r\n    }, \r\n    onPromiseThen: (context:OnPromiseThenParam) => (state:UnmagicalState, actions:UnmagicalActions) => {\r\n      let updatePointer:string\r\n      let baseStore = E.beginUpdateTracking(state.baseStore)\r\n      baseStore = E.setPortal((store0) => {baseStore = store0}, actions.onPromiseThen, baseStore)\r\n      const res = context.handler(context.result, baseStore)\r\n      baseStore = E.setPortal(null, null, E.isStore(res) ? res : baseStore)\r\n      baseStore = E.validate(\"\", baseStore);\r\n      [updatePointer, baseStore] = E.endUpdateTracking(baseStore)\r\n      let store = state.store\r\n      if (! E.isSame(state.baseStore, baseStore)) {\r\n        store = evolve(baseStore, updatePointer, store)\r\n        store = E.validate(\"\", store)\r\n      }\r\n      if (! E.isStore(res)) {\r\n        context.ret(res)\r\n      }\r\n      return {...state, baseStore, store}\r\n    }\r\n  }\r\n\r\n  let updatePointer:string\r\n  let baseStore = E.makeStore(data, schemaDb, validate, true)\r\n  baseStore = E.validate(\"\", baseStore);\r\n  [updatePointer, baseStore] = E.endUpdateTracking(baseStore)\r\n  let store = evolve(baseStore, updatePointer, null)\r\n  store = E.validate(\"\", store)\r\n  const state:UnmagicalState = {\r\n    baseStore, \r\n    store, \r\n    normalizeError\r\n  }\r\n  const view1:HaView<UnmagicalState, UnmagicalActions> = (state, actions) => render(state.store) as VNode\r\n  const actions = app(state, actions0, view1, containerEl)\r\n  return {\r\n    onUpdate: actions.onUpdate, \r\n  }\r\n}\r\n\r\n/**\r\n * @category once\r\n */\r\nexport type OnceParameter = {\r\n  data: Json, \r\n  schema: Schema, \r\n  evolve?: Evolve, \r\n  rules?: Rules\r\n}\r\n\r\n/**\r\n * Runs headless Unmagical once. Thus you can obtain the evolved store from data.\r\n * @category once\r\n */\r\nexport const once = (\r\n    {\r\n      data, \r\n      schema, \r\n      evolve = null, \r\n      rules = null\r\n    }:OnceParameter):Store => {\r\n  // complements reasonable defaults\r\n  if (! evolve) evolve = (store, _pointer, _prevStore) => store\r\n  const validate = S.validate(rules || S.defaultRules)\r\n\r\n  const schemaDb = S.buildDb(schema)\r\n  \r\n  let updatePointer\r\n  let baseStore = E.makeStore(data, schemaDb, validate, true)\r\n  baseStore = E.validate(\"\", baseStore);\r\n  [updatePointer, baseStore] = E.endUpdateTracking(baseStore)\r\n  let store = evolve(baseStore, updatePointer, null)\r\n  store = E.validate(\"\", store)\r\n  return store\r\n}\r\n\r\n/**\r\n * \r\n * @category Entries\r\n */\r\nexport const h = h0\r\n","\r\nimport { API, h, UnmagicalState, UnmagicalActions, UnmagicalAction } from './framework'\r\nexport { API, h, UnmagicalActions, UnmagicalAction } from './framework'\r\nimport * as X from './errors'\r\nimport {VNode, Component, Children, View} from 'hyperapp'\r\nimport { Json } from './schema'\r\n\r\n/**\r\n * `oncreate` lifecycle hook.\r\n * @category Types\r\n */\r\nexport type OnCreateFunc = (el:Element) => void\r\n\r\n/**\r\n * `onremove` lifecycle hook.\r\n */\r\nexport type OnRemoveFunc = (el:Element, done:() => void) => void\r\n\r\n/**\r\n * `ondestroy` lifecycle hook.\r\n */\r\nexport type OnDestroyFunc = (el:Element) => void\r\n\r\n/**\r\n * @category Types\r\n */\r\nexport type UnmagicalComponent<Attributes> = Component<Attributes,any,any>\r\n\r\n/**\r\n * @category Types\r\n */\r\nexport type NodeName<A> = UnmagicalComponent<A> | string\r\n\r\n/**\r\n * @category Types\r\n */\r\nexport type Hoc<A> = (c:NodeName<A>) => UnmagicalComponent<A>\r\n\r\n/**\r\n * @category Types\r\n */\r\nexport {VNode} from 'hyperapp'\r\n\r\n\r\n/**\r\n * @category Entries\r\n */\r\nexport const suspendRoot = () => {\r\n  const rootEl = document.documentElement\r\n  const c = +rootEl.dataset.mgSuspendCount\r\n  if (!c || c < 1) {\r\n    rootEl.dataset.mgSuspendCount = \"\" + 1\r\n    rootEl.style.overflow = \"hidden\"\r\n  } else {\r\n    rootEl.dataset.mgSuspendCount = \"\" + (c - 1)\r\n  }\r\n}\r\n\r\n/**\r\n * @category Entries\r\n */\r\nexport const resumeRoot = () => {\r\n  const rootEl = document.documentElement\r\n  const c = +rootEl.dataset.mgSuspendCount\r\n  if (c <= 1) {\r\n    delete rootEl.dataset.mgSuspendCount\r\n    rootEl.style.overflow = null\r\n  } else {\r\n    rootEl.dataset.mgSuspendCount = \"\" + (c + 1)\r\n  }\r\n}\r\n\r\n/**\r\n * @category Entries\r\n */\r\nexport const prepareToDestroy = (el:Element, anim:Animation, done:() => void) => {\r\n  const tid = setTimeout(() => {\r\n    done()\r\n    anim.onfinish = null\r\n  }, 800)\r\n  anim.onfinish = () => {\r\n    done()\r\n    clearTimeout(tid)\r\n  }\r\n}\r\n\r\n/**\r\n * @category Entries\r\n */\r\nexport const compose = <Attrs>(p1:Hoc<Attrs>, p2:Hoc<Attrs>):Hoc<Attrs> => (C) => {\r\n  return (props, children) => (state, actions) => {\r\n    const more = (props, children) => {\r\n      const i = p1(C)(props, children)\r\n      return (typeof i == 'function') ? i(state, actions) : i\r\n    }\r\n    const i = p2(more)(props, children)\r\n    const x = (typeof i == 'function') ? i(state, actions) : i\r\n    if (x) return x\r\n    const i2 = p1(C)(props, children)\r\n    return (typeof i == 'function') ? i(state, actions) : i\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/*\r\nThe following code is left as it may be used in the future.\r\n\r\nexport const playSmartControl = (C, map = {}) => {\r\n  map = {...defaultAttributeMap.smartControl, ...map}\r\n  return (props, children) => (state, actions) => {\r\n    const {...attributes} = props\r\n    const path = props['mg-path']\r\n    const mdr = API.getMdr(path, state.store)\r\n    if (! mdr) return null\r\n    attributes[map.onchange] = actions.onSmartControlChange\r\n    addAttr(attributes, map.value, mdr.input)\r\n    addClass(attributes, map.class, map.fixedClass)\r\n    return h(C, attributes, ...children)\r\n  }\r\n}\r\n*/\r\n\r\n\r\n/**\r\n * Properties users provide to Textbox component.\r\n * @category Textbox\r\n */\r\nexport type TextboxExtraProps = {\r\n  /**\r\n   * Json path to the value, which bound to a Textbox.\r\n   */\r\n  path: string\r\n}\r\n\r\n/**\r\n * Properties an implementor of Textbox get.\r\n * @category Textbox\r\n */\r\nexport type TextboxAutoProps = {\r\n  /**\r\n   * Unmagical will use this property. Please render as is.\r\n   */\r\n  'data-mg-path' :string, \r\n  /**\r\n   * Unmagical will use this property. Please render as is.\r\n   */\r\n  'data-mg-value-attribute' :string, \r\n  /**\r\n   * Unmagical will use this property. Please render as is.\r\n   */\r\n  oninput :UnmagicalAction<Event>, \r\n  /**\r\n   * Unmagical will use this property. Please render as is.\r\n   */\r\n  onblur :UnmagicalAction<Event>, \r\n  /**\r\n   * Unmagical will use this property. Please render as is.\r\n   */\r\n  value :string, \r\n  /**\r\n   * True if the validation of an input string failed.\r\n   */ \r\n  invalid :boolean, \r\n  /**\r\n   * An error message of the validation. An empty string if the validation succeeded.\r\n   */\r\n  message :string\r\n}\r\n\r\n/**\r\n * Assigns Textbox role to a node.\r\n * \r\n * @param C A component or tagName to which you give the Textbox role\r\n * @returns A component, which plays the Textbox\r\n * @category Textbox\r\n */\r\nexport const playTextbox = <OtherAttrs extends {}>(C:NodeName<TextboxAutoProps & OtherAttrs>):Component<TextboxExtraProps & OtherAttrs> => {\r\n  return (props, children:Children[]) => (state:UnmagicalState, actions:UnmagicalActions) => {\r\n    const {path, ...attributes} = props\r\n    const mdr = API.getMdr(path, state.store)\r\n    if (! mdr) return null\r\n    const invalid = ((mdr.touched || false) && (mdr.invalid || false))\r\n    const attrs:TextboxAutoProps = {\r\n      ...attributes, \r\n      'data-mg-path': path, \r\n      'data-mg-value-attribute': 'value', \r\n      oninput: actions.onTextboxInput, \r\n      onblur: actions.onTextboxBlur, \r\n      value: mdr.input, \r\n      invalid, \r\n      message: mdr.error ? state.normalizeError(mdr.error).message : ''\r\n    } \r\n    return h(C, attrs, ...children) as VNode\r\n  }\r\n}\r\n\r\n/**\r\n * @category Slider\r\n */\r\nexport type SliderExtraProps = {\r\n  path: string\r\n}\r\n\r\n/**\r\n * @category Slider\r\n */\r\nexport type SliderAutoProps = {\r\n  'data-mg-path': string, \r\n  'data-mg-value-attribute': string, \r\n  oninput: UnmagicalAction<Event>, \r\n  onchange: UnmagicalAction<Event>, \r\n  value: string, \r\n  invalid: boolean, \r\n  message: string\r\n}\r\n\r\n/**\r\n * @category Slider\r\n */\r\nexport const playSlider = <OtherAttrs extends {}>(C:NodeName<SliderAutoProps & OtherAttrs>):UnmagicalComponent<SliderExtraProps & OtherAttrs> => {\r\n  return (props, children) => (state, actions) => {\r\n    const {path, ...attributes} = props\r\n    const mdr = API.getMdr(path, state.store)\r\n    if (! mdr) return null\r\n    const invalid = ((mdr.touched || false) && (mdr.invalid || false))\r\n    const attrs:SliderAutoProps = {\r\n      ...attributes, \r\n      'data-mg-path': path, \r\n      'data-mg-value-attribute': 'value', \r\n      oninput: actions.onSliderInput, \r\n      onchange: actions.onSliderChange, \r\n      value: mdr.input, \r\n      invalid, \r\n      message: mdr.error ? state.normalizeError(mdr.error).message : ''\r\n    } \r\n    return h(C, attrs, ...children) as VNode\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @category Listbox\r\n */\r\nexport type ListboxExtraProps = {\r\n  path: string\r\n}\r\n\r\n/**\r\n * @category Listbox\r\n */\r\nexport type ListboxAutoProps = {\r\n  'data-mg-path': string, \r\n  'data-mg-value-attribute': string, \r\n  onchange: UnmagicalAction<Event>, \r\n  invalid: boolean, \r\n  message: string, \r\n  value: string\r\n}\r\n\r\n/**\r\n * \r\n * @param C \r\n * @category Listbox\r\n */\r\nexport const playListbox = <OtherAttrs extends {}>(C:NodeName<ListboxAutoProps & OtherAttrs>):UnmagicalComponent<ListboxExtraProps & OtherAttrs> => {\r\n  return (props, children) => (state, actions) => {\r\n    const {path, ...attributes} = props\r\n    const mdr = API.getMdr(path, state.store)\r\n    if (! mdr) return null\r\n    const invalid = ((mdr.touched || false) && (mdr.invalid || false))\r\n    const attrs:ListboxAutoProps = {\r\n      ...attributes, \r\n      'data-mg-path': path, \r\n      'data-mg-value-attribute': 'value', \r\n      onchange: actions.onListboxChange, \r\n      invalid, \r\n      message: mdr.error ? state.normalizeError(mdr.error).message : '', \r\n      value: mdr.input\r\n    }\r\n    return h(C, attrs, ...children) as VNode\r\n  }\r\n}\r\n\r\n/**\r\n * @category Radio\r\n */\r\nexport type RadioExtraProps = {\r\n  path: string, \r\n  value: string\r\n}\r\n\r\n/**\r\n * @category Radio\r\n */\r\nexport type RadioAutoProps = {\r\n  'data-mg-path': string, \r\n  'data-mg-value-attribute': string, \r\n  onchange: UnmagicalAction<Event>, \r\n  checked: boolean, \r\n  invalid: boolean, \r\n  message: string, \r\n  value: string\r\n}\r\n\r\n/**\r\n * @category Radio\r\n * @param C \r\n */\r\nexport const playRadio = <OtherAttrs extends {}>(C:NodeName<RadioAutoProps & OtherAttrs>):UnmagicalComponent<RadioExtraProps & OtherAttrs> => {\r\n  return (props, children:Children[]) => (state, actions) => {\r\n    const {path, value, ...attributes} = props\r\n    const mdr = API.getMdr(path, state.store)\r\n    if (! mdr) return null\r\n    const invalid = ((mdr.touched || false) && (mdr.invalid || false))\r\n    const attrs:RadioAutoProps = {\r\n      ...attributes, \r\n      'data-mg-path': path, \r\n      'data-mg-value-attribute': 'value', \r\n      onchange: actions.onRadioChange, \r\n      checked: value == mdr.value, \r\n      invalid, \r\n      message: mdr.error ? state.normalizeError(mdr.error).message : '', \r\n      value\r\n    }\r\n    return h(C, attrs, ...children) as VNode\r\n  }\r\n}\r\n\r\n/**\r\n * @category Checkbox\r\n */\r\nexport type CheckboxExtraProps = {\r\n  path: string\r\n}\r\n\r\n/**\r\n * @category Checkbox\r\n */\r\nexport type CheckboxAutoProps = {\r\n  'data-mg-path': string, \r\n  'data-mg-checked-attribute': string, \r\n  onchange: UnmagicalAction<Event>, \r\n  checked: boolean, \r\n  invalid: boolean, \r\n  message: string\r\n}\r\n\r\n/**\r\n * @category Checkbox\r\n * @param C \r\n */\r\nexport const playCheckbox = <OtherAttrs extends {}>(C:NodeName<CheckboxAutoProps & OtherAttrs>):UnmagicalComponent<CheckboxExtraProps & OtherAttrs> => {\r\n  return (props, children:Children[]) => (state, actions) => {\r\n    const {path, ...attributes} = props\r\n    const mdr = API.getMdr(path, state.store)\r\n    if (! mdr) return null\r\n    const invalid = ((mdr.touched || false) && (mdr.invalid || false))\r\n    const attrs:CheckboxAutoProps = {\r\n      ...attributes, \r\n      'data-mg-path': path, \r\n      'data-mg-checked-attribute': 'checked', \r\n      onchange: actions.onCheckboxChange, \r\n      checked: mdr.value as boolean, \r\n      invalid, \r\n      message: mdr.error ? state.normalizeError(mdr.error).message : ''\r\n    }\r\n    return h(C, attrs, ...children) as VNode\r\n  }\r\n}\r\n\r\n/**\r\n * @category UpdateButton\r\n */\r\nexport type UpdateButtonExtraProps = {\r\n  update: string, \r\n  context: Json\r\n}\r\n\r\n/**\r\n * @category UpdateButton\r\n */\r\nexport type UpdateButtonAutoProps = {\r\n  'data-mg-update': string, \r\n  'data-mg-context': string, \r\n  onclick: UnmagicalAction<Event>\r\n}\r\n\r\n/**\r\n * @category UpdateButton\r\n */\r\nexport const playUpdateButton = <OtherAttrs extends {}>(C:NodeName<UpdateButtonAutoProps & OtherAttrs>):UnmagicalComponent<UpdateButtonExtraProps & OtherAttrs> => {\r\n  return (props, children) => (state, actions) => {\r\n    const {update, context, ...attributes} = props\r\n    const attrs:UpdateButtonAutoProps = {\r\n      ...attributes, \r\n      'data-mg-update': update, \r\n      'data-mg-context': JSON.stringify(typeof context == \"undefined\" ? null : context), \r\n      onclick: actions.onUpdate\r\n    }\r\n    return h(C, attrs, ...children) as VNode\r\n  }\r\n}\r\n\r\n/**\r\n * @category SettleButton\r\n */\r\nexport type SettleButtonExtraProps = {\r\n  name: string, \r\n  result: Json\r\n}\r\n\r\n/**\r\n * @category SettleButton\r\n */\r\nexport type SettleButtonAutoProps = {\r\n  'data-mg-name': string, \r\n  'data-mg-result': string, \r\n  onclick: UnmagicalAction<Event>\r\n}\r\n\r\n/**\r\n * @category SettleButton\r\n */\r\nexport const playSettleButton = <OtherAttrs extends {}>(C:NodeName<SettleButtonAutoProps & OtherAttrs>):UnmagicalComponent<SettleButtonExtraProps & OtherAttrs> => {\r\n  return (props, children) => (state, actions) => {\r\n    const {name, result, ...attributes} = props\r\n    const attrs:SettleButtonAutoProps = {\r\n      ...attributes, \r\n      'data-mg-name': name, \r\n      'data-mg-result': JSON.stringify(typeof result == \"undefined\" ? null : result), \r\n      onclick: actions.onPromiseSettle\r\n    }\r\n    return h(C, attrs, ...children) as VNode\r\n  }\r\n}\r\n\r\n/**\r\n * @category Field\r\n */\r\nexport type FieldExtraProps = {\r\n  path: string, \r\n  foldValidity?: boolean\r\n}\r\n\r\n/**\r\n * @category Field\r\n */\r\nexport type FieldAutoProps = {\r\n  invalid: boolean, \r\n  message: string\r\n}\r\n\r\n/**\r\n * \r\n * @param C \r\n * @category Field\r\n */\r\nexport const playField = <OtherAttrs extends {}>(C:NodeName<FieldAutoProps & OtherAttrs>):UnmagicalComponent<FieldExtraProps & OtherAttrs> => {\r\n  return (props, children) => (state, actions) => {\r\n    const {path, foldValidity = false, ...attributes} = props\r\n    if (! API.test(path, state.store)) return null\r\n    const mdr = API.getMdr(path, state.store)\r\n    const {invalid, error} = foldValidity ? API.foldValidity(path, state.store) : {invalid:mdr.invalid && mdr.touched, error:mdr.error}\r\n    const attrs:FieldAutoProps = {\r\n      ...attributes, \r\n      invalid, \r\n      message: error ? state.normalizeError(error).message : ''\r\n    }\r\n    return h(C, attrs, ...children) as VNode\r\n  }\r\n}\r\n\r\nconst dialogOnCreate:Record<string,OnCreateFunc> = {\r\n  fade: (el:Element):void => {\r\n    suspendRoot()\r\n    el.animate([\r\n      {opacity: 0}, \r\n      {opacity: 1}\r\n    ], 200)\r\n  }, \r\n  scale: (el:Element):void => {\r\n    suspendRoot()\r\n    el.animate([\r\n      {transform: 'scale(0.8)'}, \r\n      {transform: 'scale(1)'}\r\n    ])\r\n  }\r\n}\r\n\r\nconst dialogOnRemove:Record<string,OnRemoveFunc> = {\r\n  fade: (el:Element, done:() => void):void => {\r\n    resumeRoot()\r\n    const anim = el.animate([\r\n      {opacity: 1}, \r\n      {opacity: 0}\r\n    ], 200)\r\n    prepareToDestroy(el, anim, done)\r\n  }, \r\n  scale: (el:Element, done:() => void):void => {\r\n    resumeRoot()\r\n    const anim = el.animate([\r\n      {transform: 'scale(1)'}, \r\n      {transform: 'scale(0.8)'}\r\n    ], 200)\r\n    prepareToDestroy(el, anim, done)\r\n  }\r\n}\r\n\r\n/**\r\n * @category Dialog\r\n */\r\nexport type DialogExtraProps = {\r\n  name: string\r\n}\r\n\r\n/**\r\n * @category Dialog\r\n */\r\nexport type DialogAutoProps = {\r\n  name: string, \r\n  data: any, \r\n  oncreate: OnCreateFunc, \r\n  onremove: OnRemoveFunc, \r\n  shown: boolean\r\n}\r\n\r\n/**\r\n * @category Dialog\r\n */\r\nexport const playDialog = (transition:\"fade\"|\"scale\", nullIfHidden:boolean) => <OtherAttrs extends {}>(C:NodeName<DialogAutoProps & OtherAttrs>):UnmagicalComponent<DialogExtraProps & OtherAttrs> => {\r\n  return (props, children) => (state, actions) => {\r\n    const attributes = props\r\n    const name = attributes.name\r\n    const data = API.getDialog(name, state.store)\r\n    if (nullIfHidden && data === null) return null\r\n    const attrs:DialogAutoProps = {\r\n      ...attributes, \r\n      data, \r\n      oncreate: dialogOnCreate[transition], \r\n      onremove: dialogOnRemove[transition], \r\n      shown: (data !== null)\r\n    }\r\n    return h(C, attrs, ...children) as VNode\r\n  }\r\n}\r\n\r\nconst feedbackOnCreate:Record<string,OnCreateFunc> = {\r\n  fade: (el) => {\r\n    el.animate([\r\n      {opacity: 0}, \r\n      {opacity: 1}\r\n    ], 200)\r\n    el.scrollIntoView()\r\n  }, \r\n  zoom: (el) => {\r\n    el.animate([\r\n      {transform: 'scale(0.8)'}, \r\n      {transform: 'scale(1)'}\r\n    ], 200)\r\n    el.scrollIntoView()\r\n  }, \r\n  slide: (el) => {\r\n    const r = el.getBoundingClientRect()\r\n    el.animate([\r\n      {offset:0, maxHeight: 0}, \r\n      {offset:0.999, maxHeight: ((r.height * 1.2) + 30) + 'px'}, \r\n      {offset:1, maxHeight:'none'}\r\n    ], 200)\r\n    el.scrollIntoView()\r\n  }\r\n}\r\nconst feedbackOnRemove:Record<string,OnRemoveFunc> = {\r\n  fade: (el, done) => {\r\n    const anim = el.animate([\r\n      {opacity: 1}, \r\n      {opacity: 0}\r\n    ], 200)\r\n    prepareToDestroy(el, anim, done)\r\n  }, \r\n  zoom: (el, done) => {\r\n    const anim = el.animate([\r\n      {transform: 'scale(1)'}, \r\n      {transform: 'scale(0.8)'}\r\n    ], 200)\r\n    prepareToDestroy(el, anim, done)\r\n  }, \r\n  slide: (el, done) => {\r\n    const r = el.getBoundingClientRect()\r\n    const anim = el.animate([\r\n      {maxHeight: ((r.height * 1.2) + 30) + 'px'}, \r\n      {maxHeight: 0}\r\n    ], 200)\r\n    prepareToDestroy(el, anim, done)\r\n  }\r\n}\r\n\r\n/**\r\n * @category Feedback\r\n */\r\nexport type FeedbackExtraProps = {\r\n  name: string, \r\n  duration?: number\r\n}\r\n\r\n/**\r\n * @category Feedback\r\n */\r\nexport type FeedbackAutoProps = {\r\n  name: string, \r\n  data: any, \r\n  shown: boolean, \r\n  oncreate: OnCreateFunc, \r\n  onremove: OnRemoveFunc\r\n}\r\n\r\n/**\r\n * @category Feedback\r\n */\r\nexport const playFeedback = (transition:\"fade\"|\"zoom\"|\"slide\", nullIfHidden:boolean) => <OtherAttrs extends {}>(C:NodeName<FeedbackAutoProps & OtherAttrs>):UnmagicalComponent<FeedbackExtraProps & OtherAttrs> => {\r\n  return (props, children) => (state, actions) => {\r\n    const {duration = 0, ...attributes} = props\r\n    const name = attributes.name\r\n    const data = API.getFeedback(name, state.store)\r\n    if (nullIfHidden && data === null) return null\r\n    const attrs:FeedbackAutoProps = {\r\n      ...attributes, \r\n      data: ('code' in data) ? state.normalizeError(data) : data, \r\n      shown: data !== null, \r\n      oncreate: feedbackOnCreate[transition], \r\n      onremove: feedbackOnRemove[transition]\r\n    }\r\n    if (duration > 0) {\r\n      let timeoutId = null\r\n      const oncreate = attrs.oncreate\r\n      attrs.oncreate = (el) => {\r\n        timeoutId = setTimeout(() => actions.onUpdate({update:\"closeFeedback\", context:[name]}), duration)\r\n        if (oncreate) oncreate(el)\r\n      }\r\n      const onremove = attrs.onremove\r\n      attrs.onremove = (el, done) => {\r\n        if (timeoutId) {\r\n          clearTimeout(timeoutId)\r\n        }\r\n        if (onremove) onremove(el, done)\r\n      }\r\n    }\r\n    return h(C, attrs, ...children) as VNode\r\n  }\r\n}\r\n\r\n/**\r\n * @category Modal\r\n */\r\nexport type ModalExtraProps = {\r\n  shown: boolean\r\n}\r\n\r\n/**\r\n * @category Modal\r\n */\r\nexport type ModalAutoProps = {\r\n  shown: boolean, \r\n  oncreate: OnCreateFunc, \r\n  onremove: OnRemoveFunc\r\n}\r\n\r\n/**\r\n * @category Modal\r\n */\r\nexport const playModal = (transition:\"fade\"|\"scale\", nullIfHidden:boolean) => <OtherAttrs extends {}>(C:NodeName<ModalAutoProps & OtherAttrs>):UnmagicalComponent<ModalExtraProps & OtherAttrs> => {\r\n  return (props, children) => (state, actions) => {\r\n    const attributes = props\r\n    if (! attributes.shown && nullIfHidden) return null\r\n    const attrs:ModalAutoProps = {\r\n      ...attributes, \r\n      oncreate: dialogOnCreate[transition], \r\n      onremove: dialogOnRemove[transition]\r\n    }\r\n    return h(C, attrs, ...children) as VNode\r\n  }\r\n}\r\n\r\n/**\r\n * @category Progress\r\n */\r\nexport type ProgressExtraProps = {\r\n  name: string\r\n}\r\n\r\n/**\r\n * @category Progress\r\n */\r\nexport type ProgressAutoProps = {\r\n  name: string, \r\n  shown: boolean, \r\n  current: number|undefined\r\n}\r\n\r\n/**\r\n * @category Progress\r\n */\r\nexport const playProgress = (nullIfHidden:boolean) => <OtherAttrs extends {}>(C:NodeName<ProgressAutoProps & OtherAttrs>):UnmagicalComponent<ProgressExtraProps & OtherAttrs> => {\r\n  return (props, children) => (state, actions) => {\r\n    const attributes = props\r\n    const name = attributes.name\r\n    const current = API.getProgress(name, state.store)\r\n    if (current === null && nullIfHidden) return null\r\n    const attrs = {\r\n      ...attributes, \r\n      shown: current !== null, \r\n      current: (current === null) ? undefined : current\r\n    }\r\n    return h(C, attrs, ...children) as VNode\r\n  }\r\n}\r\n\r\n/**\r\n * @category Page\r\n */\r\nexport type PageExtraProps = {\r\n  index: number, \r\n  name: string\r\n}\r\n\r\n/**\r\n * @category Page\r\n */\r\nexport type PageAutoProps = {\r\n  index: number, \r\n  name: string, \r\n  shown: boolean\r\n}\r\n\r\n/**\r\n * @category Page\r\n */\r\nexport const playPage = (nullIfHidden:boolean) => <OtherAttrs extends {}>(C:NodeName<PageAutoProps & OtherAttrs>):UnmagicalComponent<PageExtraProps & OtherAttrs> => {\r\n  return (props, children) => (state, actions) => {\r\n    const attributes = props\r\n    const index = attributes.index\r\n    const name = attributes.name\r\n    const current = API.getPage(name, state.store)\r\n    const shown = (index == current)\r\n    if (! shown && nullIfHidden) return null\r\n    const attrs:PageAutoProps = {\r\n      ...attributes, \r\n      shown\r\n    }\r\n    return h(C, attrs, ...children) as VNode\r\n  }\r\n}\r\n\r\nconst listItemOnCreate:Record<string,OnCreateFunc> = {\r\n  fade: (el) => {\r\n    el.animate([\r\n      {opacity: 0}, \r\n      {opacity: 1}\r\n    ], 200)\r\n    el.scrollIntoView()\r\n  }, \r\n  slide: (el) => {\r\n    const r = el.getBoundingClientRect()\r\n    el.animate([\r\n      {offset:0, maxHeight: 0}, \r\n      {offset:0.999, maxHeight: ((r.height * 1.2) + 30) + 'px'}, \r\n      {offset:1, maxHeight:'none'}\r\n    ], 200)\r\n    el.scrollIntoView()\r\n  }\r\n}\r\nconst listItemOnRemove:Record<string,OnRemoveFunc> = {\r\n  fade: (el, done) => {\r\n    const anim = el.animate([\r\n      {opacity: 1}, \r\n      {opacity: 0}\r\n    ], 200)\r\n    prepareToDestroy(el, anim, done)\r\n  }, \r\n  slide: (el, done) => {\r\n    const r = el.getBoundingClientRect()\r\n    const anim = el.animate([\r\n      {maxHeight: ((r.height * 1.2) + 30) + 'px'}, \r\n      {maxHeight: 0}\r\n    ], 200)\r\n    prepareToDestroy(el, anim, done)\r\n  }\r\n}\r\n\r\n/**\r\n * @category Switch\r\n */\r\nexport type SwitchExtraProps = {\r\n  name: string\r\n}\r\n\r\n/**\r\n * @category Switch\r\n */\r\nexport type SwitchAutoProps = {\r\n  name: string, \r\n  shown: boolean\r\n}\r\n\r\n/**\r\n * @category Switch\r\n */\r\nexport const playSwitch = (nullIfHidden:boolean) => <OtherAttrs extends {}>(C:NodeName<SwitchAutoProps & OtherAttrs>):UnmagicalComponent<SwitchExtraProps & OtherAttrs> => {\r\n  return (props, children) => (state, actions) => {\r\n    const attributes = props\r\n    const name = attributes.name\r\n    const shown = API.getSwitch(name, state.store)\r\n    if (! shown && nullIfHidden) return null\r\n    const attrs = {\r\n      ...attributes, \r\n      shown\r\n    }\r\n    return h(C, attrs, ...children) as VNode\r\n  }\r\n}\r\n\r\n/**\r\n * @category ListItem\r\n */\r\nexport type ListItemExtraProps = {}\r\n\r\n/**\r\n * @category ListItem\r\n */\r\nexport type ListItemAutoProps = {\r\n  oncreate: OnCreateFunc, \r\n  onremove: OnRemoveFunc\r\n}\r\n\r\n/**\r\n * @category ListItem\r\n */\r\nexport const playListItem = (transition:\"fade\"|\"slide\") => <OtherAttrs extends {}>(C:NodeName<ListItemAutoProps & OtherAttrs>):UnmagicalComponent<ListItemExtraProps & OtherAttrs> => {\r\n  return (props, children) => (state, actions) => {\r\n    const attributes = props\r\n    const attrs:ListItemAutoProps = {\r\n      ...attributes, \r\n      oncreate: listItemOnCreate[transition], \r\n      onremove: listItemOnRemove[transition]\r\n    }\r\n    return h(C, attrs, ...children) as VNode\r\n  }\r\n}\r\n\r\nconst getSiblings = (pageNo:number, width:number, firstPageNo:number, lastPageNo:number):number[] => {\r\n  const rv = []\r\n  for (let i = pageNo - width; i <= pageNo + width; i++) {\r\n    if (i < firstPageNo) continue\r\n    if (i > lastPageNo) continue\r\n    rv.push(i)\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * @category Pagination\r\n */\r\nexport type PaginationExtraProps = {\r\n  listPath: string, \r\n  width?: number, \r\n  pageProperty?: string, \r\n  limitProperty?: string\r\n}\r\n\r\n/**\r\n * @category Pagination\r\n */\r\nexport type PaginationAutoProps = {\r\n  listPath: string, \r\n  current: number|null, \r\n  prev: number|null, \r\n  next: number|null, \r\n  first: number|null, \r\n  last: number|null, \r\n  siblings: number[]\r\n}\r\n\r\n/**\r\n * @category Pagination\r\n */\r\nexport const playPagination = <OtherAttrs extends {}>(C:NodeName<PaginationAutoProps & OtherAttrs>):UnmagicalComponent<PaginationExtraProps & OtherAttrs> => {\r\n  return (props, children) => (state, actions) => {\r\n    const {listPath, width = 2, pageProperty = 'page', limitProperty = 'limit', ...attributes} = props\r\n    const query = API.extract(listPath + '/query', state.store)\r\n    const totalCount = +API.extract(listPath + '/totalCount', state.store)\r\n    const page = query[pageProperty]\r\n    if (totalCount > 0) {\r\n      const first = 1\r\n      const last = Math.ceil(totalCount / query[limitProperty])\r\n      const siblings = getSiblings(page, width, first, last)\r\n      const attrs:PaginationAutoProps = {\r\n        ...attributes, \r\n        listPath, \r\n        current: page, \r\n        prev: first < page ? page - 1 : null, \r\n        next: page < last ? page + 1 : null, \r\n        first: first < page - width ? first : null, \r\n        last: page + width < last ? last : null, \r\n        siblings\r\n      }\r\n      return h(C, attrs, ...children) as VNode\r\n    } else {\r\n      const attrs:PaginationAutoProps = {\r\n        ...attributes, \r\n        listPath, \r\n        current: null, \r\n        prev: null, \r\n        next: null, \r\n        first: null, \r\n        last: null, \r\n        siblings: []\r\n      }\r\n      return h(C, attrs, ...children) as VNode\r\n    }\r\n  }\r\n}\r\n\r\nconst instantiateFlatpickr = (path:string, onchange:UnmagicalAction<{path:string,input:string}|[{path:string,input:string}]>, defaultValue:string, clearerId:string, config:object):{oncreate:OnCreateFunc,ondestroy:OnDestroyFunc} => {\r\n  let instance = null\r\n  return {\r\n    oncreate: (el) => {\r\n      const cfg = {\r\n        ...config, \r\n        defaultDate: defaultValue || null\r\n      }\r\n      // @ts-ignore\r\n      instance = flatpickr(el, cfg)\r\n      instance.config.onChange.push((selectedDates, dateStr:string) => {\r\n        onchange({path, input:dateStr})\r\n      })\r\n      if (clearerId) {\r\n        const clearer = document.getElementById(clearerId)\r\n        if (clearer) {\r\n          clearer.onclick = instance.clear\r\n        }\r\n      }\r\n    }, \r\n    ondestroy: (el) => {\r\n      if (instance) {\r\n        instance.destroy()\r\n        instance = null\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @category Flatpickr\r\n */\r\nexport type FlatpickrExtraProps = {\r\n  path: string, \r\n  clearerId: string|null, \r\n  config: object\r\n}\r\n\r\n/**\r\n * @category Flatpickr\r\n */\r\nexport type FlatpickrAutoProps = {\r\n  invalid: boolean, \r\n  message: string, \r\n  oncreate: OnCreateFunc, \r\n  ondestroy: OnDestroyFunc\r\n}\r\n\r\n/**\r\n * @category Flatpickr\r\n */\r\nexport const playFlatpickr = <OtherAttrs extends {}>(C:NodeName<FlatpickrAutoProps & OtherAttrs>):UnmagicalComponent<FlatpickrExtraProps & OtherAttrs> => {\r\n  return (props, children) => (state, actions) => {\r\n    const {path, clearerId = null, config = {}, ...attributes} = props\r\n    const mdr = API.getMdr(path, state.store)\r\n    if (! mdr) return null\r\n    const {oncreate, ondestroy} = instantiateFlatpickr(path, actions.onSmartControlChange, mdr.input, clearerId, config)\r\n    const invalid = ((mdr.touched || false) && (mdr.invalid || false))\r\n    const attrs:FlatpickrAutoProps = {\r\n      ...attributes, \r\n      invalid, \r\n      message: mdr.error ? state.normalizeError(mdr.error).message : '', \r\n      oncreate, \r\n      ondestroy\r\n    }\r\n    return h(C, attrs, ...children) as VNode\r\n  }\r\n}\r\n\r\nconst instantiatePickr = (path:string, onchange:UnmagicalAction<{path:string,input:string}|[{path:string,input:string}]>, defaultValue:string, clearerId:string, options:object):{oncreate:OnCreateFunc, ondestroy:OnDestroyFunc} => {\r\n  let instance = null\r\n  return {\r\n    oncreate: (el) => {\r\n      const opts = {\r\n        ...options, \r\n        useAsButton: true, \r\n        default: defaultValue || null, \r\n        el\r\n      }\r\n      // @ts-ignore\r\n      instance = Pickr.create(opts)\r\n      instance.on('clear', () => {\r\n        onchange({path, input:''})\r\n      }).on('save', (color) => {\r\n        const input = color ? color.toHEXA().toString() : null\r\n        instance.hide()\r\n        onchange({path, input})\r\n      })\r\n      if (clearerId) {\r\n        const clearer = document.getElementById(clearerId)\r\n        if (clearer) {\r\n          clearer.onclick = (ev) => {\r\n            instance.setColor(null)\r\n          }\r\n        }\r\n      }\r\n    }, \r\n    ondestroy: (el) => {\r\n      if (instance) {\r\n        instance.destroy()\r\n        instance = null\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @category Pickr\r\n */\r\nexport type PickrExtraProps = {\r\n  path: string, \r\n  clearerId: string, \r\n  options: object\r\n}\r\n\r\n/**\r\n * @category Pickr\r\n */\r\nexport type PickrAutoProps = {\r\n  value: string, \r\n  invalid: boolean, \r\n  message: string, \r\n  oncreate: OnCreateFunc, \r\n  ondestroy: OnDestroyFunc\r\n}\r\n\r\n/**\r\n * @category Pickr\r\n */\r\nexport const playPickr = <OtherAttrs extends {}>(C:NodeName<PickrAutoProps & OtherAttrs>):UnmagicalComponent<PickrExtraProps & OtherAttrs> => {\r\n  return (props, children) => (state, actions) => {\r\n    const {path, clearerId = null, options = {}, ...attributes} = props\r\n    const mdr = API.getMdr(path, state.store)\r\n    if (! mdr) return null\r\n    const {oncreate, ondestroy} = instantiatePickr(path, actions.onSmartControlChange, mdr.input, clearerId, options)\r\n    const invalid = ((mdr.touched || false) && (mdr.invalid || false))\r\n    const attrs:PickrAutoProps = {\r\n      ...attributes, \r\n      value: mdr.input, \r\n      invalid, \r\n      message: mdr.error ? state.normalizeError(mdr.error).message : '', \r\n      oncreate, \r\n      ondestroy\r\n    }\r\n    return h(C, attrs, ...children) as VNode\r\n  }\r\n}\r\ninterface SortableEvent {\r\n  from: HTMLElement, \r\n  to: HTMLElement, \r\n  item: HTMLElement, \r\n  oldIndex: number, \r\n  newIndex: number\r\n}\r\n\r\nconst instantiateSortable = (name:string, onStart:UnmagicalAction<{update:string,context:any[]}>, onEnd:UnmagicalAction<{name:string,result:any}>, options:object):{oncreate:OnCreateFunc, ondestroy:OnDestroyFunc} => {\r\n  var instance = null;\r\n  var marker = null;\r\n  var group = null;\r\n  const effectiveOptions = {\r\n    ...options, \r\n    onStart: (ev:SortableEvent) => {\r\n      const fromPath = ev.from.dataset.mgPath\r\n      marker = ev.item.nextElementSibling\r\n      onStart({\r\n        update: 'reorder', \r\n        context: [name, fromPath + '/' + ev.oldIndex, group]\r\n      })\r\n    }, \r\n    onEnd: (ev:SortableEvent) => {\r\n      setTimeout(function() {\r\n        ev.from.insertBefore(ev.item, marker)\r\n        marker = null\r\n      }, 0)\r\n      const toPath = ev.to.dataset.mgPath\r\n      onEnd({\r\n        name, \r\n        result: {\r\n          path: toPath + '/' + ev.newIndex\r\n        }\r\n      })\r\n    }\r\n  }\r\n  return {\r\n    oncreate: (el) => {\r\n      // @ts-ignore\r\n      instance = Sortable.create(el, effectiveOptions)\r\n      group = instance.option('group').name\r\n    }, \r\n    ondestroy: () => {\r\n      if (instance) {\r\n        instance.destroy()\r\n        instance = null\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @category Sortable\r\n */\r\nexport type SortableExtraProps = {\r\n  name: string, \r\n  path: string, \r\n  options: object\r\n}\r\n\r\n/**\r\n * @category Sortable\r\n */\r\nexport type SortableAutoProps = {\r\n  'data-mg-path': string, \r\n  active: boolean, \r\n  itemPath: string, \r\n  group: string, \r\n  oncreate: OnCreateFunc, \r\n  ondestroy: OnDestroyFunc\r\n}\r\n\r\n/**\r\n * @category Sortable\r\n */\r\nexport const playSortable = <OtherAttrs extends {}>(C:NodeName<SortableAutoProps & OtherAttrs>):UnmagicalComponent<SortableExtraProps & OtherAttrs> => {\r\n  return (props, children) => (state, actions) => {\r\n    const {name, path, options = {}, ...attributes} = props\r\n    const extra = API.getExtra(name, state.store) as {itemPath:string, group:string}\r\n    const active = !!extra\r\n    const {oncreate, ondestroy} = instantiateSortable(name, actions.onUpdate, actions.onPromiseSettle, options)\r\n    const attrs:SortableAutoProps = {\r\n      ...attributes, \r\n      'data-mg-path': path, \r\n      active, \r\n      itemPath: extra ? extra.itemPath : \"\", \r\n      group: extra ? extra.group : \"\", \r\n      oncreate, \r\n      ondestroy\r\n    }\r\n    return h(C, attrs, ...children) as VNode\r\n  }\r\n}\r\n\r\n\r\n\r\n","/**\r\n * REST client of Repository implmentation\r\n * \r\n * @module core/rest\r\n */\r\n\r\nimport {normalizeQuery} from './utils'\r\nimport {Repository} from './updates'\r\n\r\n/**\r\n * \r\n * @function\r\n * @private\r\n * @param {Response} response \r\n * @returns {Error}\r\n */\r\nconst responseToError = (response:Response):Error => {\r\n  const message = response.status + ' ' + response.statusText\r\n  const error = new Error(message)\r\n  error.name = 'http.' + response.status\r\n  return error\r\n}\r\n\r\nexport type MakeRestRepositoryOptions = {\r\n  idProperty?: string, \r\n  omitEmptyQueryParam?:boolean, \r\n  totalCountHeader?:string, \r\n  headers?:Record<string,string>, \r\n  optionsForSearch?:MakeRestRepositoryOptions, \r\n  optionsForAdd?:MakeRestRepositoryOptions, \r\n  optionsForUpdate?:MakeRestRepositoryOptions, \r\n  optionsForRemove?:MakeRestRepositoryOptions\r\n}\r\n\r\n/**\r\n * \r\n * @returns {Repository}\r\n */\r\nexport const makeRestRepository = (baseUrl:string, options:MakeRestRepositoryOptions = {}):Repository => {\r\n  const opts:MakeRestRepositoryOptions = {\r\n    idProperty: 'id', \r\n    omitEmptyQueryParam: true, \r\n    totalCountHeader: 'X-Total-Count', \r\n    optionsForSearch: {}, \r\n    optionsForAdd: {}, \r\n    optionsForUpdate: {}, \r\n    optionsForRemove: {}, \r\n    ...options\r\n  }\r\n  return {\r\n    search: (query) => {\r\n      const fetchOptions = {\r\n        method: 'GET', \r\n        mode: 'cors', \r\n        ...opts.optionsForSearch, \r\n        headers: {\r\n          'Content-Type': 'application/json', \r\n          ...(opts.optionsForSearch.headers || {})\r\n        }\r\n      }\r\n      const qs = new URLSearchParams(normalizeQuery(query, opts.omitEmptyQueryParam))\r\n      const url = baseUrl + '?' + qs.toString()\r\n      return fetch(url, fetchOptions as RequestInit)\r\n      .then(( /** @type {Response} */ response) => {\r\n        if (! response.ok) throw responseToError(response)\r\n        return response.json()\r\n        .then((entities) => {\r\n          const totalCount = +(response.headers.get(opts.totalCountHeader))\r\n          return {entities, totalCount}\r\n        })\r\n      })\r\n    }, \r\n    add: (entity) => {\r\n      const fetchOptions = {\r\n        method: 'POST', \r\n        mode: 'cors', \r\n        ...opts.optionsForAdd, \r\n        headers: {\r\n          'Content-Type': 'application/json', \r\n          ...(opts.optionsForAdd.headers || {})\r\n        }, \r\n        body: JSON.stringify(entity)\r\n      }\r\n      const url = baseUrl\r\n      return fetch(url, fetchOptions as RequestInit)\r\n      .then((/** @type {Response} */ response) => {\r\n        if (! response.ok) throw responseToError(response)\r\n        return response.json()\r\n      })\r\n    }, \r\n    replace: (entity) => {\r\n      const fetchOptions = {\r\n        method: 'PUT', \r\n        mode: 'cors', \r\n        ...opts.optionsForUpdate, \r\n        headers: {\r\n          'Content-Type': 'application/json', \r\n          ...(opts.optionsForUpdate.headers || {})\r\n        }, \r\n        body: JSON.stringify(entity)\r\n      }\r\n      const url = baseUrl + '/' + entity[opts.idProperty]\r\n      return fetch(url, fetchOptions as RequestInit)\r\n      .then((/** @type {Response} */ response) => {\r\n        if (! response.ok) throw responseToError(response)\r\n        return response.json()\r\n      })\r\n    }, \r\n    remove: (entity) => {\r\n      const fetchOptions = {\r\n        method: 'DELETE', \r\n        mode: 'cors', \r\n        ...opts.optionsForRemove, \r\n        headers: {\r\n          'Content-Type': 'application/json', \r\n          ...(opts.optionsForRemove.headers || {})\r\n        }\r\n      }\r\n      const url = baseUrl + '/' + entity[opts.idProperty]\r\n      return fetch(url, fetchOptions as RequestInit)\r\n      .then((/** @type {Response} */ response) => {\r\n        if (! response.ok) throw responseToError(response)\r\n      })\r\n    }\r\n  }\r\n}\r\n","//@ts-check\r\n/** @module core/updates */\r\n\r\nimport { API, Update } from './framework'\r\nimport { Store } from './store'\r\nimport { Json } from './schema'\r\nimport { MgError } from './errors'\r\n\r\n\r\n\r\n/**\r\n * Repository, which can search/add/replace/remove entities.\r\n * @category Types\r\n */\r\nexport type Repository = {\r\n  search: (query:Record<string,any>) => Promise<{entities:Json[], totalCount:number}>, \r\n  add: (entity:Json) => Promise<Json>, \r\n  replace: (entity:Json) => Promise<Json>, \r\n  remove: (entity:Json) => Promise<void>\r\n}\r\n\r\n\r\n/**\r\n * Loads a specified entity to the form for editing.\r\n * @category For Entity List\r\n */\r\nexport const editItem = (itemPath:string, formPath:string, store:Store):Store => {\r\n  const form = {\r\n    method: \"replace\", \r\n    data: API.extract(itemPath, store)\r\n  }\r\n  return API.add(formPath, form, store)\r\n}\r\n\r\n/**\r\n * Loads an initial data to the form for creating an entity.\r\n * @category For Entity List\r\n */\r\nexport const createItem = (data:Json, formPath:string, store:Store):Store => {\r\n  const form = {\r\n    method: \"add\", \r\n    data\r\n  }\r\n  return API.add(formPath, form, store)\r\n}\r\n\r\n/**\r\n * @category For Entity List\r\n */\r\nexport type CommitItemOptions = {\r\n  errorSelector?: string, \r\n  loadingName?: string, \r\n  successName?: string, \r\n  failureName?: string\r\n}\r\n\r\n/**\r\n * Stores the entity in the form into a repository.\r\n * @category For Entity List\r\n */\r\nexport const commitItem = (repository:Repository) => (formPath:string, listPath:string, options:CommitItemOptions, store:Store):Store|Promise<any> => {\r\n  const {enter, leave} = API.makePortal(store)\r\n  const opts:CommitItemOptions = {\r\n    errorSelector: null, \r\n    loadingName: 'loading', \r\n    successName: 'success', \r\n    failureName: 'failure', \r\n    ...options\r\n  }\r\n  const methodPath = formPath + '/method'\r\n  const dataPath = formPath + '/data'\r\n  const queryPath = listPath + '/query'\r\n  const itemsPath = listPath + '/items'\r\n  const totalCountPath = listPath + '/totalCount'\r\n  store = API.touchAll(dataPath, store)\r\n  store = API.validate(dataPath, store)\r\n  const numErrors = API.countValidationErrors(dataPath, store)\r\n  if (numErrors) {\r\n    if (opts.errorSelector) {\r\n      window.setTimeout(() => {\r\n        const targetEl = document.querySelector(opts.errorSelector)\r\n        if (targetEl) targetEl.scrollIntoView()\r\n      }, 100)\r\n    }\r\n    return store\r\n  } else {\r\n    store = API.openProgress(opts.loadingName, null, store)\r\n    const data = API.extract(dataPath, store)\r\n    const action = (API.extract(methodPath, store)) as \"add\"|\"replace\"\r\n    return leave(repository[action](data), store)\r\n    .then(enter((_item, store) => {\r\n      const query = API.extract(queryPath, store) as Record<string,any>\r\n      return leave(repository.search(query), store)\r\n    }))\r\n    .then(enter(({entities, totalCount}, store) => {\r\n      store = API.replace(itemsPath, entities, store)\r\n      store = API.replace(formPath, null, store)\r\n      store = API.replace(totalCountPath, totalCount, store)\r\n      store = API.closeProgress(opts.loadingName, store)\r\n      return leave(API.sleep(500, store))\r\n    }))\r\n    .then(enter((_unused, store) => {\r\n      return API.openFeedback(opts.successName, {}, store)\r\n    }))\r\n    .catch(enter((error, store) => {\r\n      store = API.closeProgress(opts.loadingName, store)\r\n      console.error('commision failed', error)\r\n      const mgerror:MgError = {code:error.name, detail:error.message}\r\n      return API.openFeedback(opts.failureName, mgerror, store)\r\n    }))\r\n  }\r\n}\r\n\r\n/**\r\n * Discard the entity in the form.\r\n * @category For Entity List\r\n */\r\nexport const discardItem = (formPath:string, store:Store):Store => {\r\n  store = API.replace(formPath, null, store)\r\n  return store\r\n}\r\n\r\n/**\r\n * @category For Entity List\r\n */\r\nexport type DeleteItemOptions = {\r\n  confirmName?: string, \r\n  loadingName?: string, \r\n  successName?: string, \r\n  failureName?: string\r\n}\r\n\r\n/**\r\n * Deletes an entity from a repository.\r\n * @category For Entity List\r\n */\r\nexport const deleteItem = (repository:Repository) => (itemPath:string, listPath:string, options:DeleteItemOptions, store:Store):Store|Promise<any> => {\r\n  const {enter, leave} = API.makePortal(store)\r\n  const opts:DeleteItemOptions = {\r\n    confirmName: 'confirm', \r\n    loadingName: 'loading', \r\n    successName: 'success', \r\n    failureName: 'failure', \r\n    ...options\r\n  }\r\n  const queryPath = listPath + '/query'\r\n  const itemsPath = listPath + '/items'\r\n  const totalCountPath = listPath + '/totalCount'\r\n  return leave(API.openDialog(opts.confirmName, {}, store))\r\n  .then(enter((ok, store) => {\r\n    const data = API.extract(itemPath, store)\r\n    store = API.closeDialog(opts.confirmName, store)\r\n    if (! ok) return store\r\n    store = API.openProgress(opts.loadingName, null, store)\r\n    return leave(repository.remove(data), store)\r\n    .then(enter((_unused, store) => {\r\n      const query = API.extract(queryPath, store) as Record<string,any>\r\n      return leave(repository.search(query), store)\r\n    }))\r\n    .then(enter(({entities, totalCount}, store) => {\r\n      store = API.closeProgress(opts.loadingName, store)\r\n      store = API.replace(itemsPath, entities, store)\r\n      store = API.replace(totalCountPath, totalCount, store)\r\n      return leave(API.sleep(500, store))\r\n    }))\r\n    .then(enter((_unused, store) => {\r\n      return API.openFeedback(opts.successName, {}, store)\r\n    }))\r\n    .catch(enter((error, store) => {\r\n      store = API.closeProgress(opts.loadingName, store)\r\n      console.error('deletion failed', error)\r\n      const mgerror:MgError = {code:error.name, detail:error.message}\r\n      return API.openFeedback(opts.failureName, mgerror, store)\r\n    }))\r\n  }))\r\n}\r\n\r\n/**\r\n * @category For Entity List\r\n */\r\nexport type LoadItemsOptions = {\r\n  loadingName?: string, \r\n  failureName?: string, \r\n  page?: number, \r\n  pageProperty?: string\r\n}\r\n\r\n/**\r\n * Fetches entities from a repository\r\n * @category For Entity List\r\n */\r\nexport const loadItems = (repository:Repository) => (listPath:string, options:LoadItemsOptions, store:Store):Store|Promise<any> => {\r\n  const {enter, leave} = API.makePortal(store)\r\n  const opts:LoadItemsOptions = {\r\n    loadingName: 'loading', \r\n    failureName: 'failure', \r\n    page: null, \r\n    pageProperty: null, \r\n    ...options\r\n  }\r\n  const queryPath = listPath + '/query'\r\n  const itemsPath = listPath + '/items'\r\n  const totalCountPath = listPath + '/totalCount'\r\n  store = API.openProgress(opts.loadingName, null, store)\r\n  const query = API.extract(queryPath, store) as Record<string,any>\r\n  if (opts.page !== null && opts.pageProperty) {\r\n    query[opts.pageProperty] = opts.page\r\n  }\r\n  return leave(repository.search(query), store)\r\n  .then(enter(({entities, totalCount}, store) => {\r\n    store = API.closeProgress(opts.loadingName, store)\r\n    if (opts.page !== null && opts.pageProperty) {\r\n      store = API.replace(queryPath + '/' + opts.pageProperty, opts.page, store)\r\n    }\r\n    store = API.replace(itemsPath, entities, store)\r\n    store = API.replace(totalCountPath, totalCount, store)\r\n    return store\r\n  }))\r\n  .catch(enter((error, store) => {\r\n    store = API.closeProgress(opts.loadingName, store)\r\n    console.error('loading failed', error)\r\n    const mgerror:MgError = {code:error.name, detail:error.message}\r\n    return API.openFeedback(opts.failureName, mgerror, store)\r\n  }))\r\n}\r\n\r\n/**\r\n * @category For Entity List\r\n */\r\nexport type SearchItemsOptions = {\r\n  errorSelector?: string, \r\n  loadingName?: string, \r\n  failureName?: string\r\n}\r\n\r\n/**\r\n * Searches entities from a repository\r\n * @category For Entity List\r\n */\r\nexport const searchItems = (repository:Repository) => (formPath:string, listPath:string, options:SearchItemsOptions, store:Store):Store|Promise<any> => {\r\n  let errorSelector = null\r\n  if (\"errorSelector\" in options) {\r\n    errorSelector = options.errorSelector\r\n    delete options.errorSelector\r\n  }    \r\n  store = API.touchAll(formPath, store)\r\n  store = API.validate(formPath, store)\r\n  const numErrors = API.countValidationErrors(formPath, store)\r\n  if (numErrors) {\r\n    if (errorSelector) {\r\n      window.setTimeout(() => {\r\n        const targetEl = document.querySelector(errorSelector)\r\n        if (targetEl) targetEl.scrollIntoView()\r\n      }, 100)\r\n    }\r\n    return store\r\n  }\r\n\r\n  const {enter, leave} = API.makePortal(store)\r\n  const opts = {\r\n    loadingName: 'loading', \r\n    failureName: 'failure', \r\n    ...options\r\n  }\r\n  const queryPath = listPath + '/query'\r\n  const itemsPath = listPath + '/items'\r\n  const totalCountPath = listPath + '/totalCount'\r\n  store = API.openProgress(opts.loadingName, null, store)\r\n  const query = API.extract(formPath, store) as Record<string,any>\r\n  return leave(repository.search(query), store)\r\n  .then(enter(({entities, totalCount}, store) => {\r\n    store = API.closeProgress(opts.loadingName, store)\r\n    store = API.replace(queryPath, query, store)\r\n    store = API.replace(itemsPath, entities, store)\r\n    store = API.replace(totalCountPath, totalCount, store)\r\n    return store\r\n  }))\r\n  .catch(enter((error, store) => {\r\n    store = API.closeProgress(opts.loadingName, store)\r\n    console.error('search failed', error)\r\n    const mgerror:MgError = {code:error.name, detail:error.message}\r\n    return API.openFeedback(opts.failureName, mgerror, store)\r\n  }))\r\n}\r\n\r\n/**\r\n * Helper function. Builds a neat update collection for entity list app.\r\n * @category For Entity List\r\n */\r\nexport const makeEntityListUpdates = (repository:Repository):Record<string,Update> => {\r\n  return {\r\n    editItem, \r\n    createItem, \r\n    commitItem: commitItem(repository), \r\n    discardItem, \r\n    deleteItem: deleteItem(repository), \r\n    loadItems: loadItems(repository), \r\n    searchItems: searchItems(repository)\r\n  }\r\n}\r\n\r\n/**\r\n * @category For Single Entity\r\n */\r\nexport type SubmitOptions = {\r\n  path?: string, \r\n  errorSelector?: string, \r\n  loadingName?: string, \r\n  successName?: string, \r\n  failureName?: string\r\n}\r\n\r\n/**\r\n * Submits data to a repository. The method can be \"add\" or \"replace\".\r\n * @category For Single Entity\r\n */\r\nexport const submit = (repository:Repository) => (method:\"add\"|\"replace\", options:SubmitOptions, store:Store):Store|Promise<any> => {\r\n  const {enter, leave} = API.makePortal(store)\r\n  const opts:SubmitOptions = {\r\n    path: '', \r\n    errorSelector: null, \r\n    loadingName: 'loading', \r\n    successName: 'success', \r\n    failureName: 'failure', \r\n    ...options\r\n  }\r\n  store = API.touchAll(opts.path, store)\r\n  store = API.validate(opts.path, store)\r\n  const numErrors = API.countValidationErrors(opts.path, store)\r\n  if (numErrors) {\r\n    if (opts.errorSelector) {\r\n      window.setTimeout(() => {\r\n        const targetEl = document.querySelector(opts.errorSelector)\r\n        if (targetEl) targetEl.scrollIntoView()\r\n      }, 100)\r\n    }\r\n    return store\r\n  } else {\r\n    const data = API.extract(opts.path, store)\r\n    store = API.openProgress(opts.loadingName, null, store)\r\n    return leave(repository[method](data), store)\r\n    .then(enter((data, store) => {\r\n      store = API.closeProgress(opts.loadingName, store)\r\n      return leave(API.sleep(500, store))\r\n      .then(enter((_unused, store) => {\r\n        return API.openFeedback(opts.successName, {data}, store)\r\n      }))\r\n    }))\r\n    .catch(enter((error, store) => {\r\n      store = API.closeProgress(opts.loadingName, store)\r\n      console.error('loading failed', error)\r\n      const mgerror:MgError = {code:error.name, detail:error.message}\r\n      return API.openFeedback(opts.failureName, mgerror, store)\r\n    }))\r\n  }\r\n}\r\n\r\n/**\r\n * @category For Single Entity\r\n */\r\nexport type ResetOptions = {\r\n  confirmName?: string\r\n}\r\n\r\n/**\r\n * Resets data.\r\n * @category For Single Entity\r\n */\r\nexport const reset = (data:Json, options:ResetOptions, store:Store):Store|Promise<any> => {\r\n  const {enter, leave} = API.makePortal(store)\r\n  const opts:ResetOptions = {\r\n    confirmName: 'confirm', \r\n    ...options\r\n  }\r\n  return leave(API.openDialog(opts.confirmName, {}, store))\r\n  .then(enter((ok, store) => {\r\n    store = API.closeDialog(opts.confirmName, store)\r\n    if (ok) {\r\n      return API.replace(\"\", data, store)\r\n    } else {\r\n      return store\r\n    }\r\n  }))\r\n}\r\n\r\n/**\r\n * Loads a part of the entity into the form for editing.\r\n * @category For Single Entity\r\n */\r\nexport const editPart = (partPath:string, formPath:string, store:Store):Store => {\r\n  const form = {\r\n    method: 'replace', \r\n    action: partPath, \r\n    data: API.extract(partPath, store)\r\n  }\r\n  store = API.replace(formPath, form, store)\r\n  return store\r\n}\r\n\r\n/**\r\n * Loads data into the form for createing a part of the entity.\r\n * @category For Single Entity\r\n */\r\nexport const createPart = (pathToAdd:string, data:Json, formPath:string, store:Store):Store => {\r\n  const form = {\r\n    method: 'add', \r\n    action: pathToAdd, \r\n    data\r\n  }\r\n  store = API.replace(formPath, form, store)\r\n  return store\r\n}\r\n\r\n/**\r\n * @category For Single Entity\r\n */\r\nexport type CommitPartOptions = {\r\n  errorSelector?: string, \r\n  idProperty?: string\r\n}\r\n\r\n/**\r\n * Stores the part in the form into the entity.\r\n * @category For Single Entity\r\n */\r\nexport const commitPart = (formPath:string, nextIdPath:string, options:CommitPartOptions, store:Store):Store => {\r\n  const opts:CommitPartOptions = {\r\n    errorSelector: null, \r\n    idProperty: 'id', \r\n    ...options\r\n  }\r\n  const actionPath = formPath + '/action'\r\n  const methodPath = formPath + '/method'\r\n  const dataPath = formPath + '/data'\r\n  store = API.touchAll(dataPath, store)\r\n  store = API.validate(dataPath, store)\r\n  const numErrors = API.countValidationErrors(dataPath, store)\r\n  if (numErrors) {\r\n    if (opts.errorSelector) {\r\n      window.setTimeout(() => {\r\n        const targetEl = document.querySelector(opts.errorSelector)\r\n        if (targetEl) targetEl.scrollIntoView()\r\n      }, 100)\r\n    }\r\n    return store\r\n  } else {\r\n    const method = API.extract(methodPath, store) as \"add\"|\"replace\"\r\n    const path = API.extract(actionPath, store) as string\r\n    const data = API.extract(dataPath, store)\r\n    if (method == \"add\") {\r\n      if (opts.idProperty && nextIdPath) {\r\n        const nextId = API.extract(nextIdPath, store) as number\r\n        store = API.replace(nextIdPath, nextId + 1, store)\r\n        data[opts.idProperty] = nextId\r\n      }\r\n      store = API.add(path, data, store)\r\n    } else {\r\n      store = API.replace(path, data, store)\r\n    }\r\n    store = API.replace(formPath, null, store)\r\n    return store\r\n  }\r\n}\r\n\r\n/**\r\n * Discards data in the form.\r\n * @category For Single Entity\r\n */\r\nexport const discardPart = (formPath:string, store:Store):Store => {\r\n  store = API.replace(formPath, null, store)\r\n  return store\r\n}\r\n\r\n/**\r\n * @category For Single Entity\r\n */\r\nexport type RemovePartOptions = {\r\n  confirmName?: string\r\n}\r\n\r\n/**\r\n * Removes a part of the entity.\r\n * @category For Single Entity\r\n */\r\nexport const removePart = (partPath:string, options:RemovePartOptions, store:Store):Store|Promise<any> => {\r\n  const {enter, leave} = API.makePortal(store)\r\n  const opts:RemovePartOptions = {\r\n    confirmName: 'confirm', \r\n    ...options\r\n  }\r\n  return leave(API.openDialog(opts.confirmName, {}, store))\r\n  .then(enter((ok, store) => {\r\n    store = API.closeDialog(opts.confirmName, store)\r\n    if (ok) {\r\n      store = API.remove(partPath, store)\r\n      return store\r\n    } else {\r\n      return store\r\n    }\r\n  }))\r\n}\r\n\r\n/**\r\n * @category For Single Entity\r\n */\r\nexport type CopyPartOptions = {\r\n  pathToAdd?: string, \r\n  idProperty?: string\r\n}\r\n\r\n/**\r\n * Copies a part of the entity.\r\n * @category For Single Entity\r\n */\r\nexport const copyPart = (partPath:string, nextIdPath:string, options:CopyPartOptions, store:Store):Store => {\r\n  const opts:CopyPartOptions = {\r\n    pathToAdd: '', \r\n    idProperty: 'id', \r\n    ...options\r\n  }\r\n  const data = API.extract(partPath, store)\r\n  if (opts.idProperty && nextIdPath) {\r\n    const nextId = API.extract(nextIdPath, store) as number\r\n    data[opts.idProperty] = nextId\r\n    store = API.add(nextIdPath, nextId + 1, store)\r\n  }\r\n  const pathToAdd = opts.pathToAdd || partPath\r\n  store = API.add(pathToAdd, data, store)\r\n  return store\r\n}\r\n\r\n/**\r\n * Helper function. Builds a neat update collection for single entity app.\r\n * @category For Single Entity\r\n */\r\nexport const makeEntityUpdates = (repository:Repository):Record<string,Update> => {\r\n  return {\r\n    submit: submit(repository), \r\n    reset, \r\n    editPart, \r\n    createPart, \r\n    commitPart, \r\n    discardPart, \r\n    removePart, \r\n    copyPart\r\n  }\r\n}","\r\n\r\nexport {h, API, start, once} from './core/framework'\r\nexport {suspendRoot, resumeRoot, prepareToDestroy, compose, playTextbox, playSlider, playListbox, playRadio, playCheckbox, playUpdateButton, playSettleButton, playField, playDialog, playFeedback, playModal, playProgress, playPage, playSwitch, playListItem, playPagination, playFlatpickr, playPickr, playSortable} from './core/components'\r\nexport {makeRestRepository} from './core/rest'\r\nimport * as Updates from './core/updates'\r\nexport {Updates}\r\nexport {makeEntityListUpdates, makeEntityUpdates} from './core/updates'\r\nexport {validate, defaultRules, coerce} from './core/schema'\r\nexport {normalizeError, defaultCatalog} from './core/errors'\r\n\r\nexport {StartParameter, Store} from './core/framework'"]}