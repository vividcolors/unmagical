{"version":3,"sources":["../src/utils.js","../src/env.js","env.js","../src/schema.js","schema.js","_index.js"],"names":["isIntStr","x","n","normalizePath","path","frags","split","i","length","join","normalizePathArray","rv","pathToArray","push","typeOf","Array","isArray","emptyObject","emptyArray","hasPath","init2","list","wrap","data","schemaDb","validate","inner","es","path2","xa","rec","p","xo","xs","strip","tree","root","makeEnv","internPath","test","env","extract","epath","slot","Error","getSlot","setSlot","add","value","location","name","slot0","type0","index","value1","lis","remove","hasOwnProperty","replace","move","from","copy","mapDeep","f","value0","reduceDeep","cur","schema","run","assert","assertError","E","age","buddies","slot80","invalid","message","nullable","type","lastChar","charAt","defaultMessages","buildDb","db","properties","items","makeMessage","dict","code","arg","format","cook","rules","result","testType","defaultRules","param","required","requiredAnyOf","fs","every","multipleOf","maximum","exclusiveMaximum","minimum","exclusiveMinimum","maxLength","minLength","RegExp","maxItems","minItems","touched","input","coerce","indexOf","b","v","S","c","s","enum","foo","bar","baz","tag","op","lhs","var","rhs","val","pattern","ident","thunk","lv","console","log","match","status","e","startsWith","callRun","m"],"mappings":";AA0EO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,QAAA,YAAA,QAAA,OAAA,QAAA,YAAA,QAAA,mBAAA,QAAA,cAAA,QAAA,cAAA,EAnEA,MAAMA,EAAYC,IACjBC,MAAAA,GAAKD,EACHC,OAAAA,EAAI,GAAM,GAAKD,IAAM,GAAKC,GAiE7B,QAAA,SAAA,EAzDA,MAAMC,EAAiBC,IACtBC,MAAAA,EAAQD,EAAKE,MAAM,KACpB,IAAA,IAAIC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAC5BP,EAASK,EAAME,MACjBF,EAAME,GAAK,KAGRF,OAAAA,EAAMI,KAAK,MAkDb,QAAA,cAAA,EA1CA,MAAMC,EAAsBN,IAC7BO,IAAAA,EAAK,GACJ,IAAA,IAAIJ,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IACT,iBAAXH,EAAKG,IAAkBP,EAASI,EAAKG,IAC9CI,GAAM,KAENA,GAAM,IAAMP,EAAKG,GAGdI,OAAAA,GAiCF,QAAA,mBAAA,EAzBA,MAAMC,EAAeR,IACpBC,MAAAA,EAAQD,EAAKE,MAAM,KACnBK,EAAK,GACN,IAAA,IAAIJ,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAChCI,EAAGE,KAAKb,EAASK,EAAME,KAAOF,EAAME,GAAKF,EAAME,IAE1CI,OAAAA,GAmBF,QAAA,YAAA,EAXA,MAAMG,EAAUb,GAAY,OAANA,EAAa,OAASc,MAAMC,QAAQf,GAAK,eAAiBA,EAWhF,QAAA,OAAA,EANA,MAAMgB,EAAc,GAMpB,QAAA,YAAA,EAAA,MAAMC,EAAa,GAAnB,QAAA,WAAA;;ACkTA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,QAAA,QAAA,QAAA,KAAA,QAAA,KAAA,QAAA,QAAA,QAAA,OAAA,QAAA,IAAA,QAAA,QAAA,QAAA,QAAA,QAAA,QAAA,QAAA,KAAA,QAAA,aAAA,EA1XP,IAAA,EAAA,QAAA,WACA,EAAA,QAAA,SAyXO,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAlWP,MAAMC,EAAU,CAACf,EAAMH,KACfG,EAAKI,SACJ,EAASJ,EAAAA,SAAAA,EAAMH,GAGlBmB,EAASC,IACN,EAAK,EAAA,OAAA,EAAKA,EAAAA,MAAAA,IAcbC,EAAO,CAACC,EAAMnB,EAAMoB,EAAUC,KAE5BC,MAAAA,EAAQ,CAACH,EAAMnB,KACX,QAAA,EAAOmB,EAAAA,QAAAA,IACR,IAAA,QACGI,MAAAA,EAAK,GACLC,EAAQxB,EAAO,KAChB,IAAA,IAAIG,EAAI,EAAGA,EAA2BgB,EAAMf,OAAQD,IACvDoB,EAAGpB,GAAKmB,EAAMH,EAAKhB,GAAIqB,GAGlBC,OADIJ,EAASE,EAAIH,EAASpB,IAE9B,IAAA,SACG0B,MAAAA,EAAM,GACP,IAAA,IAAIC,KAA0CR,EACjDO,EAAIC,GAAKL,EAAMH,EAAKQ,GAAI3B,EAAO,IAAM2B,GAGhCC,OADIP,EAASK,EAAKN,EAASpB,IAEpC,QAES6B,OADIR,EAASF,EAAMC,EAASpB,MAIlCsB,OAAAA,EAAMH,EAAMnB,IAQf8B,EAASC,IACPC,MAAAA,EAAOD,EAAK,UACV,QAAA,EAAOC,EAAAA,QAAAA,IACR,IAAA,QACGT,MAAAA,EAAK,GACN,IAAA,IAAIpB,EAAI,EAAGA,EAAI6B,EAAK5B,OAAQD,IAC/BoB,EAAGpB,GAAK2B,EAAME,EAAK7B,IAEdoB,OAAAA,EACJ,IAAA,SACGG,MAAAA,EAAM,GACP,IAAA,IAAIC,KAAKK,EACZN,EAAIC,GAAKG,EAAME,EAAKL,IAEfD,OAAAA,EACT,QACSM,OAAAA,IAWAC,EAAU,CAACd,EAAMC,EAAUC,KAE/B,MAAA,CACLU,KAFWb,EAAKC,EAAM,GAAIC,EAAUC,GAGpCD,SAAAA,EACAC,SAAAA,IA8QG,QAAA,QAAA,EAtQP,MAAMa,EAAclC,IACZC,MAAAA,EAAQD,EAAKE,MAAM,KACnBK,EAAK,GACN,IAAA,IAAIJ,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAChCI,EAAGE,KAAK,UACRF,EAAGE,MAAK,EAASR,EAAAA,UAAAA,EAAME,KAAOF,EAAME,GAAKF,EAAME,IAE1CI,OAAAA,GAQI4B,EAAO,CAACnC,EAAMoC,IAClBrB,EAAiCmB,EAAWlC,GAAQoC,EAAIL,MAsP1D,QAAA,KAAA,EA7OA,MAAMM,EAAU,CAACrC,EAAMoC,KACtBE,MAAAA,EAAiCJ,EAAWlC,GAC5CuC,GAAO,EAAMD,EAAAA,MAAAA,EAAOF,EAAIL,MAC1B,IAAEQ,EACE,MAAA,IAAIC,MAAM,yBAA2BxC,GAEtC8B,OAAAA,EAAMS,IAuOR,QAAA,QAAA,EA9NA,MAAME,EAAU,CAACzC,EAAMoC,KACtBE,MAAAA,EAAiCJ,EAAWlC,GAC5CuC,GAAO,EAAMD,EAAAA,MAAAA,EAAOF,EAAIL,MAC1B,IAAEQ,EACE,MAAA,IAAIC,MAAM,yBAA2BxC,GAEtCuC,OAAAA,GAwNF,QAAA,QAAA,EA9MA,MAAMG,EAAU,CAAC1C,EAAMuC,EAAMH,KAC5BE,MAAAA,EAAiCJ,EAAWlC,IACpC,EAAMsC,EAAAA,MAAAA,EAAOF,EAAIL,MAC3B,IAAEQ,EACE,MAAA,IAAIC,MAAM,yBAA2BxC,GAEvC+B,MAAAA,GAAO,EAAUO,EAAAA,WAAAA,EAAOC,EAAMH,EAAIL,MAC7BK,OAAAA,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAgBL,KAAAA,KAuMX,QAAA,QAAA,EA7LA,MAAMY,EAAM,CAAC3C,EAAM4C,EAAOR,KACzBE,MAAAA,EAAiCJ,EAAWlC,GAC5C6C,EAAW7B,EAAMsB,GACjBQ,GAAO,EAAKR,EAAAA,MAAAA,GACZS,GAAQ,EAAMF,EAAAA,MAAAA,EAAUT,EAAIL,MAC5BiB,GAAQ,EAAOD,EAAAA,QAAAA,EAAM,WACvBC,GAAS,UAATA,GAA8B,SAATA,EACjB,MAAA,IAAIR,MAAM,yCAA2CxC,GAEzDgD,GAAS,SAATA,EAAkB,CAEdC,MAAAA,EAAkB,MAATH,EAAgBC,EAAM,UAAU3C,OAAS0C,EACpD,GAAgB,iBAATG,GAAqBA,EAAQ,GAAM,EACtC,MAAA,IAAIT,MAAM,wBAA0BxC,GAExCiD,GAAAA,EAAQ,GAAKA,EAAQF,EAAM,UAAU3C,OACjC,MAAA,IAAIoC,MAAM,6BAA+BxC,GAE3CkD,MAAAA,EAAShC,EAAK0B,GAAO,EAAc5C,EAAAA,eAAAA,GAAOoC,EAAIhB,SAAUgB,EAAIf,UAC5D8B,GAAM,EAAOF,EAAAA,QAAAA,EAAOC,EAAQH,EAAM,WAClCR,EAAOH,EAAIf,SAAS8B,EAAKf,EAAIhB,UAAS,EAAmByB,EAAAA,oBAAAA,KACzDd,GAAO,EAAUc,EAAAA,WAAAA,EAAUN,EAAMH,EAAIL,MAChCK,OAAAA,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAgBL,KAAAA,IACX,CAED,GAAe,iBAARe,EACH,MAAA,IAAIN,MAAM,uBAAyBxC,GAErCkD,MAAAA,EAAShC,EAAK0B,GAAO,EAAc5C,EAAAA,eAAAA,GAAOoC,EAAIhB,SAAUgB,EAAIf,UAC5DK,EAAUqB,EAAAA,EAAAA,GAAAA,EAAM,WAAb,GAAA,CAAyBD,CAAAA,GAAMI,IAClCX,EAAOH,EAAIf,SAASK,EAAKU,EAAIhB,UAAS,EAAmByB,EAAAA,oBAAAA,KACzDd,GAAO,EAAUc,EAAAA,WAAAA,EAAUN,EAAMH,EAAIL,MAChCK,OAAAA,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAgBL,KAAAA,MA6Jb,QAAA,IAAA,EAnJA,MAAMqB,EAAS,CAACpD,EAAMoC,KACrBE,MAAAA,EAAiCJ,EAAWlC,GAC5C6C,EAAW7B,EAAMsB,GACjBQ,GAAO,EAAKR,EAAAA,MAAAA,GACZS,GAAQ,EAAMF,EAAAA,MAAAA,EAAUT,EAAIL,MAC5BiB,GAAQ,EAAOD,EAAAA,QAAAA,EAAM,WACvBC,GAAS,UAATA,GAA8B,SAATA,EACjB,MAAA,IAAIR,MAAM,4CAA8CxC,GAE5DgD,GAAS,SAATA,EAAkB,CAEhB,GAAe,iBAARF,GAAoBA,EAAO,GAAM,EACpC,MAAA,IAAIN,MAAM,2BAA6BxC,GAE3C8C,GAAAA,EAAO,GAAKA,GAAQC,EAAM,UAAU3C,OAChC,MAAA,IAAIoC,MAAM,0BAA4BxC,GAExCmD,MAAAA,GAAM,EAAQL,EAAAA,QAAAA,EAAM,EAAGC,EAAM,WAC7BR,EAAOH,EAAIf,SAAS8B,EAAKf,EAAIhB,UAAS,EAAmByB,EAAAA,oBAAAA,KACzDd,GAAO,EAAUc,EAAAA,WAAAA,EAAUN,EAAMH,EAAIL,MAChCK,OAAAA,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAgBL,KAAAA,IACX,CAED,IAAEgB,EAAM,UAAUM,eAAeP,GAC7B,MAAA,IAAIN,MAAM,iCAAmCxC,GAE/C0B,MAAAA,GAAM,EAAOoB,EAAAA,QAAAA,EAAMC,EAAM,WACzBR,EAAOH,EAAIf,SAASK,EAAKU,EAAIhB,UAAS,EAAmByB,EAAAA,oBAAAA,KACzDd,GAAO,EAAUc,EAAAA,WAAAA,EAAUN,EAAMH,EAAIL,MAChCK,OAAAA,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAgBL,KAAAA,MAsHb,QAAA,OAAA,EA3GA,MAAMuB,EAAU,CAACtD,EAAM4C,EAAOR,KAC7BE,MAAAA,EAAiCJ,EAAWlC,GAC5C6C,EAAW7B,EAAMsB,GACjBQ,GAAO,EAAKR,EAAAA,MAAAA,GACZS,GAAQ,EAAMF,EAAAA,MAAAA,EAAUT,EAAIL,MAC5BiB,GAAQ,EAAOD,EAAAA,QAAAA,EAAM,WACvBC,GAAS,UAATA,GAA8B,SAATA,EACjB,MAAA,IAAIR,MAAM,6CAA+CxC,GAE7DgD,GAAS,SAATA,EAAkB,CAEhB,GAAe,iBAARF,GAAoBA,EAAO,GAAM,EACpC,MAAA,IAAIN,MAAM,4BAA8BxC,GAE5C8C,GAAAA,EAAO,GAAKA,GAAQC,EAAM,UAAU3C,OAChC,MAAA,IAAIoC,MAAM,2BAA6BxC,GAEzCkD,MAAAA,EAAShC,EAAK0B,GAAO,EAAc5C,EAAAA,eAAAA,GAAOoC,EAAIhB,SAAUgB,EAAIf,UAC5D8B,GAAM,EAAOL,EAAAA,QAAAA,EAAMI,EAAQH,EAAM,WACjCR,EAAOH,EAAIf,SAAS8B,EAAKf,EAAIhB,UAAS,EAAmByB,EAAAA,oBAAAA,KACzDd,GAAO,EAAUc,EAAAA,WAAAA,EAAUN,EAAMH,EAAIL,MAChCK,OAAAA,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAgBL,KAAAA,IACX,CAED,GAAe,iBAARe,EACH,MAAA,IAAIN,MAAM,2BAA6BxC,GAEzCkD,MAAAA,EAAShC,EAAK0B,GAAO,EAAc5C,EAAAA,eAAAA,GAAOoC,EAAIhB,SAAUgB,EAAIf,UAC5DK,EAAUqB,EAAAA,EAAAA,GAAAA,EAAM,WAAb,GAAA,CAAyBD,CAAAA,GAAMI,IAClCX,EAAOH,EAAIf,SAASK,EAAKU,EAAIhB,UAAS,EAAmByB,EAAAA,oBAAAA,KACzDd,GAAO,EAAUc,EAAAA,WAAAA,EAAUN,EAAMH,EAAIL,MAChCK,OAAAA,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAgBL,KAAAA,MA4Eb,QAAA,QAAA,EAjEA,MAAMwB,EAAO,CAACC,EAAMxD,EAAMoC,KACzBQ,MAAAA,EAAQP,EAAQmB,EAAMpB,GAGrBA,OAFPA,EAAMgB,EAAOI,EAAMpB,GACnBA,EAAMO,EAAI3C,EAAM4C,EAAOR,IA8DlB,QAAA,KAAA,EAnDA,MAAMqB,EAAO,CAACD,EAAMxD,EAAMoC,KACzBQ,MAAAA,EAAQP,EAAQmB,EAAMpB,GAErBA,OADPA,EAAMO,EAAI3C,EAAM4C,EAAOR,IAiDlB,QAAA,KAAA,EAtCA,MAAMsB,EAAU,CAACC,EAAG3D,EAAMoC,KACzBd,MAAAA,EAAQ,CAACyB,EAAO/C,KACd4D,MAAAA,EAASb,EAAM,UACb,QAAA,EAAOa,EAAAA,QAAAA,IACR,IAAA,QACGT,MAAAA,EAAM,GACP,IAAA,IAAIhD,EAAI,EAAGA,EAAIyD,EAAOxD,OAAQD,IACjCgD,EAAIhD,GAAKmB,EAAMsC,EAAOzD,GAAIH,EAAO,IAAMG,GAE9BwD,OAAAA,EAAAA,EAAAA,GAAAA,EAAEZ,EAAO/C,IAApB,GAAA,CAAoCmD,SAAAA,IACjC,IAAA,SACGzB,MAAAA,EAAM,GACP,IAAA,IAAIC,KAAKiC,EACZlC,EAAIC,GAAKL,EAAMsC,EAAOjC,GAAI3B,EAAO,IAAM2B,GAE9BgC,OAAAA,EAAAA,EAAAA,GAAAA,EAAEZ,EAAO/C,IAApB,GAAA,CAAoC0B,SAAAA,IACtC,QACaiC,OAAAA,EAAAA,EAAAA,GAAAA,EAAEZ,EAAO/C,IAApB,GAAA,CAAoC4D,SAAAA,MAGpCtB,EAAQJ,EAAWlC,GACnB+C,GAAQ,EAAMT,EAAAA,MAAAA,EAAOF,EAAIL,MAC3B,IAAEgB,EACE,MAAA,IAAIP,MAAM,yBAA2BxC,GAEvCuC,MAAAA,EAAOjB,EAAMyB,EAAO/C,GACpB+B,GAAO,EAAUO,EAAAA,WAAAA,EAAOC,EAAMH,EAAIL,MAC7BK,OAAAA,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAgBL,KAAAA,KAWX,QAAA,QAAA,EAAA,MAAM8B,EAAa,CAACF,EAAGG,EAAK9D,EAAMoC,KACjCd,MAAAA,EAAQ,CAACwC,EAAKvB,EAAMvC,KAClB4D,MAAAA,EAASrB,EAAK,UACZ,QAAA,EAAOqB,EAAAA,QAAAA,IACR,IAAA,QACE,IAAA,IAAIzD,EAAI,EAAGA,EAAIyD,EAAOxD,OAAQD,IACjC2D,EAAMxC,EAAMwC,EAAKF,EAAOzD,GAAIH,EAAO,IAAMG,GAEpCwD,OAAAA,EAAEG,EAAKvB,EAAMvC,GACjB,IAAA,SACE,IAAA,IAAI2B,KAAKiC,EACZE,EAAMxC,EAAMwC,EAAKF,EAAOjC,GAAI3B,EAAO,IAAM2B,GAEpCgC,OAAAA,EAAEG,EAAKvB,EAAMvC,GACtB,QACS2D,OAAAA,EAAEG,EAAKvB,EAAMvC,KAGpBsC,EAAQJ,EAAWlC,GACnBuC,GAAO,EAAMD,EAAAA,MAAAA,EAAOF,EAAIL,MAC1B,IAAEQ,EACE,MAAA,IAAIC,MAAM,4BAA8BxC,GAEzCsB,OAAAA,EAAMwC,EAAKvB,EAAMvC,IAvBnB,QAAA,WAAA;;ACpXA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EAPP,IAAA,EAAA,EAAA,QAAA,eAOO,SAAA,IAAA,GAAA,mBAAA,QAAA,OAAA,KAAA,IAAA,EAAA,IAAA,QAAA,OAAA,EAAA,WAAA,OAAA,GAAA,EAAA,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,GAAA,OAAA,GAAA,iBAAA,GAAA,mBAAA,EAAA,MAAA,CAAA,QAAA,GAAA,IAAA,EAAA,IAAA,GAAA,GAAA,EAAA,IAAA,GAAA,OAAA,EAAA,IAAA,GAAA,IAAA,EAAA,GAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,KAAA,IAAA,EAAA,KAAA,EAAA,KAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EALP,MAAMqB,EAAW,CAACuB,EAAOmB,KAEhB,CAAUnB,SAAAA,IAGNoB,EAAM,CAACC,EAAQC,KAStB9B,IAAAA,EAAM+B,EAAElC,QARC,CACXa,KAAM,MACNsB,IAAK,GACLC,QAAS,CACP,MAAO,QAIe,GAAIhD,GAC9B4C,EAAO,EAAG,IAAME,EAAE9B,QAAQ,QAASD,GAAM,OACzC6B,EAAO,IAAK,IAAME,EAAEhC,KAAK,QAASC,IAAM,GACxC6B,EAAO,IAAK,IAAME,EAAEhC,KAAK,OAAQC,IAAM,GAEvCA,EAAM+B,EAAExB,IAAI,SAAU,mBAAoBP,GAC1C6B,EAAO,EAAG,IAAME,EAAE9B,QAAQ,SAAUD,GAAM,oBAC1C8B,EAAY,IAAK,IAAMC,EAAE9B,QAAQ,OAAQD,GAAM,YAE/C6B,EAAO,EAAG,IAAME,EAAE9B,QAAQ,aAAcD,GAAM,OAE9CA,EAAM+B,EAAExB,IAAI,aAAc,QAASP,GACnC6B,EAAO,EAAG,IAAME,EAAE9B,QAAQ,aAAcD,GAAM,SAC9C8B,EAAY,IAAK,IAAMC,EAAE9B,QAAQ,aAAcD,GAAM,YAErDA,EAAM+B,EAAExB,IAAI,aAAc,SAAUP,GACpC6B,EAAO,EAAG,IAAME,EAAE9B,QAAQ,aAAcD,GAAM,UAE9CA,EAAM+B,EAAEf,OAAO,aAAchB,GAC7B6B,EAAO,EAAG,IAAME,EAAE9B,QAAQ,WAAYD,GAAK/B,KAAK,KAAM,iBACtD6D,EAAY,IAAK,IAAMC,EAAE9B,QAAQ,aAAcD,GAAM,YAErDA,EAAM+B,EAAEf,OAAO,SAAUhB,GACzB8B,EAAY,EAAG,IAAMC,EAAE9B,QAAQ,SAAUD,GAAM,YAC/C8B,EAAY,IAAK,IAAMC,EAAEf,OAAO,SAAUhB,GAAM,WAEhD6B,EAAO,EAAG,KACJK,IAAAA,EAASH,EAAE1B,QAAQ,QAASL,GAIzBkC,OAHPA,EAAaA,EAAAA,EAAAA,GAAAA,GAAP,GAAA,CAAeC,SAAQ,IAC7BnC,EAAM+B,EAAEzB,QAAQ,QAAS4B,EAAQlC,IACjCkC,EAASH,EAAE1B,QAAQ,QAASL,IACdmC,UACb,GAEHnC,EAAM+B,EAAEb,QAAQ,OAAQ,GAAIlB,GAC5B6B,EAAO,EAAG,IAAME,EAAE9B,QAAQ,OAAQD,GAAM,IAExCA,EAAM+B,EAAExB,IAAI,MAAO,SAAUP,GAC7BA,EAAM+B,EAAEZ,KAAK,MAAO,cAAenB,GACnC6B,EAAO,GAAI,IAAME,EAAE9B,QAAQ,cAAeD,GAAM,UAChD8B,EAAY,KAAM,IAAMC,EAAE9B,QAAQ,MAAOD,GAAM,YAE/CA,EAAM+B,EAAEV,KAAK,cAAe,MAAOrB,GACnC6B,EAAO,GAAI,IAAME,EAAE9B,QAAQ,cAAeD,GAAM,UAChD6B,EAAO,KAAM,IAAME,EAAE9B,QAAQ,MAAOD,GAAM,UAE1C6B,EAAO,KAAM,IAAME,EAAE9B,QAAQ,WAAYD,GAAK/B,KAAK,KAAM,iBACzD+B,EAAM+B,EAAEZ,KAAK,aAAc,aAAcnB,GACzC6B,EAAO,GAAI,IAAME,EAAE9B,QAAQ,WAAYD,GAAK/B,KAAK,KAAM,iBAEvD+B,EAAM+B,EAAEV,KAAK,aAAc,aAAcrB,GACzC6B,EAAO,GAAI,IAAME,EAAE9B,QAAQ,WAAYD,GAAM,qBAE7CA,EAAM+B,EAAET,QAAQ,CAACnB,EAAMvC,IAAcuC,EAAAA,EAAAA,GAAAA,GAArB,GAAA,CAA2BiC,QAAQ,SAAU,WAAYpC,GACzE6B,EAAO,GAAI,IAAME,EAAE1B,QAAQ,WAAYL,GAAKoC,QAAS,QACrDP,EAAO,KAAM,IAAME,EAAE1B,QAAQ,aAAcL,GAAKoC,QAAS,QACzDP,EAAO,KAAM,IAAME,EAAE1B,QAAQ,QAASL,GAAKoC,SAAW,GAAI,IAE1DP,EAAO,GAAI,IACFE,EAAEN,WAAW,CAACC,EAAKvB,EAAMvC,IAClB,YAARA,EAA2B8D,EACxBA,MAAUvB,EAAK,aACrB,GAAI,WAAYH,GAClB,2BAxEE,QAAA,IAAA;;AC2RA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,QAAA,SAAA,QAAA,aAAA,QAAA,QAAA,QAAA,qBAAA,EAjSP,IAAA,EAAA,QAAA,WAiSO,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAxQP,MAAMqC,EAAYC,IACZ,IAAEA,EAAM,OAAO,EACbC,MAAAA,EAAWD,EAAKE,OAAOF,EAAKtE,OAAS,GACpCsE,MAAQ,QAARA,GAA8B,KAAZC,GAOdE,EAAkB,CACJ,wBAAA,gBACC,yBAAA,gBACG,4BAAA,qBACK,iCAAA,mBACH,8BAAA,mCACH,2BAAA,6BACS,oCAAA,wCACT,2BAAA,6BACS,oCAAA,wCACP,6BAAA,6CACC,8BAAA,eACD,6BAAA,yCACF,2BAAA,iBACC,4BAAA,6CACA,4BAAA,6CACT,mBAAA,eACK,wBAAA,gBACC,yBAAA,gBACC,0BAAA,wBACC,2BAAA,0BACA,2BAAA,gCAyOvB,QAAA,gBAAA,EAjOA,MAAMC,EAAWf,IAChBgB,MAAAA,EAAN,GACMzD,EAAQ,CAACyC,EAAQ/D,KAEb+D,OADRgB,EAAG/E,GAAQ+D,EACHA,EAAOW,MACR,IAAA,SACA,IAAA,UACE,IAAA,IAAI/C,KAAKoC,EAAOiB,WACnB1D,EAAMyC,EAAOiB,WAAWrD,GAAI3B,EAAO,IAAM2B,GAE3C,MACG,IAAA,QACA,IAAA,SACHL,EAAMyC,EAAOkB,MAAOjF,EAAO,QAO1B+E,OADPzD,EAAMyC,EAAQ,IACPgB,GA6MF,QAAA,QAAA,EAnMP,MAAMG,EAAc,CAACC,EAAMC,EAAMC,EAAM,QAE9BC,OADQH,EAAKC,IAAUA,EAAO,WACvB9B,QAAQ,QAAS,GAAK+B,IAYhCE,EAAO,CAAC3C,EAAOL,EAAMwB,EAAQyB,EAAOL,KACnC,IAAA,IAAIxD,KAAKoC,EAAQ,CACdJ,MAAAA,EAAI6B,EAAM7D,GACZ,IAAEgC,EAAG,SACH8B,MAAAA,EAAS9B,EAAEI,EAAOpC,GAAIiB,GACxB6C,IAAW,IAAXA,EAAiB,CACbjB,MAAAA,EAAUU,EAAYC,EAAMM,EAAQ1B,EAAOpC,IACtCY,OAAAA,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAA0BK,SAAAA,EAAO2B,SAAQ,EAAMC,QAAAA,KAGxCjC,OAAAA,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAA0BK,SAAAA,EAAO2B,SAAQ,EAAOC,QAAQ,MASpDkB,EAAW,CAAC9C,EAAO8B,KACnB,IAAEA,EAAM,OAAO,EACf9B,GAAU,OAAVA,EACK6B,OAAAA,EAASC,GAERA,OAAAA,GACD,IAAA,OACI,OAAA,EACJ,IAAA,SACA,IAAA,UACI,MAAgB,iBAAT9B,EACX,IAAA,UACA,IAAA,WACK,MAAgB,iBAATA,GAAqBA,EAAQ,GAAM,EAC/C,IAAA,UACA,IAAA,WACI,MAAgB,kBAATA,EACX,IAAA,SACI,OAAA,EACJ,IAAA,SACA,IAAA,UACK,MAAgB,iBAATA,GAA+B,OAAVA,EACjC,IAAA,QACA,IAAA,SACIjC,OAAAA,MAAMC,QAAQgC,GACvB,QACQ,MAAA,IAAIJ,MAAM,iBAAmBkC,KAS9BiB,EAAe,CAClB,KAAA,CAACC,EAAOhD,KACV,IAAEjC,MAAMC,QAAQgF,GAAQ,MAAM,IAAIpD,MAAM,qBACvC,IAAA,IAAIrC,EAAI,EAAGA,EAAIyF,EAAMxF,OAAQD,IAC5ByF,GAAAA,EAAMzF,KAAOyC,EAAO,OAAO,EAE1B,MAAA,yBAEA,MAAA,CAACgD,EAAOhD,IACXgD,IAAUhD,GACP,yBAETiD,SAAU,CAACD,EAAOhD,KACZ,IAAEjC,MAAMC,QAAQgF,GAAQ,MAAM,IAAIpD,MAAM,qBACxC,GAAgB,iBAATI,EAAmB,OAAO,EAChC,IAAA,IAAIzC,EAAI,EAAGA,EAAIyF,EAAMxF,OAAQD,IAC5B,IAAEyC,EAAMS,eAAeuC,EAAMzF,IAAK,MAAO,4BAExC,OAAA,GAET2F,cAAe,CAACF,EAAOhD,KACjB,IAAEjC,MAAMC,QAAQgF,GAAQ,MAAM,IAAIpD,MAAM,qBACxC,GAAgB,iBAATI,EAAmB,OAAO,EAC/BT,MAAAA,EAAOwB,GAAKf,EAAMS,eAAeM,GAClC,IAAA,IAAIoC,KAAMH,EACTG,GAAAA,EAAGC,MAAM7D,GAAO,OAAO,EAEtB,MAAA,kCAET8D,WAAY,CAACL,EAAOhD,KACd,GAAgB,iBAATgD,EAAmB,MAAM,IAAIpD,MAAM,qBAC1C,MAAgB,iBAATI,IACPA,EAAQgD,GAAU,GACf,gCAGTM,QAAS,CAACN,EAAOhD,IACK,iBAATA,IACPgD,GAAShD,GACN,4BAETuD,iBAAkB,CAACP,EAAOhD,IACJ,iBAATA,IACPgD,EAAQhD,GACL,qCAETwD,QAAS,CAACR,EAAOhD,IACK,iBAATA,IACPgD,GAAShD,GACN,4BAETyD,iBAAkB,CAACT,EAAOhD,IACJ,iBAATA,IACPgD,EAAQhD,GACL,qCAET0D,UAAW,CAACV,EAAOhD,IACG,iBAATA,IACPA,EAAMxC,QAAUwF,GACb,8BAETW,UAAW,CAACX,EAAOhD,IACG,iBAATA,IACPA,EAAMxC,QAAUwF,IACH,GAATA,EAAc,8BAAgC,+BAE7C,QAAA,CAACA,EAAOhD,KACb,GAAgB,iBAATgD,EAAmB,MAAM,IAAIpD,MAAM,qBAC1C,MAAgB,iBAATI,MACP,IAAI4D,OAAOZ,GAAOzD,KAAKS,IACpB,6BAET6D,SAAU,CAACb,EAAOhD,KACZ,GAAgB,iBAATgD,EAAmB,MAAM,IAAIpD,MAAM,qBAC1C,OAAE7B,MAAMC,QAAQgC,KAChBA,EAAMxC,QAAUwF,GACb,8BAETc,SAAU,CAACd,EAAOhD,KACZ,GAAgB,iBAATgD,EAAmB,MAAM,IAAIpD,MAAM,qBAC1C,OAAE7B,MAAMC,QAAQgC,KAChBA,EAAMxC,QAAUwF,GACb,+BA6CJ,QAAA,aAAA,EAlCA,MAAMvE,EAAW,CAACmE,EAAOL,IAAS,CAACvC,EAAOmB,KAEzCxB,MAAAA,EAAQwB,EACV2B,EAAS9C,EAAOmB,EAAOW,MAAQa,EAAK3C,EAAO/B,EAAR,YAAqBkD,EAAQyB,EAAOL,GACvE,CAAUvC,SAAAA,EAAO2B,SAAQ,EAAMoC,QAAkB,OAAV/D,GAA4B,KAAVA,EAAc4B,QAAQU,EAAYC,EAAM,mBAAoB,OAFlG,CAAUvC,SAAAA,EAAO2B,SAAQ,EAAOoC,QAAkB,OAAV/D,GAA4B,KAAVA,EAAc4B,QAAQ,IAInG,IAAEjC,EAAKc,eAAe,SAEhB,QAAA,EAAOT,EAAAA,QAAAA,IACR,IAAA,OACHL,EAAKqE,MAAQ,GACb,MACG,IAAA,SACHrE,EAAKqE,MAAQ,GAAKhE,EAClB,MACG,IAAA,SACHL,EAAKqE,MAAQhE,EACb,MACG,IAAA,UACHL,EAAKqE,MAAQhE,EAAQ,OAAS,QAC9B,MACF,QACEL,EAAKqE,MAAQ,GAGZrE,OAAAA,GASF,QAAA,SAAA,EAAA,MAAMsE,EAAS,CAACrB,EAAOL,IAAS,CAAC5C,EAAMwB,KACxC,IAAEA,EACE,MAAA,IAAIvB,MAAM,uBAEd,IAAEuB,EAAOW,KACL,MAAA,IAAIlC,MAAM,gCAEd,IAA+G,GAA/G,CAAC,OAAQ,UAAW,WAAY,UAAW,WAAY,SAAU,UAAW,UAAUsE,QAAQ/C,EAAOW,MACjG,MAAA,IAAIlC,MAAM,2BAA6BuB,EAAOW,MAElDnC,GAAc,IAAdA,EAAKqE,MACHnC,OAAAA,EAASV,EAAOW,MACXa,EAAK,KAAMhD,EAAMwB,EAAQyB,EAAOL,GACf,UAAfpB,EAAOW,KACTa,EAAK,GAAIhD,EAAMwB,EAAQyB,EAAOL,GAE1B5C,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAiBgC,SAAQ,EAAMC,QAAQU,EAAYC,EAAM,yBAA0B,QAG/EpB,OAAAA,EAAOW,MACR,IAAA,OAEQnC,OAAAA,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAiBgC,SAAQ,EAAMC,QAAQU,EAAYC,EAAM,wBAAyB,QAC/E,IAAA,SACA,IAAA,UACGrF,MAAAA,GAAKyC,EAAKqE,MACZ,MAAA,GAAK9G,IAAMyC,EAAKqE,MACPrE,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAiBgC,SAAQ,EAAMC,QAAQU,EAAYC,EAAM,0BAA2B,QAE/EI,EAAKzF,EAAGyC,EAAMwB,EAAQyB,EAAOL,GACjC,IAAA,UACA,IAAA,WACGhF,MAAAA,GAAKoC,EAAKqE,MACZ,MAAA,GAAKzG,IAAMoC,EAAKqE,OAASzG,EAAI,GAAM,EAC1BoC,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAiBgC,SAAQ,EAAMC,QAAQU,EAAYC,EAAM,2BAA4B,QAEhFI,EAAKpF,EAAGoC,EAAMwB,EAAQyB,EAAOL,GACjC,IAAA,SACII,OAAAA,EAAKhD,EAAKqE,MAAOrE,EAAMwB,EAAQyB,EAAOL,GAC1C,IAAA,UACA,IAAA,WACG4B,MAAAA,EAAoB,SAAfxE,EAAKqE,OACU,UAAfrE,EAAKqE,OACN,KACNG,OAAM,OAANA,EACSxE,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAiBgC,SAAQ,EAAMC,QAAQU,EAAYC,EAAM,2BAA4B,QAEhFI,EAAKwB,EAAGxE,EAAMwB,EAAQyB,EAAOL,GACtC,QAEQ,MAAA,IAAI3C,MAAM,iBAAmBuB,EAAOW,QAlDzC,QAAA,OAAA;;AChSA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EAFP,IAAA,EAAA,EAAA,QAAA,kBAEO,SAAA,IAAA,GAAA,mBAAA,QAAA,OAAA,KAAA,IAAA,EAAA,IAAA,QAAA,OAAA,EAAA,WAAA,OAAA,GAAA,EAAA,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,GAAA,OAAA,GAAA,iBAAA,GAAA,mBAAA,EAAA,MAAA,CAAA,QAAA,GAAA,IAAA,EAAA,IAAA,GAAA,GAAA,EAAA,IAAA,GAAA,OAAA,EAAA,IAAA,GAAA,IAAA,EAAA,GAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,KAAA,IAAA,EAAA,KAAA,EAAA,KAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAAA,MAAMV,EAAM,CAACC,EAAQC,KACpB8C,MAAAA,EAAIC,EAAE5F,SAAS4F,EAAEtB,aAAc,IAC/BuB,EAAID,EAAEJ,OAAOI,EAAEtB,aAAc,IAG/BwB,IAAAA,EAAI,CAACzC,KAAK,QACdT,EAAO,EAAG,IAAM+C,EAAE,KAAMG,GAAG5C,SAAS,GACpCN,EAAO,IAAK,IAAM+C,EAAE,EAAGG,GAAG5C,SAAS,GACnCN,EAAO,IAAK,IAAM+C,EAAE,MAAOG,GAAG5C,SAAS,GACvCN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,IAAKO,GAAG5C,SAAS,GAC5CN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,OAAQO,GAAG5C,SAAS,GAC/CN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,IAAKO,GAAG,UAAW,MAG9CA,EAAI,KACJlD,EAAO,EAAG,IAAM+C,EAAE,KAAMG,GAAG5C,SAAS,GACpCN,EAAO,IAAK,IAAM+C,EAAE,GAAIG,GAAG5C,SAAS,GACpCN,EAAO,IAAK,IAAM+C,EAAE,GAAIG,GAAG5C,SAAS,GACpCL,EAAY,IAAK,IAAMgD,EAAE,CAACN,MAAM,IAAKO,GAAI,WACzCjD,EAAY,IAAK,IAAMgD,EAAE,CAACN,MAAM,OAAQO,GAAI,WAG5CA,EAAI,CAACzC,KAAK,WACVT,EAAO,EAAG,IAAM+C,EAAE,KAAMG,GAAG5C,SAAS,GACpCN,EAAO,IAAK,IAAM+C,EAAE,EAAGG,GAAG5C,SAAS,GACnCN,EAAO,IAAK,IAAM+C,GAAE,EAAMG,GAAG5C,SAAS,GACtCN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,IAAKO,GAAG5C,SAAS,GAC5CN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,SAAUO,GAAG5C,SAAS,GACjDN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,OAAQO,GAAG5C,SAAS,GAC/CN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,QAASO,GAAG,WAAW,GAGlDA,EAAI,CAACzC,KAAK,YACVT,EAAO,EAAG,IAAM+C,EAAE,KAAMG,GAAG5C,SAAS,GACpCN,EAAO,IAAK,IAAM+C,EAAE,EAAGG,GAAG5C,SAAS,GACnCN,EAAO,IAAK,IAAM+C,GAAE,EAAMG,GAAG5C,SAAS,GACtCN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,IAAKO,GAAG5C,SAAS,GAC5CN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,SAAUO,GAAG5C,SAAS,GACjDN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,OAAQO,GAAG5C,SAAS,GAC/CN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,QAASO,GAAG,WAAW,GAClDlD,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,IAAKO,GAAG,UAAW,MAG9CA,EAAI,CAACzC,KAAK,WACVT,EAAO,EAAG,IAAM+C,EAAE,KAAMG,GAAG5C,SAAS,GACpCN,EAAO,IAAK,IAAM+C,EAAE,EAAGG,GAAG5C,SAAS,GACnCN,EAAO,IAAK,IAAM+C,GAAE,EAAMG,GAAG5C,SAAS,GACtCN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,IAAKO,GAAG5C,SAAS,GAC5CN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,MAAOO,GAAG5C,SAAS,GAC9CN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,OAAQO,GAAG5C,SAAS,GAC/CN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,OAAQO,GAAG,UAAW,KAGjDA,EAAI,CAACzC,KAAK,YACVT,EAAO,EAAG,IAAM+C,EAAE,KAAMG,GAAG5C,SAAS,GACpCN,EAAO,IAAK,IAAM+C,EAAE,EAAGG,GAAG5C,SAAS,GACnCN,EAAO,IAAK,IAAM+C,GAAE,EAAMG,GAAG5C,SAAS,GACtCN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,IAAKO,GAAG5C,SAAS,GAC5CN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,MAAOO,GAAG5C,SAAS,GAC9CN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,OAAQO,GAAG5C,SAAS,GAC/CN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,OAAQO,GAAG,UAAW,KACjDlD,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,IAAKO,GAAG,UAAW,MAG9CA,EAAI,CAACzC,KAAK,UACVT,EAAO,EAAG,IAAM+C,EAAE,KAAMG,GAAG5C,SAAS,GACpCN,EAAO,IAAK,IAAM+C,EAAE,IAAKG,GAAG5C,SAAS,GACrCN,EAAO,IAAK,IAAM+C,GAAE,EAAMG,GAAG5C,SAAS,GACtCN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,IAAKO,GAAG5C,SAAS,GAC5CN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,QAASO,GAAG5C,SAAS,GAChDN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,OAAQO,GAAG5C,SAAS,GAC/CN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,SAAUO,GAAG,UAAW,OAGnDA,EAAI,CAACzC,KAAK,WACVT,EAAO,EAAG,IAAM+C,EAAE,KAAMG,GAAG5C,SAAS,GACpCN,EAAO,IAAK,IAAM+C,EAAE,IAAKG,GAAG5C,SAAS,GACrCN,EAAO,IAAK,IAAM+C,GAAE,EAAMG,GAAG5C,SAAS,GACtCN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,IAAKO,GAAG5C,SAAS,GAC5CN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,QAASO,GAAG5C,SAAS,GAChDN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,OAAQO,GAAG5C,SAAS,GAC/CN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,SAAUO,GAAG,UAAW,OACnDlD,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,IAAKO,GAAG,UAAW,MAG9CA,EAAI,CAACzC,KAAK,UACVT,EAAO,EAAG,IAAM+C,EAAE,KAAMG,GAAG5C,SAAS,GACpCN,EAAO,IAAK,IAAM+C,EAAE,GAAIG,GAAG5C,SAAS,GACpCN,EAAO,IAAK,IAAM+C,GAAE,EAAMG,GAAG5C,SAAS,GACtCN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,IAAKO,GAAG5C,SAAS,GAC5CN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,MAAOO,GAAG5C,SAAS,GAC9CN,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,IAAKO,GAAG,UAAW,IAC9ClD,EAAO,IAAK,IAAMiD,EAAE,CAACN,MAAM,OAAQO,GAAG,UAAW,OAGjDA,EAAI,CAACzC,KAAK,UACVT,EAAO,GAAI,IAAM+C,EAAE,KAAMG,GAAG5C,SAAS,GACrCN,EAAO,KAAM,IAAM+C,EAAE,GAAIG,GAAG5C,SAAS,GACrCN,EAAO,KAAM,IAAM+C,EAAE,GAAIG,GAAG5C,SAAS,GACrCL,EAAY,KAAM,IAAMgD,EAAE,CAACN,MAAM,IAAKO,GAAI,WAG1CA,EAAI,CAACzC,KAAK,WACVT,EAAO,GAAI,IAAM+C,EAAE,KAAMG,GAAG5C,SAAS,GACrCN,EAAO,KAAM,IAAM+C,EAAE,GAAIG,GAAG5C,SAAS,GACrCN,EAAO,KAAM,IAAM+C,EAAE,GAAIG,GAAG5C,SAAS,GACrCL,EAAY,KAAM,IAAMgD,EAAE,CAACN,MAAM,IAAKO,GAAI,WAG1CA,EAAI,CAACzC,KAAK,SACVT,EAAO,GAAI,IAAM+C,EAAE,KAAMG,GAAG5C,SAAS,GACrCN,EAAO,KAAM,IAAM+C,EAAE,GAAIG,GAAG5C,SAAS,GACrCN,EAAO,KAAM,IAAM+C,EAAE,GAAIG,GAAG5C,SAAS,GACrCL,EAAY,KAAM,IAAMgD,EAAE,CAACN,MAAM,IAAKO,GAAI,WAG1CA,EAAI,CAACzC,KAAK,UACVT,EAAO,GAAI,IAAM+C,EAAE,KAAMG,GAAG5C,SAAS,GACrCN,EAAO,KAAM,IAAM+C,EAAE,GAAIG,GAAG5C,SAAS,GACrCN,EAAO,KAAM,IAAM+C,EAAE,GAAIG,GAAG5C,SAAS,GACrCL,EAAY,KAAM,IAAMgD,EAAE,CAACN,MAAM,IAAKO,GAAI,WAG1CA,EAAI,CAACzC,KAAK,WAAY0C,KAAK,CAAC,IAC5BnD,EAAO,GAAI,IAAM+C,EAAE,KAAMG,GAAG5C,SAAS,GACrCN,EAAO,KAAM,IAAM+C,EAAE,EAAGG,GAAG5C,SAAS,GACpCN,EAAO,KAAM,IAAM+C,EAAE,EAAGG,GAAG5C,SAAS,GAGpC4C,EAAI,CAACzC,KAAK,SAAkB,MAAA,KAC5BT,EAAO,GAAI,IAAM+C,EAAE,IAAKG,GAAG5C,SAAS,GACpCN,EAAO,KAAM,IAAM+C,EAAE,EAAGG,GAAG5C,SAAS,GAGpC4C,EAAI,CAACzC,KAAK,SAAUmB,SAAS,CAAC,MAAO,QACrC5B,EAAO,GAAI,IAAM+C,EAAE,CAACK,IAAI,EAAGC,IAAI,GAAIH,GAAG5C,SAAS,GAC/CN,EAAO,KAAM,IAAM+C,EAAE,CAACK,IAAI,GAAIF,GAAG5C,SAAS,GAC1CN,EAAO,KAAM,IAAM+C,EAAE,CAACK,IAAI,EAAGC,IAAI,EAAGC,IAAI,GAAIJ,GAAG5C,SAAS,GACxDN,EAAO,KAAM,IAAM+C,EAAE,EAAOG,EAAAA,EAAAA,GAAAA,GAAR,GAAA,CAAWzC,KAAK,aAAYH,SAAS,GAGzD4C,EAAI,CACFzC,KAAK,SACLoB,cAAe,CACb,CAAC,MAAO,KAAM,MAAO,OACrB,CAAC,MAAO,IAAK,OACb,CAAC,MAAO,MAAO,QACf,CAAC,MAAO,SAGR3E,IAAAA,EAAO,CAACqG,IAAI,QAASC,GAAG,IAAKC,IAAI,CAACF,IAAI,MAAOG,IAAI,KAAMC,IAAI,CAACJ,IAAI,MAAO7D,EAAE,OAAQ0B,IAAI,CAACmC,IAAI,QAASC,GAAG,IAAKC,IAAI,CAACF,IAAI,MAAOG,IAAI,KAAMC,IAAI,CAACJ,IAAI,MAAOK,IAAI,MAC7J5D,EAAO,GAAI,IAAM+C,EAAE7F,EAAMgG,GAAG5C,SAAS,GACrCN,EAAO,KAAM,IAAM+C,EAAE7F,EAAKuG,IAAKP,GAAG5C,SAAS,GAC3CN,EAAO,KAAM,IAAM+C,EAAE7F,EAAKyG,IAAIvC,IAAIuC,IAAKT,GAAG5C,SAAS,GACnDN,EAAO,KAAM,IAAM+C,EAAE,EAAOG,EAAAA,EAAAA,GAAAA,GAAR,GAAA,CAAWzC,KAAK,aAAYH,SAAS,GAGzD4C,EAAI,CAACzC,KAAK,UAAWuB,WAAW,KAChChC,EAAO,GAAI,IAAM+C,GAAG,IAAKG,GAAG5C,SAAS,GACrCN,EAAO,KAAM,IAAM+C,EAAE,IAAKG,GAAG5C,SAAS,GACtCN,EAAO,KAAM,IAAM+C,EAAE,KAAMG,GAAG5C,SAAS,GACvCN,EAAO,KAAM,IAAM+C,GAAE,EAAUG,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAczC,KAAK,aAAYH,SAAS,GAG5D4C,EAAI,CAACzC,KAAK,WAAYwB,QAAQ,IAC9BjC,EAAO,GAAI,IAAM+C,EAAE,GAAIG,GAAG5C,SAAS,GACnCN,EAAO,KAAM,IAAM+C,EAAE,GAAIG,GAAG5C,SAAS,GACrCN,EAAO,KAAM,IAAM+C,EAAE,KAAMG,GAAG5C,SAAS,GACvCN,EAAO,KAAM,IAAM+C,GAAE,EAAUG,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAczC,KAAK,aAAYH,SAAS,GAG5D4C,EAAI,CAACzC,KAAK,WAAYyB,iBAAiB,IACvClC,EAAO,GAAI,IAAM+C,EAAE,EAAGG,GAAG5C,SAAS,GAClCN,EAAO,KAAM,IAAM+C,EAAE,GAAIG,GAAG5C,SAAS,GACrCN,EAAO,KAAM,IAAM+C,EAAE,KAAMG,GAAG5C,SAAS,GACvCN,EAAO,KAAM,IAAM+C,GAAE,EAAUG,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAczC,KAAK,aAAYH,SAAS,GAG5D4C,EAAI,CAACzC,KAAK,WAAY0B,QAAQ,IAC9BnC,EAAO,GAAI,IAAM+C,EAAE,GAAIG,GAAG5C,SAAS,GACnCN,EAAO,KAAM,IAAM+C,EAAE,EAAGG,GAAG5C,SAAS,GACpCN,EAAO,KAAM,IAAM+C,EAAE,KAAMG,GAAG5C,SAAS,GACvCN,EAAO,KAAM,IAAM+C,GAAE,EAAUG,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAczC,KAAK,aAAYH,SAAS,GAG5D4C,EAAI,CAACzC,KAAK,WAAY2B,iBAAiB,IACvCpC,EAAO,GAAI,IAAM+C,EAAE,GAAIG,GAAG5C,SAAS,GACnCN,EAAO,KAAM,IAAM+C,EAAE,GAAIG,GAAG5C,SAAS,GACrCN,EAAO,KAAM,IAAM+C,EAAE,KAAMG,GAAG5C,SAAS,GACvCN,EAAO,KAAM,IAAM+C,GAAE,EAAUG,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAczC,KAAK,aAAYH,SAAS,GAG5D4C,EAAI,CAACzC,KAAK,SAAU4B,UAAU,GAC9BrC,EAAO,GAAI,IAAM+C,EAAE,MAAOG,GAAG5C,SAAS,GACtCN,EAAO,KAAM,IAAM+C,EAAE,OAAQG,GAAG5C,SAAS,GACzCN,EAAO,KAAM,IAAM+C,EAAE,GAAIG,GAAG5C,SAAS,GACrCN,EAAO,KAAM,IAAM+C,GAAE,EAAUG,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAczC,KAAK,aAAYH,SAAS,GAG5D4C,EAAI,CAACzC,KAAK,SAAU6B,UAAU,GAC9BtC,EAAO,GAAI,IAAM+C,EAAE,MAAOG,GAAG5C,SAAS,GACtCN,EAAO,KAAM,IAAM+C,EAAE,KAAMG,GAAG5C,SAAS,GACvCN,EAAO,KAAM,IAAM+C,EAAE,GAAIG,GAAG5C,SAAS,GACrCN,EAAO,KAAM,IAAM+C,GAAE,EAAUG,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAczC,KAAK,aAAYH,SAAS,GAG5D4C,EAAI,CAACzC,KAAK,SAAUoD,QAAQ,uEAC5B7D,EAAO,GAAI,IAAM+C,EAAE,mBAAoBG,GAAG5C,SAAS,GACnDN,EAAO,KAAM,IAAM+C,EAAE,cAAeG,GAAG5C,SAAS,GAChDN,EAAO,KAAM,IAAM+C,GAAE,EAAUG,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAczC,KAAK,aAAYH,SAAS,GAG5D4C,EAAI,CAACzC,KAAK,SAAU+B,SAAS,GAC7BxC,EAAO,GAAI,IAAM+C,EAAE,CAAC,EAAE,EAAE,GAAIG,GAAG5C,SAAS,GACxCN,EAAO,KAAM,IAAM+C,EAAE,CAAC,EAAE,EAAE,EAAE,GAAIG,GAAG5C,SAAS,GAC5CN,EAAO,KAAM,IAAM+C,EAAE,KAAMG,GAAG5C,SAAS,GACvCN,EAAO,KAAM,IAAM+C,GAAE,EAAUG,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAczC,KAAK,aAAYH,SAAS,GAG5D4C,EAAI,CAACzC,KAAK,SAAUgC,SAAS,GAC7BzC,EAAO,GAAI,IAAM+C,EAAE,CAAC,EAAE,EAAE,GAAIG,GAAG5C,SAAS,GACxCN,EAAO,KAAM,IAAM+C,EAAE,CAAC,EAAE,EAAE,EAAE,GAAIG,GAAG5C,SAAS,GAC5CN,EAAO,KAAM,IAAM+C,EAAE,KAAMG,GAAG5C,SAAS,GACvCN,EAAO,KAAM,IAAM+C,GAAE,EAAUG,EAAAA,EAAAA,GAAAA,GAAX,GAAA,CAAczC,KAAK,aAAYH,SAAS,IA/NvD,QAAA,IAAA;;ACkCP,aApCA,IAAA,EAAA,EAAA,QAAA,UACA,EAAA,EAAA,QAAA,aAmCA,SAAA,IAAA,GAAA,mBAAA,QAAA,OAAA,KAAA,IAAA,EAAA,IAAA,QAAA,OAAA,EAAA,WAAA,OAAA,GAAA,EAAA,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,GAAA,OAAA,GAAA,iBAAA,GAAA,mBAAA,EAAA,MAAA,CAAA,QAAA,GAAA,IAAA,EAAA,IAAA,GAAA,GAAA,EAAA,IAAA,GAAA,OAAA,EAAA,IAAA,GAAA,IAAA,EAAA,GAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,KAAA,IAAA,EAAA,KAAA,EAAA,KAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAjCA,MAAMN,EAAS,CAAC8D,EAAOC,EAAOzH,KACtB0H,MAAAA,EAAKD,IACPC,GAAM1H,EACR2H,QAAQC,IAAI,cAAeJ,EAAO,MAElCG,QAAQC,IAAI,cAAeJ,EAAO,KAAME,EAAI1H,IAI1C2D,EAAc,CAAC6D,EAAOC,EAAOI,KAC7BC,IAAAA,EAAS,KACT,IACSL,IACXK,EAAS,WACT,MAAOC,GACHA,GAAAA,aAAa9F,OAAS8F,EAAE9D,QAAQ+D,WAAWH,GAE7C,YADAF,QAAQC,IAAI,cAAeJ,EAAO,MAGlCM,EAAS,qBAAuBC,EAAE9D,QAGtC0D,QAAQC,IAAI,cAAeJ,EAAO,KAAMM,IAGpCG,EAAU,CAACC,EAAG3F,KAClBoF,QAAQC,IAAI,eAAiBrF,GAC7B2F,EAAEzE,IAAIC,EAAQC,GACdgE,QAAQC,IAAI,cAAgBrF,GAC5BoF,QAAQC,IAAI,KAGdK,EAAQrE,EAAG,OACXqE,EAAQvB,EAAG","file":"_index.js","sourceRoot":"..\\..\\tests","sourcesContent":["//@ts-check\r\n\r\n/**\r\n * Returns true if x is an string representation of an integer value.\r\n * @param {any} x\r\n * @returns {boolean} \r\n */\r\nexport const isIntStr = (x) => {\r\n  const n = +x\r\n  return (n % 1 === 0 && x === \"\" + n)\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} path \r\n * @returns {string}\r\n */\r\nexport const normalizePath = (path) => {\r\n  const frags = path.split('/')\r\n  for (let i = 1; i < frags.length; i++) {\r\n    if (isIntStr(frags[i])) {\r\n      frags[i] = '*'\r\n    }\r\n  }\r\n  return frags.join('/')\r\n}\r\n\r\n/**\r\n * \r\n * @param {(string | number)[]} path\r\n * @returns {string} \r\n */\r\nexport const normalizePathArray = (path) => {\r\n  let rv = ''\r\n  for (let i = 0; i < path.length; i++) {\r\n    if (typeof path[i] == 'number' || isIntStr(path[i])) {\r\n      rv += '/*'\r\n    } else {\r\n      rv += '/' + path[i]\r\n    }\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} path \r\n * @returns {(string | number)[]}\r\n */\r\nexport const pathToArray = (path) => {\r\n  const frags = path.split('/')\r\n  const rv = []\r\n  for (let i = 1; i < frags.length; i++) {\r\n    rv.push(isIntStr(frags[i]) ? +frags[i] : frags[i])\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * A variant of `typeof`, which handles null and Array appropreately.\r\n * @param {null|array|object|boolean|number|string} x \r\n * @returns {string}\r\n */\r\nexport const typeOf = (x) => x === null ? 'null' : Array.isArray(x) ? 'array' : typeof x\r\n\r\n/**\r\n * @type {{}}\r\n */\r\nexport const emptyObject = {}\r\n\r\n/**\r\n * @template T\r\n * @type {T[]}\r\n */\r\nexport const emptyArray = []","//@ts-check\r\n\r\nimport {normalizePath, typeOf, isIntStr, normalizePathArray} from './utils'\r\nimport {hasPath as rhasPath, init, path as rpath, assocPath, insert, last, dissoc, remove as rremove, update } from 'ramda'\r\n\r\n/**\r\n * \r\n * @typedef {import(\"./schema\").Json} Json\r\n * @typedef {import(\"./schema\").Schema} Schema\r\n * @typedef {import(\"./schema\").Slot} Slot\r\n * @typedef {import(\"./schema\").SchemaDb} SchemaDb\r\n * @typedef {{\r\n *   tree: Json, \r\n *   schemaDb: SchemaDb, \r\n *   validate: (value:any, schema:Schema) => Slot\r\n * }} Env\r\n */\r\n\r\n\r\n/**\r\n * see: https://github.com/ramda/ramda/pull/2841\r\n * Anyway, here we fix the original behavior.\r\n * @param {string[]} path \r\n * @param {any} x \r\n * @return {boolean}\r\n */\r\nconst hasPath = (path, x) => {\r\n  if (! path.length) return true\r\n  return rhasPath(path, x)\r\n}\r\n\r\nconst init2 = (list) => {\r\n  return init(init(list))\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * \r\n * @param {Json} data \r\n * @param {string} path \r\n * @param {SchemaDb} schemaDb \r\n * @param {(value:any, schema:Schema) => Slot} validate \r\n * @returns {Slot}\r\n */\r\nconst wrap = (data, path, schemaDb, validate) => {\r\n  /** @type {(data:Json, path:string) => Slot} */\r\n  const inner = (data, path) => {\r\n    switch (typeOf(data)) {\r\n      case 'array': \r\n        const es = []\r\n        const path2 = path + '/*'\r\n        for (let i = 0; i < /** @type {Json[]} */ (data).length; i++) {\r\n          es[i] = inner(data[i], path2)\r\n        }\r\n        const xa = validate(es, schemaDb[path])\r\n        return xa\r\n      case 'object': \r\n        const rec = {}\r\n        for (let p in /** @type {{[name:string]:Json}} */ (data)) {\r\n          rec[p] = inner(data[p], path + '/' + p)\r\n        }\r\n        const xo = validate(rec, schemaDb[path])\r\n        return xo\r\n      default: \r\n        const xs = validate(data, schemaDb[path])\r\n        return xs\r\n    }\r\n  }\r\n  return inner(data, path)\r\n}\r\n\r\n/**\r\n * \r\n * @param {Json} tree \r\n * @returns {Json}\r\n */\r\nconst strip = (tree) => {\r\n  const root = tree['@value']\r\n  switch (typeOf(root)) {\r\n    case 'array': \r\n      const es = []\r\n      for (let i = 0; i < root.length; i++) {\r\n        es[i] = strip(root[i])\r\n      }\r\n      return es\r\n    case 'object': \r\n      const rec = {}\r\n      for (let p in root) {\r\n        rec[p] = strip(root[p])\r\n      }\r\n      return rec\r\n    default: \r\n      return root\r\n  }\r\n}\r\n\r\n/**\r\n * Makes env.\r\n * @param {Json} data \r\n * @param {SchemaDb} schemaDb \r\n * @param {(value:any, schema:Schema) => Slot} validate\r\n * @returns {Env}\r\n */\r\nexport const makeEnv = (data, schemaDb, validate) => {\r\n  const tree = wrap(data, \"\", schemaDb, validate)\r\n  return {\r\n    tree, \r\n    schemaDb, \r\n    validate\r\n  }\r\n}\r\n\r\n/**\r\n * Internalizes a path\r\n * @param {string} path \r\n */\r\nconst internPath = (path) => {\r\n  const frags = path.split('/')\r\n  const rv = []\r\n  for (let i = 1; i < frags.length; i++) {\r\n    rv.push('@value')\r\n    rv.push(isIntStr(frags[i]) ? +frags[i] : frags[i])\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} path \r\n * @param {Env} env \r\n */\r\nexport const test = (path, env) => {\r\n  return hasPath(/** @type {string[]} */ (internPath(path)), env.tree)\r\n}\r\n\r\n/**\r\n * Extracts a subtree of Env.\r\n * @param {string} path\r\n * @param {Env} env\r\n * @returns {Json}\r\n */\r\nexport const extract = (path, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const slot = rpath(epath, env.tree)\r\n  if (! slot) {\r\n    throw new Error('extract/1: not found: ' + path)\r\n  }\r\n  return strip(slot)\r\n}\r\n\r\n/**\r\n * Low-level api.\r\n * @param {string} path \r\n * @param {Env} env\r\n * @returns {Slot} \r\n */\r\nexport const getSlot = (path, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const slot = rpath(epath, env.tree)\r\n  if (! slot) {\r\n    throw new Error('getSlot/1: not found: ' + path)\r\n  }\r\n  return slot\r\n}\r\n\r\n/**\r\n * Low-level api. This function executes neither validation nor coercion.\r\n * @param {string} path \r\n * @param {Slot} slot \r\n * @param {Env} env\r\n * @returns {Env} \r\n */\r\nexport const setSlot = (path, slot, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const slot0 = rpath(epath, env.tree)\r\n  if (! slot) {\r\n    throw new Error('setSlot/1: not found: ' + path)\r\n  }\r\n  const tree = assocPath(epath, slot, env.tree)\r\n  return {...env, tree}\r\n}\r\n\r\n/**\r\n * Adds value to env. `add' function of JSON patch.\r\n * @param {string} path \r\n * @param {Json} value \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const add = (path, value, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const location = init2(epath)\r\n  const name = last(epath)\r\n  const slot0 = rpath(location, env.tree)\r\n  const type0 = typeOf(slot0['@value'])\r\n  if (type0 != 'object' && type0 != 'array') {\r\n    throw new Error('add/1 neither an object nor an array: ' + path)\r\n  }\r\n  if (type0 == 'array') {\r\n    // insert into array\r\n    const index = (name === '-') ? slot0['@value'].length : name\r\n    if (typeof index != 'number' || index % 1 !== 0) {\r\n      throw new Error('add/2 invalid index: ' + path)\r\n    }\r\n    if (index < 0 || index > slot0['@value'].length) {\r\n      throw new Error('add/3 index out of range: ' + path)\r\n    }\r\n    const value1 = wrap(value, normalizePath(path), env.schemaDb, env.validate)\r\n    const lis = insert(index, value1, slot0['@value'])\r\n    const slot = env.validate(lis, env.schemaDb[normalizePathArray(location)])\r\n    const tree = assocPath(location, slot, env.tree)\r\n    return {...env, tree}\r\n  } else {\r\n    // define or replace into object\r\n    if (typeof name != 'string') {\r\n      throw new Error('add/4 invalid name: ' + path)\r\n    }\r\n    const value1 = wrap(value, normalizePath(path), env.schemaDb, env.validate)\r\n    const rec = {...slot0['@value'], [name]:value1}\r\n    const slot = env.validate(rec, env.schemaDb[normalizePathArray(location)])\r\n    const tree = assocPath(location, slot, env.tree)\r\n    return {...env, tree}\r\n  }\r\n}\r\n\r\n/**\r\n * Removes a value specified by path from env. `remove' function of JSON patch.\r\n * @param {string} path \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const remove = (path, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const location = init2(epath)\r\n  const name = last(epath)\r\n  const slot0 = rpath(location, env.tree)\r\n  const type0 = typeOf(slot0['@value'])\r\n  if (type0 != 'object' && type0 != 'array') {\r\n    throw new Error('remove/1 neither an object nor an array: ' + path)\r\n  }\r\n  if (type0 == 'array') {\r\n    // removes from array\r\n    if (typeof name != 'number' || name % 1 !== 0) {\r\n      throw new Error('remove/2 invalid index: ' + path)\r\n    }\r\n    if (name < 0 || name >= slot0['@value'].length) {\r\n      throw new Error('remove/3 out of range: ' + path)\r\n    }\r\n    const lis = rremove(name, 1, slot0['@value'])\r\n    const slot = env.validate(lis, env.schemaDb[normalizePathArray(location)])\r\n    const tree = assocPath(location, slot, env.tree)\r\n    return {...env, tree}\r\n  } else {\r\n    // delete property from object\r\n    if (! slot0['@value'].hasOwnProperty(name)) {\r\n      throw new Error('remove/4: property not found: ' + path)\r\n    }\r\n    const rec = dissoc(name, slot0['@value'])\r\n    const slot = env.validate(rec, env.schemaDb[normalizePathArray(location)])\r\n    const tree = assocPath(location, slot, env.tree)\r\n    return {...env, tree}\r\n  }\r\n}\r\n\r\n/**\r\n * Replaces a value specified by path into value.  Implements replace function of JSON patch.\r\n * @param {string} path \r\n * @param {Json} value \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const replace = (path, value, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const location = init2(epath)\r\n  const name = last(epath)\r\n  const slot0 = rpath(location, env.tree)\r\n  const type0 = typeOf(slot0['@value'])\r\n  if (type0 != 'object' && type0 != 'array') {\r\n    throw new Error('replace/1 neither an object nor an array: ' + path)\r\n  }\r\n  if (type0 == 'array') {\r\n    // replace an element in array\r\n    if (typeof name != 'number' || name % 1 !== 0) {\r\n      throw new Error('replace/2 invalid index: ' + path)\r\n    }\r\n    if (name < 0 || name >= slot0['@value'].length) {\r\n      throw new Error('replace/3 out of range: ' + path)\r\n    }\r\n    const value1 = wrap(value, normalizePath(path), env.schemaDb, env.validate)\r\n    const lis = update(name, value1, slot0['@value'])\r\n    const slot = env.validate(lis, env.schemaDb[normalizePathArray(location)])\r\n    const tree = assocPath(location, slot, env.tree)\r\n    return {...env, tree}\r\n  } else {\r\n    // replace a property of object\r\n    if (typeof name != 'string') {\r\n      throw new Error('replace/4 invalid name: ' + path)\r\n    }\r\n    const value1 = wrap(value, normalizePath(path), env.schemaDb, env.validate)\r\n    const rec = {...slot0['@value'], [name]:value1}\r\n    const slot = env.validate(rec, env.schemaDb[normalizePathArray(location)])\r\n    const tree = assocPath(location, slot, env.tree)\r\n    return {...env, tree}\r\n  }\r\n}\r\n\r\n/**\r\n * Moves a value located in from, to a location specified by path.  Implements move function of JSON patch.\r\n * @param {string} from \r\n * @param {string} path \r\n * @param {Env} env\r\n * @returns {Env} \r\n */\r\nexport const move = (from, path, env) => {\r\n  const value = extract(from, env)\r\n  env = remove(from, env)\r\n  env = add(path, value, env)\r\n  return env\r\n}\r\n\r\n/**\r\n * Copies a value located in from, to a location specified by path.  Impelementing copy function of JSON patch.\r\n * @param {string} from \r\n * @param {string} path \r\n * @param {Env} env\r\n * @returns {Env} \r\n */\r\nexport const copy = (from, path, env) => {\r\n  const value = extract(from, env)\r\n  env = add(path, value, env)\r\n  return env\r\n}\r\n\r\n/**\r\n * By f, maps every slot descending to a location specified by path.\r\n * @param {(slot:Slot, path:string) => Slot} f \r\n * @param {string} path \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const mapDeep = (f, path, env) => {\r\n  const inner = (slot0, path) => {\r\n    const value0 = slot0['@value']\r\n    switch (typeOf(value0)) {\r\n      case 'array': \r\n        const lis = []\r\n        for (let i = 0; i < value0.length; i++) {\r\n          lis[i] = inner(value0[i], path + '/' + i)\r\n        }\r\n        return {...f(slot0, path), '@value':lis}\r\n      case 'object': \r\n        const rec = {}\r\n        for (let p in value0) {\r\n          rec[p] = inner(value0[p], path + '/' + p)\r\n        }\r\n        return {...f(slot0, path), '@value':rec}\r\n      default: \r\n        return {...f(slot0, path), '@value':value0}\r\n    }\r\n  }\r\n  const epath = internPath(path)\r\n  const slot0 = rpath(epath, env.tree)\r\n  if (! slot0) {\r\n    throw new Error('mapDeep/1: not found: ' + path)\r\n  }\r\n  const slot = inner(slot0, path)\r\n  const tree = assocPath(epath, slot, env.tree)\r\n  return {...env, tree}\r\n}\r\n\r\n/**\r\n * By f, deeply reduces a subtree of path.\r\n * @template T\r\n * @param {(cur:T, slot:Slot, path:String) => T} f \r\n * @param {T} cur \r\n * @param {string} path \r\n * @param {Env} env \r\n */\r\nexport const reduceDeep = (f, cur, path, env) => {\r\n  const inner = (cur, slot, path) => {\r\n    const value0 = slot['@value']\r\n    switch (typeOf(value0)) {\r\n      case 'array': \r\n        for (let i = 0; i < value0.length; i++) {\r\n          cur = inner(cur, value0[i], path + '/' + i)\r\n        }\r\n        return f(cur, slot, path)\r\n      case 'object': \r\n        for (let p in value0) {\r\n          cur = inner(cur, value0[p], path + '/' + p)\r\n        }\r\n        return f(cur, slot, path)\r\n      default: \r\n        return f(cur, slot, path)\r\n    }\r\n  }\r\n  const epath = internPath(path)\r\n  const slot = rpath(epath, env.tree)\r\n  if (! slot) {\r\n    throw new Error('reduceDeep/1: not found: ' + path)\r\n  }\r\n  return inner(cur, slot, path)\r\n}\r\n","\r\nimport * as E from '../src/env'\r\n\r\nconst validate = (value, schema) => {\r\n  //console.log('validate called', value, path)\r\n  return {'@value':value}\r\n}\r\n\r\nexport const run = (assert, assertError) => {\r\n  const json = {\r\n    name: 'Bob', \r\n    age: 24, \r\n    buddies: [\r\n      'Mam', 'Dad'\r\n    ]\r\n  }\r\n\r\n  let env = E.makeEnv(json, {}, validate)\r\n  assert(1, () => E.extract('/name', env), 'Bob')\r\n  assert(1.1, () => E.test('/name', env), true)\r\n  assert(1.2, () => E.test('/foo', env), false)\r\n\r\n  env = E.add('/email', 'info@example.com', env)\r\n  assert(2, () => E.extract('/email', env), 'info@example.com')\r\n  assertError(2.1, () => E.extract('/foo', env), 'extract/')\r\n\r\n  assert(3, () => E.extract('/buddies/1', env), 'Dad')\r\n\r\n  env = E.add('/buddies/1', 'Pochi', env)  // Mam,Pochi,Dad\r\n  assert(4, () => E.extract('/buddies/1', env), 'Pochi')\r\n  assertError(4.1, () => E.extract('/buddies/5', env), 'extract/')\r\n\r\n  env = E.add('/buddies/-', 'Komino', env)  // Mam,Pochi,Dad,Komino\r\n  assert(5, () => E.extract('/buddies/3', env), 'Komino')\r\n\r\n  env = E.remove('/buddies/3', env)  // Mam,Pochi,Dad\r\n  assert(6, () => E.extract('/buddies', env).join(','), 'Mam,Pochi,Dad')\r\n  assertError(6.1, () => E.extract('/buddies/3', env), 'extract/')\r\n\r\n  env = E.remove('/email', env)\r\n  assertError(7, () => E.extract('/email', env), 'extract/')\r\n  assertError(7.1, () => E.remove('/email', env), 'remove/')\r\n\r\n  assert(8, () => {\r\n    let slot80 = E.getSlot('/name', env)\r\n    slot80 = {...slot80, invalid:true}\r\n    env = E.setSlot('/name', slot80, env)\r\n    slot80 = E.getSlot('/name', env)\r\n    return slot80.invalid\r\n  }, true)\r\n\r\n  env = E.replace('/age', 30, env)\r\n  assert(9, () => E.extract('/age', env), 30)\r\n\r\n  env = E.add('/id', 'TS1101', env)\r\n  env = E.move('/id', '/employeeId', env)\r\n  assert(10, () => E.extract('/employeeId', env), 'TS1101')\r\n  assertError(10.1, () => E.extract('/id', env), 'extract/')\r\n\r\n  env = E.copy('/employeeId', '/id', env)\r\n  assert(11, () => E.extract('/employeeId', env), 'TS1101')\r\n  assert(11.1, () => E.extract('/id', env), 'TS1101')\r\n\r\n  assert(11.9, () => E.extract('/buddies', env).join(','), 'Mam,Pochi,Dad')\r\n  env = E.move('/buddies/2', '/buddies/0', env)  // Dad,Mam,Pochi\r\n  assert(12, () => E.extract('/buddies', env).join(','), 'Dad,Mam,Pochi')\r\n\r\n  env = E.copy('/buddies/0', '/buddies/2', env)  // Dad,Mam,Dad,Pochi\r\n  assert(13, () => E.extract('/buddies', env), 'Dad,Mam,Dad,Pochi')\r\n\r\n  env = E.mapDeep((slot, path) => ({...slot, message:'yeah'}), '/buddies', env)\r\n  assert(14, () => E.getSlot('/buddies', env).message, 'yeah')\r\n  assert(14.1, () => E.getSlot('/buddies/0', env).message, 'yeah')\r\n  assert(14.2, () => E.getSlot('/name', env).message || '', '')\r\n\r\n  assert(15, () => {\r\n    return E.reduceDeep((cur, slot, path) => {\r\n      if (path == '/buddies') return cur\r\n      return cur + `[${slot['@value']}]`\r\n    }, \"\", '/buddies', env)\r\n  }, '[Dad][Mam][Dad][Pochi]')\r\n}\r\n\r\n","//@ts-check\r\n\r\nimport {emptyObject, typeOf} from './utils'\r\n\r\n/**\r\n * @typedef {null|number|string|boolean|any[]|{[name:string]:any}} Json \r\n * @typedef {{\r\n *   invalid?:boolean, \r\n *   message?:string, \r\n *   touched?:boolean, \r\n *   input?:string, \r\n *   ['@value']?:Json\r\n * }} Slot\r\n * @typedef {{\r\n *   type:string, \r\n *   [rule:string]:Json\r\n * }} Schema\r\n * @typedef {(param:Json, value:Json) => true|string} RuleFunc\r\n * @typedef {{[name:string]:RuleFunc}} Rules\r\n * @typedef {{[key:string]:string}} Dictionary\r\n * @typedef {{[path:string]:Schema}} SchemaDb\r\n */\r\n\r\n/**\r\n * Returns true if type specification allows null.\r\n * @param {string|null|undefined} type a type in schema\r\n */\r\nconst nullable = (type) => {\r\n  if (! type) return true\r\n  const lastChar = type.charAt(type.length - 1)\r\n  return type == 'null' || lastChar == '?'\r\n}\r\n\r\n/**\r\n * Maps error codes to messages. Use your own messages for localization.\r\n * @type {Dictionary}\r\n */\r\nexport const defaultMessages = {\r\n  'schema.ruleError.enum': 'Invalid input',   // 不正な入力です\r\n  'schema.ruleError.const': 'Invalid input',   // 不正な入力です\r\n  'schema.ruleError.required': 'Missing properties',  // フィールドが不足しています\r\n  'schema.ruleError.requiredAnyOf': 'Unknown instance',  // 未知のインスタンスです\r\n  'schema.ruleError.multipleOf': 'Please enter a multiple of {{0}}',  // %Sの倍数を入力してください\r\n  'schema.ruleError.maximum': 'Please enter {{0}} or less',  // %s以下を入力してください\r\n  'schema.ruleError.exclusiveMaximum': 'Please enter a number less than {{0}}',  // %sより小さい数を入力してください\r\n  'schema.ruleError.minimum': 'Please enter {{0}} or more',  // %s以上を入力してください\r\n  'schema.ruleError.exclusiveMinimum': 'Please enter a number more than {{0}}',  // %sより大きい数を入力してください\r\n  'schema.ruleError.maxLength': 'Please enter no more than {{0}} characters',  // %s文字以下で入力してください\r\n  'schema.ruleError.minLength0': 'Please enter',  // 入力してください\r\n  'schema.ruleError.minLength': 'Please enter at least {{0}} characters',  // %s文字以上で入力してください\r\n  'schema.ruleError.pattern': 'Invalid format',  // 形式が不正です\r\n  'schema.ruleError.maxItems': 'Please make it less than or equal to {{0}}',  // %s個以下にしてください\r\n  'schema.ruleError.minItems': 'Please make it more than or equal to {{0}}',  // %s個以上にしてください\r\n  'schema.typeError': 'Invalid type',  // 不正な型です\r\n  'schema.scanError.null': 'Invalid input',  // 不正な入力です\r\n  'schema.scanError.empty': 'Please select',  // 選択してください\r\n  'schema.scanError.number': \"Please enter a number\",  // 数値を入力してください\r\n  'schema.scanError.integer': \"Please enter an integer\",  // 整数を入力してください\r\n  'schema.scanError.boolean': \"Please enter a boolean value\"  // 真偽値を入力してください\r\n}\r\n\r\n/**\r\n * \r\n * @param {Json} schema \r\n * @returns {SchemaDb}\r\n */\r\nexport const buildDb = (schema) => {\r\n  const db = /** @type SchemaDb */ ({})\r\n  const inner = (schema, path) => {\r\n    db[path] = schema\r\n    switch (schema.type) {\r\n      case 'object': \r\n      case 'object?': \r\n        for (let p in schema.properties) {\r\n          inner(schema.properties[p], path + '/' + p)\r\n        }\r\n        break\r\n      case 'array': \r\n      case 'array?': \r\n        inner(schema.items, path + '/*')\r\n        break\r\n      default: \r\n        break\r\n    }\r\n  }\r\n  inner(schema, \"\")\r\n  return db\r\n}\r\n\r\n/**\r\n * Makes a localized message for error code.\r\n * @param {Dictionary} dict \r\n * @param {string} code an error code\r\n * @param {Json} arg a parameter for validation rule\r\n * @return {string}\r\n */\r\nconst makeMessage = (dict, code, arg = null) => {\r\n  const format = dict[code] || (code + ': {{0}}')\r\n  return format.replace('{{0}}', '' + arg)\r\n}\r\n\r\n/**\r\n * Applies validation rules for a specified value.\r\n * @param {Json} value a value which validation rules are applied to\r\n * @param {Slot} slot a prototype of a slot to return\r\n * @param {Schema} schema \r\n * @param {Rules} rules \r\n * @param {Dictionary} dict\r\n * @return {Slot}\r\n */\r\nconst cook = (value, slot, schema, rules, dict) => {\r\n  for (let p in schema) {\r\n    const f = rules[p]\r\n    if (! f) continue\r\n    const result = f(schema[p], value)\r\n    if (result !== true) {\r\n      const message = makeMessage(dict, result, schema[p])\r\n      return {...slot, '@value':value, invalid:true, message}\r\n    }\r\n  }\r\n  return {...slot, '@value':value, invalid:false, message:''}\r\n}\r\n\r\n/**\r\n * Returns true if the value is in an specified type\r\n * @param {Json} value\r\n * @param {string} type \r\n * @returns {boolean}\r\n */\r\nconst testType = (value, type) => {\r\n  if (! type) return true\r\n  if (value === null) {\r\n    return nullable(type)\r\n  } else {\r\n    switch (type) {\r\n      case 'null': \r\n        return false\r\n      case 'number':  // FALLTHRU\r\n      case 'number?': \r\n        return typeof value == 'number'\r\n      case 'integer':  // FALLTHRU\r\n      case 'integer?': \r\n        return (typeof value == 'number' && value % 1 === 0)\r\n      case 'boolean':  // FALLTHRU\r\n      case 'boolean?': \r\n        return typeof value == 'boolean'\r\n      case 'string': \r\n        return true\r\n      case 'object':  // FALLTHRU\r\n      case 'object?': \r\n        return (typeof value == 'object' && value !== null)\r\n      case 'array':  // FALLTHRU\r\n      case 'array?': \r\n        return Array.isArray(value)\r\n      default: \r\n        throw new Error('unknown type: ' + type)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * validation rules.\r\n * @type {Rules}\r\n */\r\nexport const defaultRules = {\r\n  'enum': (param, value) => {\r\n    if (! Array.isArray(param)) throw new Error('invalid parameter')\r\n    for (let i = 0; i < param.length; i++) {\r\n      if (param[i] === value) return true\r\n    }\r\n    return 'schema.ruleError.enum'\r\n  }, \r\n  'const': (param, value) => {\r\n    if (param === value) return true\r\n    return 'schema.ruleError.const'\r\n  }, \r\n  required: (param, value) => {\r\n    if (! Array.isArray(param)) throw new Error('invalid parameter')\r\n    if (typeof value != 'object') return true\r\n    for (let i = 0; i < param.length; i++) {\r\n      if (! value.hasOwnProperty(param[i])) return 'schema.ruleError.required'\r\n    }\r\n    return true\r\n  }, \r\n  requiredAnyOf: (param, value) => {\r\n    if (! Array.isArray(param)) throw new Error('invalid parameter')\r\n    if (typeof value != 'object') return true\r\n    const test = f => value.hasOwnProperty(f)\r\n    for (let fs of param) {\r\n      if (fs.every(test)) return true\r\n    }\r\n    return 'schema.ruleError.requiredAnyOf'\r\n  }, \r\n  multipleOf: (param, value) => {\r\n    if (typeof param != 'number') throw new Error('invalid parameter')\r\n    if (typeof value != 'number') return true\r\n    if (value % param === 0) return true\r\n    return 'schema.ruleError.multipleOf'\r\n  }, \r\n  // TODO multipleOf(number/integer)\r\n  maximum: (param, value) => {\r\n    if (typeof value != 'number') return true\r\n    if (param >= value) return true\r\n    return 'schema.ruleError.maximum'\r\n  }, \r\n  exclusiveMaximum: (param, value) => {\r\n    if (typeof value != 'number') return true\r\n    if (param > value) return true\r\n    return 'schema.ruleError.exclusiveMaximum'\r\n  }, \r\n  minimum: (param, value) => {\r\n    if (typeof value != 'number') return true\r\n    if (param <= value) return true\r\n    return 'schema.ruleError.minimum'\r\n  }, \r\n  exclusiveMinimum: (param, value) => {\r\n    if (typeof value != 'number') return true\r\n    if (param < value) return true\r\n    return 'schema.ruleError.exclusiveMinimum'\r\n  }, \r\n  maxLength: (param, value) => {\r\n    if (typeof value != 'string') return true\r\n    if (value.length <= param) return true\r\n    return 'schema.ruleError.maxLength'\r\n  }, \r\n  minLength: (param, value) => {\r\n    if (typeof value != 'string') return true\r\n    if (value.length >= param) return true\r\n    return (param == 1) ? 'schema.ruleError.minLength0' : 'schema.ruleError.minLength'\r\n  }, \r\n  'pattern': (param, value) => {\r\n    if (typeof param != 'string') throw new Error('invalid parameter')\r\n    if (typeof value != 'string') return true\r\n    if (new RegExp(param).test(value)) return true\r\n    return 'schema.ruleError.pattern'\r\n  }, \r\n  maxItems: (param, value) => {\r\n    if (typeof param != 'number') throw new Error('invalid parameter')\r\n    if (! Array.isArray(value)) return true\r\n    if (value.length <= param) return true\r\n    return 'schema.ruleError.maxItems'\r\n  }, \r\n  minItems: (param, value) => {\r\n    if (typeof param != 'number') throw new Error('invalid parameter')\r\n    if (! Array.isArray(value)) return true\r\n    if (value.length >= param) return true\r\n    return 'schema.ruleError.minItems'\r\n  }\r\n}\r\n\r\n/**\r\n * Validates a value with a schema.\r\n * @description shallow validation\r\n * @param {Rules} rules\r\n * @param {Dictionary} dict\r\n * @returns {(value:any, schema:Schema) => Slot} \r\n */\r\nexport const validate = (rules, dict) => (value, schema) => {\r\n  /** @type {Slot} */\r\n  const slot = !schema ? {'@value':value, invalid:false, touched:value !== null && value !== \"\", message:''} \r\n    : testType(value, schema.type) ? cook(value, emptyObject, schema, rules, dict)\r\n    : {'@value':value, invalid:true, touched:value !== null && value !== \"\", message:makeMessage(dict, 'schema.typeError', null)}\r\n\r\n  if (! slot.hasOwnProperty('input')) {\r\n    // add input meta if possible\r\n    switch (typeOf(value)) {\r\n      case 'null': \r\n        slot.input = \"\"\r\n        break\r\n      case 'number': \r\n        slot.input = \"\" + value\r\n        break\r\n      case 'string': \r\n        slot.input = value\r\n        break\r\n      case 'boolean': \r\n        slot.input = value ? 'true' : 'false'\r\n        break\r\n      default: \r\n        slot.input = \"\"\r\n    }\r\n  }\r\n  return slot\r\n}\r\n\r\n/**\r\n * Coerces a slot, to which a raw input belongs, with a schema\r\n * @param {Rules} rules \r\n * @param {Dictionary} dict\r\n * @returns {(slot:Slot, schema:Schema) => Slot}\r\n */\r\nexport const coerce = (rules, dict) => (slot, schema) => {\r\n  if (! schema) {\r\n    throw new Error('coerce/0: no schema')\r\n  }\r\n  if (! schema.type) {\r\n    throw new Error('coerce/1: type not specified')\r\n  }\r\n  if (['null', 'boolean', 'boolean?', 'integer', 'integer?', 'number', 'number?', 'string'].indexOf(schema.type) == -1) {\r\n    throw new Error('coerce/2: unknown type: ' + schema.type)\r\n  }\r\n  if (slot.input == \"\") {\r\n    if (nullable(schema.type)) {\r\n      return cook(null, slot, schema, rules, dict)\r\n    } else if (schema.type == \"string\") {\r\n      return cook(\"\", slot, schema, rules, dict)\r\n    } else {\r\n      return {...slot, invalid:true, message:makeMessage(dict, 'schema.scanError.empty', null)}\r\n    }\r\n  }\r\n  switch (schema.type) {\r\n    case 'null': \r\n      // succeed only if slot.input == \"\"\r\n      return {...slot, invalid:true, message:makeMessage(dict, 'schema.scanError.null', null)}\r\n    case 'number':  // FALLTHRU\r\n    case 'number?': \r\n      const n = +slot.input\r\n      if (\"\" + n !== slot.input) {\r\n        return {...slot, invalid:true, message:makeMessage(dict, 'schema.scanError.number', null)}\r\n      }\r\n      return cook(n, slot, schema, rules, dict)\r\n    case 'integer':  // FALLTHRU\r\n    case 'integer?': \r\n      const i = +slot.input\r\n      if (\"\" + i !== slot.input || i % 1 !== 0) {\r\n        return {...slot, invalid:true, message:makeMessage(dict, 'schema.scanError.integer', null)}\r\n      }\r\n      return cook(i, slot, schema, rules, dict)\r\n    case 'string': \r\n      return cook(slot.input, slot, schema, rules, dict)\r\n    case 'boolean':  // FALLTHRU\r\n    case 'boolean?': \r\n      const b = (slot.input === \"true\") ? true\r\n              : (slot.input === \"false\") ? false\r\n              : null\r\n      if (b === null) {\r\n        return {...slot, invalid:true, message:makeMessage(dict, 'schema.scanError.boolean', null)}\r\n      }\r\n      return cook(b, slot, schema, rules, dict)\r\n    default: \r\n      // never comes here\r\n      throw new Error('unknown type: ' + schema.type)\r\n  }\r\n}","\r\nimport * as S from '../src/schema'\r\n\r\nexport const run = (assert, assertError) => {\r\n  const v = S.validate(S.defaultRules, {})\r\n  const c = S.coerce(S.defaultRules, {})\r\n\r\n  // type null\r\n  let s = {type:'null'}\r\n  assert(1, () => v(null, s).invalid, false)\r\n  assert(1.1, () => v(1, s).invalid, true)\r\n  assert(1.2, () => v(\"abc\", s).invalid, true)\r\n  assert(1.3, () => c({input:\"\"}, s).invalid, false)\r\n  assert(1.4, () => c({input:\"abc\"}, s).invalid, true)\r\n  assert(1.5, () => c({input:\"\"}, s)['@value'], null)\r\n\r\n  // no schema\r\n  s = null\r\n  assert(2, () => v(null, s).invalid, false)\r\n  assert(2.1, () => v(10, s).invalid, false)\r\n  assert(2.2, () => v([], s).invalid, false)\r\n  assertError(2.3, () => c({input:\"\"}, s), 'coerce/')\r\n  assertError(2.4, () => c({input:\"aaa\"}, s), 'coerce/')\r\n\r\n  // type boolean\r\n  s = {type:'boolean'}\r\n  assert(3, () => v(null, s).invalid, true)\r\n  assert(3.1, () => v(1, s).invalid, true)\r\n  assert(3.2, () => v(true, s).invalid, false)\r\n  assert(3.3, () => c({input:''}, s).invalid, true)\r\n  assert(3.4, () => c({input:'false'}, s).invalid, false)\r\n  assert(3.5, () => c({input:'abc'}, s).invalid, true)\r\n  assert(3.6, () => c({input:'true'}, s)['@value'], true)\r\n\r\n  // type boolean?\r\n  s = {type:'boolean?'}\r\n  assert(4, () => v(null, s).invalid, false)\r\n  assert(4.1, () => v(1, s).invalid, true)\r\n  assert(4.2, () => v(true, s).invalid, false)\r\n  assert(4.3, () => c({input:''}, s).invalid, false)\r\n  assert(4.4, () => c({input:'false'}, s).invalid, false)\r\n  assert(4.5, () => c({input:'abc'}, s).invalid, true)\r\n  assert(4.6, () => c({input:'true'}, s)['@value'], true)\r\n  assert(4.7, () => c({input:''}, s)['@value'], null)\r\n\r\n  // type integer\r\n  s = {type:'integer'}\r\n  assert(5, () => v(null, s).invalid, true)\r\n  assert(5.1, () => v(1, s).invalid, false)\r\n  assert(5.2, () => v(true, s).invalid, true)\r\n  assert(5.3, () => c({input:''}, s).invalid, true)\r\n  assert(5.4, () => c({input:'10'}, s).invalid, false)\r\n  assert(5.5, () => c({input:'abc'}, s).invalid, true)\r\n  assert(5.6, () => c({input:'132'}, s)['@value'], 132)\r\n\r\n  // type integer?\r\n  s = {type:'integer?'}\r\n  assert(6, () => v(null, s).invalid, false)\r\n  assert(6.1, () => v(1, s).invalid, false)\r\n  assert(6.2, () => v(true, s).invalid, true)\r\n  assert(6.3, () => c({input:''}, s).invalid, false)\r\n  assert(6.4, () => c({input:'10'}, s).invalid, false)\r\n  assert(6.5, () => c({input:'abc'}, s).invalid, true)\r\n  assert(6.6, () => c({input:'132'}, s)['@value'], 132)\r\n  assert(6.7, () => c({input:''}, s)['@value'], null)\r\n\r\n  // type number\r\n  s = {type:'number'}\r\n  assert(7, () => v(null, s).invalid, true)\r\n  assert(7.1, () => v(1.2, s).invalid, false)\r\n  assert(7.2, () => v(true, s).invalid, true)\r\n  assert(7.3, () => c({input:''}, s).invalid, true)\r\n  assert(7.4, () => c({input:'10.3'}, s).invalid, false)\r\n  assert(7.5, () => c({input:'abc'}, s).invalid, true)\r\n  assert(7.6, () => c({input:'132.5'}, s)['@value'], 132.5)\r\n\r\n  // type number?\r\n  s = {type:'number?'}\r\n  assert(8, () => v(null, s).invalid, false)\r\n  assert(8.1, () => v(1.2, s).invalid, false)\r\n  assert(8.2, () => v(true, s).invalid, true)\r\n  assert(8.3, () => c({input:''}, s).invalid, false)\r\n  assert(8.4, () => c({input:'10.3'}, s).invalid, false)\r\n  assert(8.5, () => c({input:'abc'}, s).invalid, true)\r\n  assert(8.6, () => c({input:'132.5'}, s)['@value'], 132.5)\r\n  assert(8.7, () => c({input:''}, s)['@value'], null)\r\n\r\n  // type string\r\n  s = {type:'string'}\r\n  assert(9, () => v(null, s).invalid, true)\r\n  assert(9.1, () => v('', s).invalid, false)\r\n  assert(9.2, () => v(true, s).invalid, false)\r\n  assert(9.3, () => c({input:''}, s).invalid, false)\r\n  assert(9.4, () => c({input:'10'}, s).invalid, false)\r\n  assert(9.5, () => c({input:''}, s)['@value'], '')\r\n  assert(9.6, () => c({input:'abc'}, s)['@value'], 'abc')\r\n\r\n  // type object\r\n  s = {type:'object'}\r\n  assert(10, () => v(null, s).invalid, true)\r\n  assert(10.1, () => v('', s).invalid, true)\r\n  assert(10.2, () => v({}, s).invalid, false)\r\n  assertError(10.3, () => c({input:''}, s), 'coerce/')\r\n\r\n  // type object?\r\n  s = {type:'object?'}\r\n  assert(11, () => v(null, s).invalid, false)\r\n  assert(11.1, () => v('', s).invalid, true)\r\n  assert(11.2, () => v({}, s).invalid, false)\r\n  assertError(11.3, () => c({input:''}, s), 'coerce/')\r\n\r\n  // type array\r\n  s = {type:'array'}\r\n  assert(12, () => v(null, s).invalid, true)\r\n  assert(12.1, () => v('', s).invalid, true)\r\n  assert(12.2, () => v([], s).invalid, false)\r\n  assertError(12.3, () => c({input:''}, s), 'coerce/')\r\n\r\n  // type array?\r\n  s = {type:'array?'}\r\n  assert(13, () => v(null, s).invalid, false)\r\n  assert(13.1, () => v('', s).invalid, true)\r\n  assert(13.2, () => v([], s).invalid, false)\r\n  assertError(13.3, () => c({input:''}, s), 'coerce/')\r\n\r\n  // rule enum\r\n  s = {type:'integer?', enum:[1]}\r\n  assert(14, () => v(null, s).invalid, true)\r\n  assert(14.1, () => v(1, s).invalid, false)\r\n  assert(14.2, () => v(3, s).invalid, true)\r\n\r\n  // rule const\r\n  s = {type:'number', 'const':3.2}\r\n  assert(15, () => v(3.2, s).invalid, false)\r\n  assert(15.1, () => v(3, s).invalid, true)\r\n\r\n  // rule required\r\n  s = {type:'object', required:['foo', 'bar']}\r\n  assert(16, () => v({foo:1, bar:1}, s).invalid, false)\r\n  assert(16.1, () => v({foo:1}, s).invalid, true)\r\n  assert(16.2, () => v({foo:1, bar:1, baz:1}, s).invalid, false)\r\n  assert(16.3, () => v(1, {...s, type:'integer'}).invalid, false)\r\n\r\n  // rule requiredAnyOf\r\n  s = {\r\n    type:'object', \r\n    requiredAnyOf: [\r\n      ['tag', 'op', 'lhs', 'rhs'], \r\n      ['tag', 'f', 'arg'], \r\n      ['tag', 'val', 'line'], \r\n      ['tag', 'var']\r\n    ]\r\n  }\r\n  let data = {tag:'infix', op:'*', lhs:{tag:'var', var:'n'}, rhs:{tag:'app', f:'fact', arg:{tag:'infix', op:'-', lhs:{tag:'var', var:'n'}, rhs:{tag:'lit', val:1}}}}  // n * fact(n - 1)\r\n  assert(17, () => v(data, s).invalid, false)\r\n  assert(17.1, () => v(data.lhs, s).invalid, false)\r\n  assert(17.2, () => v(data.rhs.arg.rhs, s).invalid, true)\r\n  assert(17.3, () => v(1, {...s, type:'integer'}).invalid, false)\r\n\r\n  // rule multipleOf\r\n  s = {type:'number?', multipleOf:1.2}\r\n  assert(18, () => v(-2.4, s).invalid, false)\r\n  assert(18.1, () => v(1.5, s).invalid, true)\r\n  assert(18.2, () => v(null, s).invalid, false)\r\n  assert(18.3, () => v(true, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule maximum\r\n  s = {type:'integer?', maximum:10}\r\n  assert(19, () => v(10, s).invalid, false)\r\n  assert(19.1, () => v(11, s).invalid, true)\r\n  assert(19.2, () => v(null, s).invalid, false)\r\n  assert(19.3, () => v(true, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule exclusiveMaximum\r\n  s = {type:'integer?', exclusiveMaximum:10}\r\n  assert(20, () => v(9, s).invalid, false)\r\n  assert(20.1, () => v(10, s).invalid, true)\r\n  assert(20.2, () => v(null, s).invalid, false)\r\n  assert(20.3, () => v(true, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule minimum\r\n  s = {type:'integer?', minimum:10}\r\n  assert(21, () => v(10, s).invalid, false)\r\n  assert(21.1, () => v(9, s).invalid, true)\r\n  assert(21.2, () => v(null, s).invalid, false)\r\n  assert(21.3, () => v(true, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule exclusiveMinimum\r\n  s = {type:'integer?', exclusiveMinimum:10}\r\n  assert(20, () => v(10, s).invalid, true)\r\n  assert(20.1, () => v(11, s).invalid, false)\r\n  assert(20.2, () => v(null, s).invalid, false)\r\n  assert(20.3, () => v(true, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule maxLength\r\n  s = {type:'string', maxLength:3}\r\n  assert(21, () => v('abc', s).invalid, false)\r\n  assert(21.1, () => v('abcd', s).invalid, true)\r\n  assert(21.2, () => v('', s).invalid, false)\r\n  assert(21.3, () => v(true, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule minLength\r\n  s = {type:'string', minLength:3}\r\n  assert(21, () => v('abd', s).invalid, false)\r\n  assert(21.1, () => v('ab', s).invalid, true)\r\n  assert(21.2, () => v('', s).invalid, true)\r\n  assert(21.3, () => v(true, {...s, type:'boolean'}).invalid, false)\r\n  \r\n  // rule pattern\r\n  s = {type:'string', pattern:\"^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$\"}\r\n  assert(22, () => v('info@example.com', s).invalid, false)\r\n  assert(22.1, () => v('192.168.0.1', s).invalid, true)\r\n  assert(22.2, () => v(true, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule maxItems\r\n  s = {type:'array?', maxItems:3}\r\n  assert(23, () => v([1,2,3], s).invalid, false)\r\n  assert(23.1, () => v([1,2,3,4], s).invalid, true)\r\n  assert(23.2, () => v(null, s).invalid, false)\r\n  assert(23.3, () => v(true, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule minItems\r\n  s = {type:'array?', minItems:4}\r\n  assert(24, () => v([1,2,3], s).invalid, true)\r\n  assert(24.1, () => v([1,2,3,4], s).invalid, false)\r\n  assert(24.2, () => v(null, s).invalid, false)\r\n  assert(24.3, () => v(true, {...s, type:'boolean'}).invalid, false)\r\n}","\r\nimport * as E from './env'\r\nimport * as S from './schema'\r\n\r\nconst assert = (ident, thunk, rv) => {\r\n  const lv = thunk()\r\n  if (lv == rv) {\r\n    console.log('- ASSERTION', ident, 'OK')\r\n  } else {\r\n    console.log('! ASSERTION', ident, 'NG', lv, rv)\r\n  }\r\n}\r\n\r\nconst assertError = (ident, thunk, match) => {\r\n  let status = null\r\n  try {\r\n    const lv = thunk()\r\n    status = \"no error\"\r\n  } catch (e) {\r\n    if (e instanceof Error && e.message.startsWith(match)) {\r\n      console.log('- ASSERTION', ident, 'OK')\r\n      return\r\n    } else {\r\n      status = \"matching failure: \" + e.message\r\n    }\r\n  }\r\n  console.log('! ASSERTION', ident, 'NG', status)\r\n}\r\n\r\nconst callRun = (m, name) => {\r\n  console.log('TEST START: ' + name)\r\n  m.run(assert, assertError)\r\n  console.log('TEST DONE: ' + name)\r\n  console.log('')\r\n}\r\n\r\ncallRun(E, 'env')\r\ncallRun(S, 'schema')"]}