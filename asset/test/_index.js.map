{"version":3,"sources":["../src/env.js","env.js","_index.js"],"names":["typeOf","x","Array","isArray","append2","name1","name2","list","R","append","init2","init","hasPath","path","length","last2","typeFrag","str","n","normPath","frags","rv","i","showPath","wrap","json","serial","validate","inner","es","path2","xa","key","rec","p","xo","xs","strip","data","root","fromJson","toJson","env","basename","Error","last","compose","base","frag0","split","frag","upcount","tail","makePath","epath","goTo","getm","meta","value","slot","hasOwnProperty","gets","setm","slot0","assocPath","sets","lookup","replace","add","location","name","index","value1","insert","remove","lis","dissoc","move","from","copy","mapMeta","f","value0","reduce","cur","run","assert","assertError","E","age","buddies","ident","thunk","lv","console","log","match","status","e","message","startsWith","callRun","m"],"mappings":"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","file":"_index.js","sourceRoot":"..\\..\\tests","sourcesContent":["\r\nimport * as R from 'ramda'\r\n\r\nconst typeOf = (x) => x === null ? 'null' : Array.isArray(x) ? 'array' : typeof x\r\n\r\nconst append2 = (name1, name2, list) => {\r\n  return R.append(name2, R.append(name1, list))\r\n}\r\n\r\nconst init2 = (list) => {\r\n  return R.init(R.init(list))\r\n}\r\n\r\n// see: https://github.com/ramda/ramda/pull/2841\r\n// Anyway, here we fix the original behavior.\r\nconst hasPath = (path, x) => {\r\n  if (! path.length) return true\r\n  return R.hasPath(path, x)\r\n}\r\n\r\nconst last2 = (list) => {\r\n  return list[list.length - 2]\r\n}\r\n\r\nconst typeFrag = (str) => {\r\n  if (typeof str == 'number') return str\r\n  const n = +str\r\n  return (n + \"\" === str) ? n : str\r\n}\r\n\r\nconst normPath = (frags) => {\r\n  let rv = \"\"\r\n  for (let i = 0; i < frags.length; i++) {\r\n    if (frags[i] == '@value') {\r\n      rv += '/'\r\n    } else if (typeof frags[i] == 'number' || frags[i] == '-') {\r\n      rv += '*'\r\n    } else {\r\n      rv += frags[i]\r\n    }\r\n  }\r\n  return rv\r\n}\r\n\r\nconst showPath = (frags) => {\r\n  let rv = \"\"\r\n  for (let i = 0; i < frags.length; i++) {\r\n    if (frags[i] == '@value') {\r\n      rv += \"/\"\r\n    } else {\r\n      rv += frags[i]\r\n    }\r\n  }\r\n  return rv\r\n}\r\n\r\nconst wrap = (json, serial, path, validate) => {\r\n  const inner = (json, path) => {\r\n    switch (typeOf(json)) {\r\n      case 'array': \r\n        const es = []\r\n        const path2 = path + '/*'\r\n        for (let i = 0; i < json.length; i++) {\r\n          es[i] = inner(json[i], path2)\r\n        }\r\n        const xa = validate(es, path)\r\n        xa.key = serial++\r\n        return xa\r\n      case 'object': \r\n        const rec = {}\r\n        for (let p in json) {\r\n          rec[p] = inner(json[p], path + '/' + p)\r\n        }\r\n        const xo = validate(rec, path)\r\n        xo.key = serial++\r\n        return xo\r\n      default: \r\n        const xs = validate(json, path)\r\n        xs.key = serial++\r\n        return xs\r\n    }\r\n  }\r\n  return [inner(json, path), serial]\r\n}\r\n\r\nconst strip = (data) => {\r\n  const root = data['@value']\r\n  switch (typeOf(root)) {\r\n    case 'array': \r\n      const es = []\r\n      for (let i = 0; i < root.length; i++) {\r\n        es[i] = strip(root[i])\r\n      }\r\n      return es\r\n    case 'object': \r\n      const rec = {}\r\n      for (let p in root) {\r\n        rec[p] = strip(root[p])\r\n      }\r\n      return rec\r\n    default: \r\n      return root\r\n  }\r\n}\r\n\r\nexport const fromJson = (json, validate) => {\r\n  const [data, serial] = wrap(json, 1, \"\", validate)\r\n  return {\r\n    data, \r\n    path: [], \r\n    serial\r\n  }\r\n}\r\n\r\nexport const toJson = (env) => {\r\n  return strip(env.data)\r\n}\r\n\r\nexport const path = (env) => {\r\n  return showPath(env.path)\r\n}\r\n\r\nexport const basename = (env) => {\r\n  if (! R.length(env.path)) {\r\n    throw new Error('basename/1: on root location')\r\n  }\r\n  return R.last(env.path)\r\n}\r\n\r\n/**\r\n * \r\n * @param {index[]} base internal representation of path\r\n * @param {string} path absolute or relative JSON pointer\r\n */\r\nconst compose = (base, path) => {\r\n  if (path === '0') {\r\n    // common easy case first\r\n    return base\r\n  }\r\n  let frag0 = R.split('/', path)\r\n  let frag = []\r\n  if (path.length > 0 && path[0] != '/') {\r\n    // relative\r\n    const upcount = +frag0[0]\r\n    frag = base\r\n    for (let i = 0; i < upcount; i++) {\r\n      if (! R.length(frag)) {\r\n        throw new Error('compose/1: no parent location')\r\n      }\r\n      frag = init2(frag)\r\n    }\r\n  }\r\n\r\n  frag0 = R.tail(frag0)\r\n  for (let i = 0; i < frag0.length; i++) {\r\n    frag = append2('@value', typeFrag(frag0[i]), frag)\r\n  }\r\n  return frag\r\n}\r\n\r\nexport const makePath = (path, env) => {\r\n  const epath = compose(env.path, path)\r\n  // We don't care about the existence of the epath location.\r\n  return showPath(epath)\r\n}\r\n\r\nexport const goTo = (path, env) => {\r\n  const epath = compose(env.path, path)\r\n  if (! hasPath(epath, env.data)) {\r\n    throw new Error('goTo/1: not found: ' + path)\r\n  }\r\n  return {...env, path:epath}\r\n}\r\n\r\nexport const getm = (path, meta, value, env) => {\r\n  const epath = compose(env.path, path)\r\n  const slot = R.path(epath, env.data)\r\n  if (! slot) {\r\n    throw new Error('getm/1: not found: ' + path)\r\n  }\r\n  return slot.hasOwnProperty(meta) ? slot[meta] : value\r\n}\r\n\r\nexport const gets = (path, env) => {\r\n  const epath = compose(env.path, path)\r\n  const slot = R.path(epath, env.data)\r\n  if (! slot) {\r\n    throw new Error('gets/1: not found: ' + path)\r\n  }\r\n  return slot\r\n}\r\n\r\nexport const setm = (path, meta, value, env) => {\r\n  const epath = compose(env.path, path)\r\n  const slot0 = R.path(epath, env.data)\r\n  if (! slot0) {\r\n    throw new Error('setm/1: not found: ' + path)\r\n  }\r\n  const slot = {...slot0, [meta]:value}\r\n  const data = R.assocPath(epath, slot, env.data)\r\n  return {...env, data}\r\n}\r\n\r\nexport const sets = (path, slot, env) => {\r\n  const epath = compose(env.path, path)\r\n  const slot0 = R.path(epath, env.data)\r\n  if (! slot0) {\r\n    throw new Error('sets/1: not found: ' + path)\r\n  }\r\n  slot.key = slot0.key\r\n  const data = R.assocPath(epath, slot, env.data)\r\n  return {...env, data}\r\n}\r\n\r\nexport const lookup = (path, env) => {\r\n  const epath = compose(env.path, path)\r\n  const slot = R.path(epath, env.data)\r\n  if (! slot) {\r\n    throw new Error('lookup/1: not found: ' + path)\r\n  }\r\n  return strip(slot)\r\n}\r\n\r\nexport const length = (path, env) => {\r\n  const epath = compose(env.path, path)\r\n  const slot = R.path(epath, env.data)\r\n  if (! slot) {\r\n    throw new Error('length/1: not found: ' + path)\r\n  }\r\n  if (! Array.isArray(slot['@value'])) {\r\n    throw new Error('length/2: not a list: ' + path)\r\n  }\r\n  return slot['@value'].length\r\n}\r\n\r\n// totally replace the value of the path.\r\n// metas are generated by validation\r\nexport const replace = (path, value, env) => {\r\n  // TODO implement\r\n  throw new Error('implement!')\r\n}\r\n\r\n// generates new metas\r\nexport const add = (path, value, validate, env) => {\r\n  const epath = compose(env.path, path)\r\n  const location = init2(epath)\r\n  const name = R.last(epath)\r\n  const slot0 = R.path(location, env.data)\r\n  if (typeof slot0['@value'] != 'object') {\r\n    throw new Error('add/1 neither a record nor a list: ' + path)\r\n  }\r\n  if (Array.isArray(slot0['@value'])) {\r\n    // insert into list\r\n    const index = (name === '-') ? slot0['@value'].length : name\r\n    if (typeof index != 'number' || index % 1 !== 0) {\r\n      throw new Error('add/2 invalid index: ' + path)\r\n    }\r\n    if (index < 0 || index > slot0['@value'].length) {\r\n      throw new Error('add/3 out of range: ' + path)\r\n    }\r\n    const [value1, serial] = wrap(value, env.serial, normPath(epath), validate)\r\n    const lis = R.insert(index, value1, slot0['@value'])\r\n    const slot = validate(lis, normPath(location))\r\n    slot.key = slot0.key\r\n    const data = R.assocPath(location, slot, env.data)\r\n    return {...env, data, serial}\r\n  } else {\r\n    // define or set into record\r\n    if (typeof name != 'string') {\r\n      throw new Error('add/4 invalid name: ' + path)\r\n    }\r\n    const [value1, serial] = wrap(value, env.serial, normPath(epath), validate)\r\n    const rec = {...slot0['@value'], [name]:value1}\r\n    const slot = validate(rec, normPath(location))\r\n    slot.key = slot0.key\r\n    const data = R.assocPath(location, slot, env.data)\r\n    return {...env, data}\r\n  }\r\n}\r\n\r\nexport const remove = (path, validate, env) => {\r\n  const epath = compose(env.path, path)\r\n  const location = init2(epath)\r\n  const name = R.last(epath)\r\n  const slot0 = R.path(location, env.data)\r\n  if (typeof slot0['@value'] != 'object' || slot0['@value'] === null) {\r\n    throw new Error('remove/1 neither a record nor a list: ' + path)\r\n  }\r\n  if (Array.isArray(slot0['@value'])) {\r\n    // remove from list\r\n    if (typeof name != 'number' || name % 1 !== 0) {\r\n      throw new Error('remove/2 invalid index: ' + path)\r\n    }\r\n    if (name < 0 || name >= slot0['@value'].length) {\r\n      throw new Error('remove/3 out of range: ' + path)\r\n    }\r\n    const lis = R.remove(name, 1, slot0['@value'])\r\n    const slot = validate(lis, normPath(location))\r\n    slot.key = slot0.key\r\n    const data = R.assocPath(location, slot, env.data)\r\n    return {...env, data}\r\n  } else {\r\n    // undefine from record\r\n    if (! slot0['@value'].hasOwnProperty(name)) {\r\n      throw new Error('remove/4: property not found: ' + path)\r\n    }\r\n    const rec = R.dissoc(name, slot0['@value'])\r\n    const slot = validate(rec, normPath(location))\r\n    slot.key = slot0.key\r\n    const data = R.assocPath(location, slot, env.data)\r\n    return {...env, data}\r\n  }\r\n}\r\n\r\nexport const move = (from, path, env) => {\r\n  // TODO implement\r\n  throw new Error('impelement!')\r\n}\r\n\r\nexport const copy = (from, path, env) => {\r\n  // TODO implement\r\n  throw new Error('impelement!')\r\n}\r\n\r\nexport const mapMeta = (f, path, env) => {\r\n  const inner = (slot0, path) => {\r\n    const value0 = slot0['@value']\r\n    switch (typeOf(value0)) {\r\n      case 'array': \r\n        const lis = []\r\n        for (let i = 0; i < value0.length; i++) {\r\n          lis[0] = inner(value0[i], path + '/' + i)\r\n        }\r\n        return {...f(slot0, path), '@value':lis, key:slot0.key}\r\n      case 'object': \r\n        const rec = {}\r\n        for (let p in value0) {\r\n          rec[p] = inner(value0[p], path + '/' + p)\r\n        }\r\n        return {...f(slot0, path), '@value':rec, key:slot0.key}\r\n      default: \r\n        return {...f(slot0, path), '@value':value0, key:slot0.key}\r\n    }\r\n  }\r\n  const epath = compose(env.path, path)\r\n  const slot0 = R.path(epath, env.data)\r\n  if (! slot0) {\r\n    throw new Error('mapMeta/1: not found: ' + path)\r\n  }\r\n  const slot = inner(slot0, showPath(epath))\r\n  const data = R.assocPath(epath, slot, env.data)\r\n  return {...env, data}\r\n}\r\n\r\nexport const reduce = (f, cur, path, env) => {\r\n  const inner = (cur, slot, path) => {\r\n    const value0 = slot['@value']\r\n    switch (typeOf(value0)) {\r\n      case 'array': \r\n        for (let i = 0; i < value0.length; i++) {\r\n          cur = inner(cur, value0[i], path + '/' + i)\r\n        }\r\n        return f(cur, slot, path)\r\n      case 'object': \r\n        for (let p in value0) {\r\n          cur = inner(cur, value0[p], path + '/' + p)\r\n        }\r\n        return f(cur, slot, path)\r\n      default: \r\n        return f(cur, slot, path)\r\n    }\r\n  }\r\n  const epath = compose(env.path, path)\r\n  const slot = R.path(epath, env.data)\r\n  if (! slot) {\r\n    throw new Error('mapMeta/1: not found: ' + path)\r\n  }\r\n  return inner(cur, slot, showPath(epath))\r\n}","\r\nimport * as E from '../src/env'\r\n\r\nconst validate = (value, path) => {\r\n  //console.log('validate called', value, path)\r\n  return {'@value':value}\r\n}\r\n\r\nexport const run = (assert, assertError) => {\r\n  const json = {\r\n    name: 'Bob', \r\n    age: 24, \r\n    buddies: [\r\n      'Mam', 'Dad'\r\n    ]\r\n  }\r\n\r\n  let env = E.fromJson(json, validate)\r\n  assert(1, () => E.lookup('/name', env), 'Bob')\r\n\r\n  env = E.add('/email', 'info@example.com', validate, env)\r\n  assert(2, () => E.lookup('/email', env), 'info@example.com')\r\n  assertError(2.1, () => E.lookup('/foo', env), 'lookup/')\r\n\r\n  assert(3, () => E.lookup('/buddies/1', env), 'Dad')\r\n\r\n  env = E.add('/buddies/1', 'Pochi', validate, env)\r\n  assert(4, () => E.lookup('/buddies/1', env), 'Pochi')\r\n  assertError(4.1, () => E.lookup('/buddies/5', env), 'lookup/')\r\n\r\n  env = E.goTo('/buddies', env)\r\n  assert(5, () => E.lookup('0/1', env), 'Pochi')\r\n  assertError(5.1, () => E.lookup('0/5', env), 'lookup/')\r\n  env = E.goTo('', env)\r\n\r\n  env = E.add('/buddies/-', 'Komino', validate, env)\r\n  assert(5, () => E.lookup('/buddies/3', env), 'Komino')\r\n\r\n  env = E.remove('/buddies/3', validate, env)\r\n  assertError(6, () => E.lookup('/buddies/3', env), 'lookup/')\r\n\r\n  env = E.remove('/email', validate, env)\r\n  assertError(7, () => E.lookup('/email', env), 'lookup/')\r\n  assertError(7.1, () => E.remove('/email', validate, env), 'remove/')\r\n\r\n  env = E.setm('/name', 'invalid', true, env)\r\n  assert(8, () => E.getm('/name', 'invalid', false, env), true)\r\n}\r\n\r\n","\r\nimport * as E from './env'\r\n\r\nconst assert = (ident, thunk, rv) => {\r\n  const lv = thunk()\r\n  if (lv == rv) {\r\n    console.log('- ASSERT', ident, 'OK')\r\n  } else {\r\n    console.log('! ASSERT', ident, 'NG', lv, rv)\r\n  }\r\n}\r\n\r\nconst assertError = (ident, thunk, match) => {\r\n  let status = null\r\n  try {\r\n    const lv = thunk()\r\n    status = \"no error\"\r\n  } catch (e) {\r\n    if (e instanceof Error && e.message.startsWith(match)) {\r\n      console.log('- ASSERT', ident, 'OK')\r\n      return\r\n    } else {\r\n      status = \"matching failure: \" + e.message\r\n    }\r\n  }\r\n  console.log('! ASSERT', ident, 'NG', status)\r\n}\r\n\r\nconst callRun = (m, name) => {\r\n  console.log('TEST START: ' + name)\r\n  m.run(assert, assertError)\r\n  console.log('TEST DONE: ' + name)\r\n  console.log('')\r\n}\r\n\r\ncallRun(E, 'env')"]}