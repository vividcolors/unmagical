{"version":3,"sources":["../src/core/utils.js","utils.js","../src/core/env.js","env.js","../src/core/schema.js","schema.js","_index.js"],"names":["isIntStr","x","n","normalizePath","path","frags","split","i","length","join","appendPath","base","charAt","base1","pathToArray","frag0","frag","upcount","splice","shift","concat","normalizePathArray","rv","push","typeOf","Array","isArray","emptyObject","emptyArray","isJsonValue","commonPath","path1","path2","frags1","frags2","run","assert","assertError","assertUndefined","U","hasPath","init2","list","makeSlot","value","invalid","message","input","touched","wrap","data","inner","es","rec","p","strip","tree","root","makeEnv","schemaDb","validate","trackUpdate","updatePoint","extra","isSame","env0","env1","internPath","externPath","intersect","path0","beginUpdateTracking","env","endUpdateTracking","test","extract","epath","slot","Error","getSlot","setSlot","slot0","add","location","name","type0","index","value1","lis","remove","hasOwnProperty","replace","move","from","copy","basePath","lookup","pathToLookup","npath","value0","mapDeep","f","reduceDeep","cur","setExtra","info","_unused","getExtra","setRet","ret","env2","doReturn","isEnv","schema","json","age","buddies","E","slot80","foo","nullable","type","lastChar","defaultMessages","buildDb","db","properties","items","makeMessage","dict","code","arg","format","testType","defaultRules","param","required","switchRequired","tag","tagProperty","types","same","target","multipleOf","maximum","exclusiveMaximum","minimum","exclusiveMinimum","maxLength","minLength","RegExp","maxItems","minItems","rules","result","coerce","indexOf","v","S","c","s","undefined","enum","bar","baz","infix","app","var","lit","lambda","op","lhs","rhs","pattern","first","second","ident","thunk","lv","console","log","match","status","e","startsWith","callRun","m"],"mappings":"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","file":"_index.js","sourceRoot":"..\\..\\tests","sourcesContent":["//@ts-check\r\n\r\n/**\r\n * Returns true if x is an string representation of an integer value.\r\n * @param {any} x\r\n * @returns {boolean} \r\n */\r\nexport const isIntStr = (x) => {\r\n  const n = +x\r\n  return (n % 1 === 0 && x === \"\" + n)\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} path \r\n * @returns {string}\r\n */\r\nexport const normalizePath = (path) => {\r\n  const frags = path.split('/')\r\n  for (let i = 1; i < frags.length; i++) {\r\n    if (isIntStr(frags[i])) {\r\n      frags[i] = '*'\r\n    }\r\n  }\r\n  return frags.join('/')\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} base \r\n * @param {string} path \r\n * @returns {string}\r\n */\r\nexport const appendPath = (base, path) => {\r\n  if (path.charAt(0) == '' || path.charAt(0) == '/') return path  // absolute path\r\n  if (path === '0') return base  // easy frequent case\r\n  \r\n  const base1 = pathToArray(base)\r\n  let frag0 = path.split('/')\r\n  let frag = []\r\n  let unused = null\r\n\r\n  let upcount = +frag0[0]\r\n  frag = base1\r\n  if (upcount > frag.length) {\r\n    upcount = frag.length\r\n  }\r\n  frag.splice(frag.length - upcount, upcount)\r\n\r\n  frag0.shift()\r\n\r\n  if (frag0.length == 0 && frag.length == 0) return ''\r\n  return '/' + frag.concat(frag0).join('/')\r\n}\r\n\r\n/**\r\n * \r\n * @param {(string | number)[]} path\r\n * @returns {string} \r\n */\r\nexport const normalizePathArray = (path) => {\r\n  let rv = ''\r\n  for (let i = 0; i < path.length; i++) {\r\n    if (typeof path[i] == 'number' || isIntStr(path[i])) {\r\n      rv += '/*'\r\n    } else {\r\n      rv += '/' + path[i]\r\n    }\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} path \r\n * @returns {(string | number)[]}\r\n */\r\nexport const pathToArray = (path) => {\r\n  const frags = path.split('/')\r\n  const rv = []\r\n  for (let i = 1; i < frags.length; i++) {\r\n    rv.push(isIntStr(frags[i]) ? +frags[i] : frags[i])\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * A variant of `typeof`, which handles null and Array appropreately.\r\n * @param {null|array|object|boolean|number|string} x \r\n * @returns {string}\r\n */\r\nexport const typeOf = (x) => x === null ? 'null' : Array.isArray(x) ? 'array' : typeof x\r\n\r\n/**\r\n * @type {{}}\r\n */\r\nexport const emptyObject = {}\r\n\r\n/**\r\n * @template T\r\n * @type {T[]}\r\n */\r\nexport const emptyArray = []\r\n\r\n/**\r\n * Returns true if `x' is json value.\r\n * @param {any} x\r\n * @returns {boolean} \r\n */\r\nexport const isJsonValue = (x) => {\r\n  switch (typeOf(x)) {\r\n    case 'null': \r\n    case 'number': \r\n    case 'boolean': \r\n    case 'string': \r\n    case 'object': \r\n    case 'array': \r\n      return true\r\n    default: \r\n      return false\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} path1 \r\n * @param {string} path2 \r\n * @return {string}\r\n */\r\nexport const commonPath = (path1, path2) => {\r\n  const frags1 = path1.split('/')\r\n  const frags2 = path2.split('/')\r\n  const rv = []\r\n  for (let i = 0; i < frags1.length; i++) {\r\n    if (frags2.length <= i) break\r\n    if (frags1[i] != frags2[i]) break\r\n    rv.push(frags1[i])\r\n  }\r\n  return rv.join('/')\r\n}","\r\nimport * as U from '../src/core/utils'\r\n\r\nexport const run = (assert, assertError, assertUndefined) => {\r\n  assert(1, () => U.appendPath('/a/b', '0/c/d'), '/a/b/c/d')\r\n  assert(1.1, () => U.appendPath('', '0/c'), '/c')\r\n  assert(1.2, () => U.appendPath('/a/b', '/x/y'), '/x/y')\r\n  assert(1.3, () => U.appendPath('/a/b/c', '1/d/e'), '/a/b/d/e')\r\n  assert(1.4, () => U.appendPath('/a', '3/z'), '/z')\r\n  assert(1.5, () => U.appendPath('/a/b', '1'), '/a')\r\n  assert(1.6, () => U.appendPath('/a/b/c', '3'), '')\r\n\r\n  assert(2, () => U.commonPath('/a/b/c', '/a/b/c'), '/a/b/c')\r\n  assert(2.1, () => U.commonPath('/a/b/c', '/a/b/d'), '/a/b')\r\n  assert(2.2, () => U.commonPath('/a/b/c', '/a'), '/a')\r\n  assert(2.3, () => U.commonPath('/a/b/c', ''), '')\r\n}","//@ts-check\r\n\r\nimport {normalizePath, typeOf, isIntStr, normalizePathArray, appendPath} from './utils'\r\nimport {hasPath as rhasPath, init, path as rpath, assocPath, insert, last, dissoc, remove as rremove, update } from 'ramda'\r\n\r\n/**\r\n * \r\n * @typedef {import(\"./schema\").Json} Json\r\n * @typedef {import(\"./schema\").Schema} Schema\r\n * @typedef {import(\"./schema\").Slot} Slot\r\n * @typedef {import(\"./schema\").SchemaDb} SchemaDb\r\n * @typedef {import(\"./schema\").LookupFunc} LookupFunc\r\n * @typedef {{\r\n *   tree: Json, \r\n *   trackUpdate: boolean\r\n *   updatePoint: ((string|number)[])|null\r\n *   schemaDb: SchemaDb, \r\n *   validate: (value:any, slot:Slot, schema:Schema, lookup:LookupFunc) => Slot\r\n *   extra: {[name:string]:any}\r\n *   ret?: (env:Env) => void\r\n * }} Env\r\n */\r\n\r\n\r\n/**\r\n * see: https://github.com/ramda/ramda/pull/2841\r\n * Anyway, here we fix the original behavior.\r\n * @param {string[]} path \r\n * @param {any} x \r\n * @return {boolean}\r\n */\r\nconst hasPath = (path, x) => {\r\n  if (! path.length) return true\r\n  return rhasPath(path, x)\r\n}\r\n\r\nconst init2 = (list) => {\r\n  return init(init(list))\r\n}\r\n\r\n/**\r\n * \r\n * @param {Json} value \r\n * @return {Slot} \r\n */\r\nconst makeSlot = (value) => {\r\n  const rv = {'@value':value, invalid:false, message:''}\r\n  switch (typeOf(value)) {\r\n    case 'object': // FALLTHRU\r\n    case 'array': \r\n      break\r\n    case 'number': // FALLTHRU\r\n    case 'integer': \r\n      rv.input = '' + value\r\n      rv.touched = false\r\n      break\r\n    case 'boolean': \r\n      rv.input = (value) ? 'true' : 'false'\r\n      rv.touched = false\r\n      break\r\n    case 'null': \r\n      rv.input = ''\r\n      rv.touched = false\r\n      break\r\n    case 'string': \r\n      rv.input = value\r\n      rv.touched = false\r\n      break\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * @param {Json} data \r\n * @returns {Slot}\r\n */\r\nconst wrap = (data) => {\r\n  /** @type {(data:Json) => Slot} */\r\n  const inner = (data) => {\r\n    switch (typeOf(data)) {\r\n      case 'array': \r\n        const es = []\r\n        for (let i = 0; i < /** @type {Json[]} */ (data).length; i++) {\r\n          es[i] = inner(data[i])\r\n        }\r\n        return makeSlot(es)\r\n      case 'object': \r\n        const rec = {}\r\n        for (let p in /** @type {{[name:string]:Json}} */ (data)) {\r\n          rec[p] = inner(data[p])\r\n        }\r\n        return makeSlot(rec)\r\n      default: \r\n        return makeSlot(data)\r\n    }\r\n  }\r\n  return inner(data)\r\n}\r\n\r\n/**\r\n * \r\n * @param {Json} tree \r\n * @returns {Json}\r\n */\r\nconst strip = (tree) => {\r\n  const root = tree['@value']\r\n  switch (typeOf(root)) {\r\n    case 'array': \r\n      const es = []\r\n      for (let i = 0; i < root.length; i++) {\r\n        es[i] = strip(root[i])\r\n      }\r\n      return es\r\n    case 'object': \r\n      const rec = {}\r\n      for (let p in root) {\r\n        rec[p] = strip(root[p])\r\n      }\r\n      return rec\r\n    default: \r\n      return root\r\n  }\r\n}\r\n\r\n/**\r\n * Makes env.\r\n * @param {Json} data \r\n * @param {SchemaDb} schemaDb \r\n * @param {(value:any, slot:Slot, schema:Schema, lookup:LookupFunc) => Slot} validate\r\n * @param {boolean} trackUpdate\r\n * @returns {Env}\r\n */\r\nexport const makeEnv = (data, schemaDb, validate, trackUpdate) => {\r\n  const tree = wrap(data)\r\n  return {\r\n    tree, \r\n    trackUpdate, \r\n    updatePoint: trackUpdate ? [] : null, \r\n    schemaDb, \r\n    validate, \r\n    extra: {}\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @param {Env} env0 \r\n * @param {Env} env1 \r\n * @returns {boolean}\r\n */\r\nexport const isSame = (env0, env1) => {\r\n  return (env0.tree === env1.tree && env0.extra === env1.extra)\r\n}\r\n\r\n/**\r\n * Internalizes a path\r\n * @param {string} path \r\n * @returns {(string|number)[]}\r\n */\r\nconst internPath = (path) => {\r\n  const frags = path.split('/')\r\n  const rv = []\r\n  for (let i = 1; i < frags.length; i++) {\r\n    rv.push('@value')\r\n    rv.push(isIntStr(frags[i]) ? +frags[i] : frags[i])\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * @param {(string|number)[]} path \r\n * @returns {string}\r\n */\r\nconst externPath = (path) => {\r\n  let rv = \"\"\r\n  for (let i = 0; i < path.length; i += 2) {\r\n    rv += \"/\" + path[i + 1]\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * @param {((string|number)[])|null} path0 \r\n * @param {((string|number)[])|null} path1\r\n * @returns {((string|number)[])|null} \r\n */\r\nconst intersect = (path0, path1) => {\r\n  if (path0 === null) return path1\r\n  if (path1 === null) return path0\r\n\r\n  const rv = []\r\n  for (let i = 0; i < path0.length; i += 2) {\r\n    if (i >= path1.length) break\r\n    if (path0[i + 1] !== path1[i + 1]) break\r\n    rv.push(path0[i])\r\n    rv.push(path0[i + 1])\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const beginUpdateTracking = (env) => {\r\n  // Essentially, `updatePoint' should be set to null, but it can be omitted \r\n  // because the value when disabled is null.\r\n  return {...env, trackUpdate:true}\r\n}\r\n\r\n/**\r\n * \r\n * @param {Env} env \r\n * @returns {[string|null, Env]}\r\n */\r\nexport const endUpdateTracking = (env) => {\r\n  return [\r\n    env.updatePoint ? externPath(env.updatePoint) : null, \r\n    {...env, trackUpdate:false, updatePoint:null}\r\n  ]\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} path \r\n * @param {Env} env \r\n * @returns {boolean}\r\n */\r\nexport const test = (path, env) => {\r\n  return hasPath(/** @type {string[]} */ (internPath(path)), env.tree)\r\n}\r\n\r\n/**\r\n * Extracts a subtree of Env.\r\n * @param {string} path\r\n * @param {Env} env\r\n * @returns {Json}\r\n */\r\nexport const extract = (path, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const slot = rpath(epath, env.tree)\r\n  if (! slot) {\r\n    throw new Error('extract/1: not found: ' + path)\r\n  }\r\n  return strip(slot)\r\n}\r\n\r\n/**\r\n * Low-level api.\r\n * @param {string} path \r\n * @param {Env} env\r\n * @returns {Slot} \r\n */\r\nexport const getSlot = (path, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const slot = rpath(epath, env.tree)\r\n  if (! slot) {\r\n    throw new Error('getSlot/1: not found: ' + path)\r\n  }\r\n  return slot\r\n}\r\n\r\n/**\r\n * Low-level api. This function executes neither validation nor coercion.\r\n * @param {string} path \r\n * @param {Slot} slot \r\n * @param {Env} env\r\n * @returns {Env} \r\n * \r\n * slot value must be a scalar.\r\n */\r\nexport const setSlot = (path, slot, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const slot0 = rpath(epath, env.tree)\r\n  if (! slot0) {\r\n    throw new Error('setSlot/1: not found: ' + path)\r\n  }\r\n  switch (typeOf(slot0['@value'])) {\r\n    case 'null': \r\n    case 'boolean': \r\n    case 'number': \r\n    case 'string': \r\n      break\r\n    default: \r\n      throw new Error('setSlot/2: not a scalar: ' + path)\r\n  }\r\n  const tree = assocPath(epath, slot, env.tree)\r\n  const updatePoint = env.trackUpdate ? intersect(env.updatePoint, epath) : env.updatePoint\r\n  return {...env, tree, updatePoint}\r\n}\r\n\r\n/**\r\n * Adds value to env. `add' function of JSON patch.\r\n * @param {string} path \r\n * @param {Json} value \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const add = (path, value, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const location = init2(epath)\r\n  const name = last(epath)\r\n  const slot0 = rpath(location, env.tree)\r\n  const type0 = typeOf(slot0['@value'])\r\n  if (type0 != 'object' && type0 != 'array') {\r\n    throw new Error('add/1 neither an object nor an array: ' + path)\r\n  }\r\n  if (type0 == 'array') {\r\n    // insert into array\r\n    const index = (name === '-') ? slot0['@value'].length : name\r\n    if (typeof index != 'number' || index % 1 !== 0) {\r\n      throw new Error('add/2 invalid index: ' + path)\r\n    }\r\n    if (index < 0 || index > slot0['@value'].length) {\r\n      throw new Error('add/3 index out of range: ' + path)\r\n    }\r\n    const value1 = wrap(value)\r\n    const lis = insert(index, value1, slot0['@value'])\r\n    const slot = makeSlot(lis)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    // Insertion to a list is an update not to an item but to the list.\r\n    const updatePoint = env.trackUpdate ? intersect(env.updatePoint, location) : env.updatePoint\r\n    return {...env, tree, updatePoint}\r\n  } else {\r\n    // define or replace into object\r\n    if (typeof name != 'string') {\r\n      throw new Error('add/4 invalid name: ' + path)\r\n    }\r\n    const value1 = wrap(value)\r\n    const rec = {...slot0['@value'], [name]:value1}\r\n    const slot = makeSlot(rec)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    // Adding a property is an update to an object, while replacing a property is an update to an property value.\r\n    const updatePoint = !env.trackUpdate ? env.updatePoint \r\n      : intersect(env.updatePoint, (name in slot0['@value']) ? epath : location)\r\n    return {...env, tree, updatePoint}\r\n  }\r\n}\r\n\r\n/**\r\n * Removes a value specified by path from env. `remove' function of JSON patch.\r\n * @param {string} path \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const remove = (path, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const location = init2(epath)\r\n  const name = last(epath)\r\n  const slot0 = rpath(location, env.tree)\r\n  const type0 = typeOf(slot0['@value'])\r\n  if (type0 != 'object' && type0 != 'array') {\r\n    throw new Error('remove/1 neither an object nor an array: ' + path)\r\n  }\r\n  if (type0 == 'array') {\r\n    // removes from array\r\n    if (typeof name != 'number' || name % 1 !== 0) {\r\n      throw new Error('remove/2 invalid index: ' + path)\r\n    }\r\n    if (name < 0 || name >= slot0['@value'].length) {\r\n      throw new Error('remove/3 out of range: ' + path)\r\n    }\r\n    const lis = rremove(name, 1, slot0['@value'])\r\n    const slot = makeSlot(lis)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    const updatePoint = env.trackUpdate ? intersect(env.updatePoint, location) : env.updatePoint\r\n    return {...env, tree, updatePoint}\r\n  } else {\r\n    // delete property from object\r\n    if (! slot0['@value'].hasOwnProperty(name)) {\r\n      throw new Error('remove/4: property not found: ' + path)\r\n    }\r\n    const rec = dissoc(name, slot0['@value'])\r\n    const slot = makeSlot(rec)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    const updatePoint = env.trackUpdate ? intersect(env.updatePoint, location) : env.updatePoint\r\n    return {...env, tree, updatePoint}\r\n  }\r\n}\r\n\r\n/**\r\n * Replaces a value specified by path into value.  Implements replace function of JSON patch.\r\n * @param {string} path \r\n * @param {Json} value \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const replace = (path, value, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  if (epath.length == 0) {\r\n    // replace whole data\r\n    const tree = wrap(value)\r\n    const updatePoint = env.trackUpdate ? [] : env.updatePoint\r\n    return {...env, tree, updatePoint}\r\n  }\r\n  const location = init2(epath)\r\n  const name = last(epath)\r\n  const slot0 = rpath(location, env.tree)\r\n  const type0 = typeOf(slot0['@value'])\r\n  if (type0 != 'object' && type0 != 'array') {\r\n    throw new Error('replace/1 neither an object nor an array: ' + path)\r\n  }\r\n  if (type0 == 'array') {\r\n    // replace an element in array\r\n    if (typeof name != 'number' || name % 1 !== 0) {\r\n      throw new Error('replace/2 invalid index: ' + path)\r\n    }\r\n    if (name < 0 || name >= slot0['@value'].length) {\r\n      throw new Error('replace/3 out of range: ' + path)\r\n    }\r\n    const value1 = wrap(value)\r\n    const lis = update(name, value1, slot0['@value'])\r\n    const slot = makeSlot(lis)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    const updatePoint = env.trackUpdate ? intersect(env.updatePoint, epath) : env.updatePoint\r\n    return {...env, tree, updatePoint}\r\n  } else {\r\n    // replace a property of object\r\n    if (typeof name != 'string') {\r\n      throw new Error('replace/4 invalid name: ' + path)\r\n    }\r\n    if (!(name in slot0['@value'])) {\r\n      throw new Error('replace/5 undefined property: ' + path)\r\n    }\r\n    const value1 = wrap(value)\r\n    const rec = {...slot0['@value'], [name]:value1}\r\n    const slot = makeSlot(rec)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    // * +path\r\n    const updatePoint = env.trackUpdate ? intersect(env.updatePoint, epath) : env.updatePoint\r\n    return {...env, tree, updatePoint}\r\n  }\r\n}\r\n\r\n/**\r\n * Moves a value located in from, to a location specified by path.  Implements move function of JSON patch.\r\n * @param {string} from \r\n * @param {string} path \r\n * @param {Env} env\r\n * @returns {Env} \r\n */\r\nexport const move = (from, path, env) => {\r\n  const value = extract(from, env)\r\n  env = remove(from, env)\r\n  env = add(path, value, env)\r\n  return env\r\n}\r\n\r\n/**\r\n * Copies a value located in from, to a location specified by path.  Impelementing copy function of JSON patch.\r\n * @param {string} from \r\n * @param {string} path \r\n * @param {Env} env\r\n * @returns {Env} \r\n */\r\nexport const copy = (from, path, env) => {\r\n  const value = extract(from, env)\r\n  env = add(path, value, env)\r\n  return env\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} path \r\n * @param {Env} env\r\n * @returns {Env} \r\n */\r\nexport const validate = (path, env) => {\r\n  let basePath = null\r\n\r\n  /**\r\n   * \r\n   * @param {string} path \r\n   * @returns {Json}\r\n   */\r\n  const lookup = (path) => {\r\n    const pathToLookup = appendPath(basePath, path)\r\n    return extract(pathToLookup, env)\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {Slot} slot0 \r\n   * @param {string} npath\r\n   * @param {string} path\r\n   * @returns {Slot} \r\n   */\r\n  const inner = (slot0, npath, path) => {\r\n    const value0 = slot0['@value']\r\n    switch (typeOf(value0)) {\r\n      case 'array': \r\n        const lis = []\r\n        for (let i = 0; i < (/** @type {Json[]} */(value0)).length; i++) {\r\n          lis[i] = inner(value0[i], npath + '/*', path + '/' + i)\r\n        }\r\n        basePath = path\r\n        return env.validate(lis, slot0, env.schemaDb[npath], lookup)\r\n      case 'object': \r\n        const rec = {}\r\n        for (let p in  /** @type {{[name:string]:Json}} */(value0)) {\r\n          rec[p] = inner(value0[p], npath + '/' + p, path + '/' + p)\r\n        }\r\n        basePath = path\r\n        return env.validate(rec, slot0, env.schemaDb[npath], lookup)\r\n      default: \r\n        basePath = path\r\n        const slot = env.validate(value0, slot0, env.schemaDb[npath], lookup)\r\n        if (slot['@value'] !== value0) {\r\n          throw new Error('validate/0: value changed: ' + path)\r\n        }\r\n        return slot\r\n    }\r\n  }\r\n\r\n  const epath = internPath(path)\r\n  const slot0 = rpath(epath, env.tree)\r\n  if (! slot0) {\r\n    throw new Error('validate/1: not found: ' + path)\r\n  }\r\n  const slot = inner(slot0, normalizePath(path), path)\r\n  const tree = assocPath(epath, slot, env.tree)\r\n  return {...env, tree}\r\n}\r\n\r\n/**\r\n * By f, maps every slot descending to a location specified by path.\r\n * @param {(slot:Slot, path:string) => Slot} f \r\n * @param {string} path \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const mapDeep = (f, path, env) => {\r\n  const inner = (slot0, path) => {\r\n    const value0 = slot0['@value']\r\n    switch (typeOf(value0)) {\r\n      case 'array': \r\n        const lis = []\r\n        for (let i = 0; i < value0.length; i++) {\r\n          lis[i] = inner(value0[i], path + '/' + i)\r\n        }\r\n        return {...f(slot0, path), '@value':lis}\r\n      case 'object': \r\n        const rec = {}\r\n        for (let p in value0) {\r\n          rec[p] = inner(value0[p], path + '/' + p)\r\n        }\r\n        return {...f(slot0, path), '@value':rec}\r\n      default: \r\n        return {...f(slot0, path), '@value':value0}\r\n    }\r\n  }\r\n  const epath = internPath(path)\r\n  const slot0 = rpath(epath, env.tree)\r\n  if (! slot0) {\r\n    throw new Error('mapDeep/1: not found: ' + path)\r\n  }\r\n  const slot = inner(slot0, path)\r\n  const tree = assocPath(epath, slot, env.tree)\r\n  return {...env, tree}\r\n}\r\n\r\n/**\r\n * By f, deeply reduces a subtree of path.\r\n * @template T\r\n * @param {(cur:T, slot:Slot, path:String) => T} f \r\n * @param {T} cur \r\n * @param {string} path \r\n * @param {Env} env \r\n */\r\nexport const reduceDeep = (f, cur, path, env) => {\r\n  const inner = (cur, slot, path) => {\r\n    const value0 = slot['@value']\r\n    switch (typeOf(value0)) {\r\n      case 'array': \r\n        for (let i = 0; i < value0.length; i++) {\r\n          cur = inner(cur, value0[i], path + '/' + i)\r\n        }\r\n        return f(cur, slot, path)\r\n      case 'object': \r\n        for (let p in value0) {\r\n          cur = inner(cur, value0[p], path + '/' + p)\r\n        }\r\n        return f(cur, slot, path)\r\n      default: \r\n        return f(cur, slot, path)\r\n    }\r\n  }\r\n  const epath = internPath(path)\r\n  const slot = rpath(epath, env.tree)\r\n  if (! slot) {\r\n    throw new Error('reduceDeep/1: not found: ' + path)\r\n  }\r\n  return inner(cur, slot, path)\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} name \r\n * @param {Object|null} info \r\n * @param {Env} env\r\n * @returns {Env} \r\n */\r\nexport const setExtra = (name, info, env) => {\r\n  if (info === null) {\r\n    const {[name]:_unused, ...extra} = env.extra\r\n    return {...env, extra}\r\n  } else {\r\n    const extra = {...env.extra, [name]:info}\r\n    return {...env, extra}\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} name \r\n * @param {Env} env\r\n * @returns {Object|null} \r\n */\r\nexport const getExtra = (name, env) => {\r\n  return env.extra[name] || null\r\n}\r\n\r\n/**\r\n * \r\n * @param {((env:Env) => void)|null} ret \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const setRet = (ret, env) => {\r\n  if (ret) return {...env, ret}\r\n  const {ret:_unused, ...env2} = env\r\n  return env2\r\n}\r\n\r\n/**\r\n * \r\n * @param {Env} env\r\n * @returns {void} \r\n */\r\nexport const doReturn = (env) => {\r\n  if (env.ret) {\r\n    env.ret(env)\r\n  } else {\r\n    throw new Error('doReturn/0: no ret')\r\n  }\r\n}\r\n\r\nexport const isEnv = (x) => {\r\n  return (x != null \r\n    && typeof x == \"object\" \r\n    && \"tree\" in x)\r\n}","\r\nimport * as E from '../src/core/env'\r\n\r\nconst validate = (value, schema) => {\r\n  //console.log('validate called', value, path)\r\n  return {'@value':value}\r\n}\r\n\r\nexport const run = (assert, assertError) => {\r\n  const json = {\r\n    name: 'Bob', \r\n    age: 24, \r\n    buddies: [\r\n      'Mam', 'Dad'\r\n    ]\r\n  }\r\n\r\n  let env = E.makeEnv(json, {}, validate, true)\r\n  assert(1, () => E.extract('/name', env), 'Bob')\r\n  assert(1.1, () => E.test('/name', env), true)\r\n  assert(1.2, () => E.test('/foo', env), false)\r\n\r\n  env = E.add('/email', 'info@example.com', env)\r\n  assert(2, () => E.extract('/email', env), 'info@example.com')\r\n  assertError(2.1, () => E.extract('/foo', env), 'extract/')\r\n\r\n  assert(3, () => E.extract('/buddies/1', env), 'Dad')\r\n\r\n  env = E.add('/buddies/1', 'Pochi', env)  // Mam,Pochi,Dad\r\n  assert(4, () => E.extract('/buddies/1', env), 'Pochi')\r\n  assertError(4.1, () => E.extract('/buddies/5', env), 'extract/')\r\n\r\n  env = E.add('/buddies/-', 'Komino', env)  // Mam,Pochi,Dad,Komino\r\n  assert(5, () => E.extract('/buddies/3', env), 'Komino')\r\n\r\n  env = E.remove('/buddies/3', env)  // Mam,Pochi,Dad\r\n  assert(6, () => E.extract('/buddies', env).join(','), 'Mam,Pochi,Dad')\r\n  assertError(6.1, () => E.extract('/buddies/3', env), 'extract/')\r\n\r\n  env = E.remove('/email', env)\r\n  assertError(7, () => E.extract('/email', env), 'extract/')\r\n  assertError(7.1, () => E.remove('/email', env), 'remove/')\r\n\r\n  assert(8, () => {\r\n    let slot80 = E.getSlot('/name', env)\r\n    slot80 = {...slot80, invalid:true}\r\n    env = E.setSlot('/name', slot80, env)\r\n    slot80 = E.getSlot('/name', env)\r\n    return slot80.invalid\r\n  }, true)\r\n\r\n  env = E.replace('/age', 30, env)\r\n  assert(9, () => E.extract('/age', env), 30)\r\n  let env2 = E.replace('', {foo:1}, env)\r\n  assert(9.1, () => E.extract('/foo', env2), 1)\r\n  assertError(9.2, () => E.extract('/age', env2), 'extract/')\r\n\r\n  env = E.add('/id', 'TS1101', env)\r\n  env = E.move('/id', '/employeeId', env)\r\n  assert(10, () => E.extract('/employeeId', env), 'TS1101')\r\n  assertError(10.1, () => E.extract('/id', env), 'extract/')\r\n\r\n  env = E.copy('/employeeId', '/id', env)\r\n  assert(11, () => E.extract('/employeeId', env), 'TS1101')\r\n  assert(11.1, () => E.extract('/id', env), 'TS1101')\r\n\r\n  assert(11.9, () => E.extract('/buddies', env).join(','), 'Mam,Pochi,Dad')\r\n  env = E.move('/buddies/2', '/buddies/0', env)  // Dad,Mam,Pochi\r\n  assert(12, () => E.extract('/buddies', env).join(','), 'Dad,Mam,Pochi')\r\n\r\n  env = E.copy('/buddies/0', '/buddies/2', env)  // Dad,Mam,Dad,Pochi\r\n  assert(13, () => E.extract('/buddies', env), 'Dad,Mam,Dad,Pochi')\r\n\r\n  env = E.mapDeep((slot, path) => ({...slot, message:'yeah'}), '/buddies', env)\r\n  assert(14, () => E.getSlot('/buddies', env).message, 'yeah')\r\n  assert(14.1, () => E.getSlot('/buddies/0', env).message, 'yeah')\r\n  assert(14.2, () => E.getSlot('/name', env).message || '', '')\r\n\r\n  assert(15, () => {\r\n    return E.reduceDeep((cur, slot, path) => {\r\n      if (path == '/buddies') return cur\r\n      return cur + `[${slot['@value']}]`\r\n    }, \"\", '/buddies', env)\r\n  }, '[Dad][Mam][Dad][Pochi]')\r\n\r\n  env = E.makeEnv(json, {}, validate, true)\r\n  assert(16, () => E.endUpdateTracking(env)[0], \"\")\r\n  env = E.endUpdateTracking(env)[1]\r\n  env = E.beginUpdateTracking(env)\r\n  env = E.replace('/age', 30, env)\r\n  assert(16.1, () => E.endUpdateTracking(env)[0], \"/age\")\r\n  env = E.add('/name', 'Jack', env)\r\n  assert(16.2, () => E.endUpdateTracking(env)[0], \"\")\r\n  env = E.makeEnv(json, {}, validate, false)\r\n  env = E.beginUpdateTracking(env)\r\n  env = E.add('/buddies/-', 'Puppy', env)\r\n  assert(16.3, () => E.endUpdateTracking(env)[0], \"/buddies\")\r\n  env = E.remove('/name', env)\r\n  assert(16.4, () => E.endUpdateTracking(env)[0], \"\")\r\n}\r\n\r\n","//@ts-check\r\n\r\nimport {emptyObject, typeOf, isJsonValue, appendPath} from './utils'\r\n\r\n/**\r\n * @typedef {null|number|string|boolean|any[]|{[name:string]:any}} Json \r\n * @typedef {{\r\n *   invalid?:boolean, \r\n *   message?:string, \r\n *   touched?:boolean, \r\n *   input?:string, \r\n *   ['@value']?:Json\r\n * }} Slot\r\n * @typedef {import(\"./env\").Env} Env\r\n * @typedef {{\r\n *   type:string, \r\n *   [rule:string]:Json\r\n * }} Schema\r\n * @typedef {(path:string) => Json} LookupFunc\r\n * @typedef {(param:Json, value:Json, lookup:LookupFunc) => true|string} RuleFunc\r\n * @typedef {{[name:string]:RuleFunc}} Rules\r\n * @typedef {{[key:string]:string}} Dictionary\r\n * @typedef {{[path:string]:Schema}} SchemaDb\r\n * \r\n */\r\n\r\n/**\r\n * Returns true if type specification allows null.\r\n * @param {string|null|undefined} type a type in schema\r\n */\r\nconst nullable = (type) => {\r\n  if (! type) return true\r\n  const lastChar = type.charAt(type.length - 1)\r\n  return type == 'null' || lastChar == '?'\r\n}\r\n\r\n/**\r\n * Maps error codes to messages. Use your own messages for localization.\r\n * @type {Dictionary}\r\n */\r\nexport const defaultMessages = {\r\n  'schema.ruleError.enum': 'Invalid input',   // 不正な入力です\r\n  'schema.ruleError.const': 'Invalid input',   // 不正な入力です\r\n  'schema.ruleError.required': 'Missing properties',  // フィールドが不足しています\r\n  'schema.ruleError.switchRequired': 'Unknown instance',  // 未知のインスタンスです\r\n  'schema.ruleError.same': 'Not a same value', \r\n  'schema.ruleError.multipleOf': 'Please enter a multiple of {{0}}',  // %Sの倍数を入力してください\r\n  'schema.ruleError.maximum': 'Please enter {{0}} or less',  // %s以下を入力してください\r\n  'schema.ruleError.exclusiveMaximum': 'Please enter a number less than {{0}}',  // %sより小さい数を入力してください\r\n  'schema.ruleError.minimum': 'Please enter {{0}} or more',  // %s以上を入力してください\r\n  'schema.ruleError.exclusiveMinimum': 'Please enter a number more than {{0}}',  // %sより大きい数を入力してください\r\n  'schema.ruleError.maxLength': 'Please enter no more than {{0}} characters',  // %s文字以下で入力してください\r\n  'schema.ruleError.minLength0': 'Please enter',  // 入力してください\r\n  'schema.ruleError.minLength': 'Please enter at least {{0}} characters',  // %s文字以上で入力してください\r\n  'schema.ruleError.pattern': 'Invalid format',  // 形式が不正です\r\n  'schema.ruleError.maxItems': 'Please make it less than or equal to {{0}}',  // %s個以下にしてください\r\n  'schema.ruleError.minItems': 'Please make it more than or equal to {{0}}',  // %s個以上にしてください\r\n  'schema.valueError.generic': 'Invalid value',  // 不正な値です\r\n  'schema.valueError.null': 'Invalid input', \r\n  'schema.valueError.number': 'Please input a number', \r\n  'schema.valueError.number?': 'Please input a number', \r\n  'schema.valueError.integer': 'Please input an integer', \r\n  'schema.valueError.integer?': 'Please input an integer', \r\n  'schema.valueError.boolean': 'Please input true or false', \r\n  'schema.valueError.boolean?': 'Please input true or false', \r\n  'schema.valueError.string': 'Invalid input', \r\n  'schema.valueError.array': 'Invalid input', \r\n  'schema.valueError.array?': 'Invalid input', \r\n  'schema.valueError.object': 'Invalid input', \r\n  'schema.valueError.object?': 'Invalid input'\r\n}\r\n\r\n/**\r\n * \r\n * @param {Json} schema \r\n * @returns {SchemaDb}\r\n */\r\nexport const buildDb = (schema) => {\r\n  const db = /** @type SchemaDb */ ({})\r\n  const inner = (schema, path) => {\r\n    db[path] = schema\r\n    switch (schema.type) {\r\n      case 'object': \r\n      case 'object?': \r\n        for (let p in schema.properties) {\r\n          inner(schema.properties[p], path + '/' + p)\r\n        }\r\n        break\r\n      case 'array': \r\n      case 'array?': \r\n        inner(schema.items, path + '/*')\r\n        break\r\n      default: \r\n        break\r\n    }\r\n  }\r\n  inner(schema, \"\")\r\n  return db\r\n}\r\n\r\n/**\r\n * Makes a localized message for error code.\r\n * @param {Dictionary} dict \r\n * @param {string} code an error code\r\n * @param {Json} arg a parameter for validation rule\r\n * @return {string}\r\n */\r\nconst makeMessage = (dict, code, arg = null) => {\r\n  const format = dict[code] || (code + ': {{0}}')\r\n  return format.replace('{{0}}', '' + arg)\r\n}\r\n\r\n/**\r\n * Returns true if the value is in an specified type\r\n * @param {Json} value\r\n * @param {string} type \r\n * @returns {boolean}\r\n */\r\nconst testType = (value, type) => {\r\n  if (! type) return true\r\n  if (value === null) {\r\n    return nullable(type)\r\n  } else {\r\n    switch (type) {\r\n      case 'null': \r\n        return false\r\n      case 'number':  // FALLTHRU\r\n      case 'number?': \r\n        return typeof value == 'number'\r\n      case 'integer':  // FALLTHRU\r\n      case 'integer?': \r\n        return (typeof value == 'number' && value % 1 === 0)\r\n      case 'boolean':  // FALLTHRU\r\n      case 'boolean?': \r\n        return typeof value == 'boolean'\r\n      case 'string': \r\n        return typeof value == 'string'\r\n      case 'object':  // FALLTHRU\r\n      case 'object?': \r\n        return (typeof value == 'object' && value !== null)\r\n      case 'array':  // FALLTHRU\r\n      case 'array?': \r\n        return Array.isArray(value)\r\n      default: \r\n        throw new Error('unknown type: ' + type)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * validation rules.\r\n * @type {Rules}\r\n */\r\nexport const defaultRules = {\r\n  'enum': (param, value) => {\r\n    if (! Array.isArray(param)) throw new Error('invalid parameter')\r\n    for (let i = 0; i < param.length; i++) {\r\n      if (param[i] === value) return true\r\n    }\r\n    return 'schema.ruleError.enum'\r\n  }, \r\n  'const': (param, value) => {\r\n    if (param === value) return true\r\n    return 'schema.ruleError.const'\r\n  }, \r\n  required: (param, value) => {\r\n    if (! Array.isArray(param)) throw new Error('invalid parameter')\r\n    if (typeof value != 'object') return true\r\n    for (let i = 0; i < param.length; i++) {\r\n      if (! value.hasOwnProperty(param[i])) return 'schema.ruleError.required'\r\n    }\r\n    return true\r\n  }, \r\n  switchRequired: (param, value, lookup) => {\r\n    if (typeOf(param) != 'object' || !('tagProperty' in /** @type {object} */ (param))) throw new Error('invalid parameter')\r\n    if (typeOf(value) != 'object') return true\r\n    const tag = /** @type {string} */ (lookup('0/' + param.tagProperty))\r\n    if (!tag || !param.types[tag]) return 'schema.ruleError.switchRequired'\r\n    const required = param.types[tag]\r\n    if (! Array.isArray(required)) throw new Error('invalid parameter')\r\n    for (let i = 0; i < required.length; i++) {\r\n      if (! value.hasOwnProperty(required[i])) return 'schema.ruleError.switchRequired'\r\n    }\r\n    return true\r\n  }, \r\n  same: (param, value, lookup) => {\r\n    if (typeof param != 'string') throw new Error('invalid parameter')\r\n    const target = lookup(param)\r\n    if (target !== value) return 'schema.ruleError.same'\r\n    return true\r\n  }, \r\n  multipleOf: (param, value) => {\r\n    if (typeof param != 'number') throw new Error('invalid parameter')\r\n    if (typeof value != 'number') return true\r\n    if (value % param === 0) return true\r\n    return 'schema.ruleError.multipleOf'\r\n  }, \r\n  maximum: (param, value) => {\r\n    if (typeof value != 'number') return true\r\n    if (param >= value) return true\r\n    return 'schema.ruleError.maximum'\r\n  }, \r\n  exclusiveMaximum: (param, value) => {\r\n    if (typeof value != 'number') return true\r\n    if (param > value) return true\r\n    return 'schema.ruleError.exclusiveMaximum'\r\n  }, \r\n  minimum: (param, value) => {\r\n    if (typeof value != 'number') return true\r\n    if (param <= value) return true\r\n    return 'schema.ruleError.minimum'\r\n  }, \r\n  exclusiveMinimum: (param, value) => {\r\n    if (typeof value != 'number') return true\r\n    if (param < value) return true\r\n    return 'schema.ruleError.exclusiveMinimum'\r\n  }, \r\n  maxLength: (param, value) => {\r\n    if (typeof value != 'string') return true\r\n    if (value.length <= param) return true\r\n    return 'schema.ruleError.maxLength'\r\n  }, \r\n  minLength: (param, value) => {\r\n    if (typeof value != 'string') return true\r\n    if (value.length >= param) return true\r\n    return (param == 1) ? 'schema.ruleError.minLength0' : 'schema.ruleError.minLength'\r\n  }, \r\n  'pattern': (param, value) => {\r\n    if (typeof param != 'string') throw new Error('invalid parameter')\r\n    if (typeof value != 'string') return true\r\n    if (new RegExp(param).test(value)) return true\r\n    return 'schema.ruleError.pattern'\r\n  }, \r\n  maxItems: (param, value) => {\r\n    if (typeof param != 'number') throw new Error('invalid parameter')\r\n    if (! Array.isArray(value)) return true\r\n    if (value.length <= param) return true\r\n    return 'schema.ruleError.maxItems'\r\n  }, \r\n  minItems: (param, value) => {\r\n    if (typeof param != 'number') throw new Error('invalid parameter')\r\n    if (! Array.isArray(value)) return true\r\n    if (value.length >= param) return true\r\n    return 'schema.ruleError.minItems'\r\n  }\r\n}\r\n\r\n/**\r\n * Validates a value with a schema.\r\n * @description shallow validation\r\n * @param {Rules} rules\r\n * @param {Dictionary} dict\r\n * @returns {(value:any, slot:Slot, schema:Schema, lookup:LookupFunc) => Slot} \r\n */\r\nexport const validate = (rules, dict) => (value, slot, schema, lookup) => {\r\n  if (! isJsonValue(value)) {\r\n    const code = (schema && schema.type) ? 'schema.valueError.' + schema.type : 'schema.valueError.generic'\r\n    return {...slot, '@value':value, invalid:true, message:makeMessage(dict, code, null)}\r\n  }\r\n  if (schema && schema.type) {\r\n    if (! testType(value, schema.type)) {\r\n      return {...slot, '@value':value, invalid:true, message:makeMessage(dict, 'schema.typeError.' + schema.type, null)}\r\n    }\r\n  }\r\n\r\n  for (let p in schema) {\r\n    const f = rules[p]\r\n    if (! f) continue\r\n    const result = f(schema[p], value, lookup)\r\n    if (result !== true) {\r\n      const message = makeMessage(dict, result, schema[p])\r\n      return {...slot, '@value':value, invalid:true, message}\r\n    }\r\n  }\r\n  return {...slot, '@value':value, invalid:false, message:''}\r\n}\r\n\r\n/**\r\n * \r\n * @param {Rules} rules \r\n * @param {Dictionary} dict \r\n * @returns {(input:string, slot:Slot, schema:Schema) => Slot}\r\n */\r\nexport const coerce = (rules, dict) => (input, slot, schema) => {\r\n  if (! schema) {\r\n    throw new Error('coerce/0: no schema')\r\n  }\r\n  if (! schema.type) {\r\n    throw new Error('coerce/1: type not specified')\r\n  }\r\n  if (['null', 'boolean', 'boolean?', 'integer', 'integer?', 'number', 'number?', 'string'].indexOf(schema.type) == -1) {\r\n    throw new Error('coerce/2: not a coercion enabled type: ' + schema.type)\r\n  }\r\n\r\n  switch (schema.type) {\r\n    case 'null': \r\n      break\r\n    case 'number': \r\n    case 'number?': \r\n      const n = +input\r\n      if (\"\" + n === input) {\r\n        return {'@value':n, input, touched:slot.touched}\r\n      }\r\n      break\r\n    case 'integer': \r\n    case 'integer?': \r\n      const i = +input\r\n      if (\"\" + i === input && i % 1 === 0) {\r\n        return {'@value':i, input, touched:slot.touched}\r\n      }\r\n      break\r\n    case 'boolean': \r\n    case 'boolean?': \r\n      if (input === \"true\" || input === \"false\") {\r\n        return {'@value':input===\"true\", input, touched:slot.touched}\r\n      }\r\n      break\r\n    case 'string': \r\n      return {'@value':input, input, touched:slot.touched}\r\n  }\r\n  if (input == \"\" && nullable(schema.type)) {\r\n    return {'@value':null, input, touched:slot.touched}\r\n  }\r\n  return {input, touched:slot.touched}\r\n}\r\n","\r\nimport * as S from '../src/core/schema'\r\n\r\nexport const run = (assert, assertError, assertUndefined) => {\r\n  const v = S.validate(S.defaultRules, {})\r\n  const c = S.coerce(S.defaultRules, {})\r\n\r\n  let s = null\r\n  let env = null\r\n\r\n  // type null\r\n  s = {type:'null'}\r\n  assert(1, () => v(null, {}, s).invalid, false)\r\n  assert(1.1, () => v(1, {}, s).invalid, true)\r\n  assert(1.2, () => v(\"abc\", {}, s).invalid, true)\r\n  assert(1.3, () => c(\"\", {}, s)['@value'], null)\r\n  assertUndefined(1.4, () => c(\"abc\", {}, s)['@value'])\r\n  assert(1.5, () => v(undefined, {}, s).invalid, true)\r\n\r\n  // no schema\r\n  s = null\r\n  assert(2, () => v(null, {}, s).invalid, false)\r\n  assert(2.1, () => v(10, {}, s).invalid, false)\r\n  assert(2.2, () => v([], {}, s).invalid, false)\r\n  assertError(2.3, () => c(\"\", {}, s), 'coerce/')\r\n  assertError(2.4, () => c(\"aaa\", {}, s), 'coerce/')\r\n  assert(2.5, () => v(undefined, {}, s).invalid, true)  // because `undefined' is not a JSON value\r\n\r\n  // type boolean\r\n  s = {type:'boolean'}\r\n  assert(3, () => v(null, {}, s).invalid, true)\r\n  assert(3.1, () => v(1, {}, s).invalid, true)\r\n  assert(3.2, () => v(true, {}, s).invalid, false)\r\n  assertUndefined(3.3, () => c('', {}, s)['@value'])\r\n  assert(3.4, () => c('false', {}, s)['@value'], false)\r\n  assertUndefined(3.5, () => c('abc', {}, s)['@value'])\r\n  assert(3.6, () => c('true', {}, s)['@value'], true)\r\n\r\n  // type boolean?\r\n  s = {type:'boolean?'}\r\n  assert(4, () => v(null, {}, s).invalid, false)\r\n  assert(4.1, () => v(1, {}, s).invalid, true)\r\n  assert(4.2, () => v(true, {}, s).invalid, false)\r\n  assert(4.3, () => c('', {}, s)['@value'], null)\r\n  assert(4.4, () => c('false', {}, s)['@value'], false)\r\n  assertUndefined(4.5, () => c('abc', {}, s)['@value'])\r\n\r\n  // type integer\r\n  s = {type:'integer'}\r\n  assert(5, () => v(null, {}, s).invalid, true)\r\n  assert(5.1, () => v(1, {}, s).invalid, false)\r\n  assert(5.2, () => v(true, {}, s).invalid, true)\r\n  assertUndefined(5.3, () => c('', {}, s)['@value'])\r\n  assert(5.4, () => c('10', {}, s)['@value'], 10)\r\n  assertUndefined(5.5, () => c('abc', {}, s)['@value'])\r\n  assert(5.6, () => v(132, {}, s)['@value'], 132)\r\n\r\n  // type integer?\r\n  s = {type:'integer?'}\r\n  assert(6, () => v(null, {}, s).invalid, false)\r\n  assert(6.1, () => v(1, {}, s).invalid, false)\r\n  assert(6.2, () => v(true, {}, s).invalid, true)\r\n  assert(6.3, () => c('', {}, s)['@value'], null)\r\n  assert(6.4, () => c('10', {}, s)['@value'], 10)\r\n  assertUndefined(6.5, () => c('10.3', {}, s)['@value'])\r\n  assert(6.6, () => c('132', {}, s)['@value'], 132)\r\n\r\n  // type number\r\n  s = {type:'number'}\r\n  assert(7, () => v(null, {}, s).invalid, true)\r\n  assert(7.1, () => v(1.2, {}, s).invalid, false)\r\n  assert(7.2, () => v(true, {}, s).invalid, true)\r\n  assertUndefined(7.3, () => c('', {}, s)['@value'])\r\n  assert(7.4, () => c('10.3', {}, s)['@value'], 10.3)\r\n  assertUndefined(7.5, () => c('abc', {}, s)['@value'])\r\n\r\n  // type number?\r\n  s = {type:'number?'}\r\n  assert(8, () => v(null, {}, s).invalid, false)\r\n  assert(8.1, () => v(1.2, {}, s).invalid, false)\r\n  assert(8.2, () => v(true, {}, s).invalid, true)\r\n  assert(8.3, () => c('', {}, s)['@value'], null)\r\n  assert(8.4, () => c('10.3', {}, s)['@value'], 10.3)\r\n  assertUndefined(8.5, () => c('abc', {}, s)['@value'])\r\n\r\n  // type string\r\n  s = {type:'string'}\r\n  assert(9, () => v(null, {}, s).invalid, true)\r\n  assert(9.1, () => v('', {}, s).invalid, false)\r\n  assert(9.2, () => v(true, {}, s).invalid, true)\r\n  assert(9.3, () => v('abc', {}, s).invalid, false)\r\n  assert(9.4, () => c(\"\", {}, s)['@value'], \"\")\r\n  assert(9.5, () => c(\"abc\", {}, s)['@value'], \"abc\")\r\n\r\n  // type object\r\n  s = {type:'object'}\r\n  assert(10, () => v(null, {}, s).invalid, true)\r\n  assert(10.1, () => v('', {}, s).invalid, true)\r\n  assert(10.2, () => v({}, s).invalid, false)\r\n  assertError(10.3, () => c('', {}, s), 'coerce/')\r\n\r\n  // type object?\r\n  s = {type:'object?'}\r\n  assert(11, () => v(null, {}, s).invalid, false)\r\n  assert(11.1, () => v('', {}, s).invalid, true)\r\n  assert(11.2, () => v({}, {}, s).invalid, false)\r\n  assertError(11.3, () => c('', {}, s), 'coerce/')\r\n\r\n  // type array\r\n  s = {type:'array'}\r\n  assert(12, () => v(null, {}, s).invalid, true)\r\n  assert(12.1, () => v('', {}, s).invalid, true)\r\n  assert(12.2, () => v([], {}, s).invalid, false)\r\n  assertError(12.3, () => c('', {}, s), 'coerce/')\r\n\r\n  // type array?\r\n  s = {type:'array?'}\r\n  assert(13, () => v(null, {}, s).invalid, false)\r\n  assert(13.1, () => v('', {}, s).invalid, true)\r\n  assert(13.2, () => v([], {}, s).invalid, false)\r\n  assertError(13.3, () => c('', {}, s), 'coerce/')\r\n\r\n  // rule enum\r\n  s = {type:'integer?', enum:[1]}\r\n  assert(14, () => v(null, {}, s).invalid, true)\r\n  assert(14.1, () => v(1, {}, s).invalid, false)\r\n  assert(14.2, () => v(3, {}, s).invalid, true)\r\n\r\n  // rule const\r\n  s = {type:'number', 'const':3.2}\r\n  assert(15, () => v(3.2, {}, s).invalid, false)\r\n  assert(15.1, () => v(3, {}, s).invalid, true)\r\n\r\n  // rule required\r\n  s = {type:'object', required:['foo', 'bar']}\r\n  assert(16, () => v({foo:1, bar:1}, {}, s).invalid, false)\r\n  assert(16.1, () => v({foo:1}, {}, s).invalid, true)\r\n  assert(16.2, () => v({foo:1, bar:1, baz:1}, {}, s).invalid, false)\r\n  assert(16.3, () => v(1, {}, {...s, type:'integer'}).invalid, false)\r\n\r\n  // rule switchRequired\r\n  s = {\r\n    type:'object', \r\n    switchRequired: {\r\n      tagProperty: 'type', \r\n      types: {\r\n        infix: ['type', 'op', 'lhs', 'rhs'], \r\n        app: ['type', 'f', 'arg'], \r\n        var: ['type', 'var'], \r\n        lit: ['type', 'val'], \r\n        lambda: ['type', 'param', 'expr']\r\n      }\r\n    }\r\n  }\r\n  let data = {type:'infix', op:'*', lhs:{type:'var', var:'n'}, rhs:{type:'app', f:'fact', arg:{type:'infix', op:'-', lhs:{type:'var', var:'n'}, rhs:{type:'lit'}}}}  // n * fact(n - 1)\r\n  assert(17, () => v(data, {}, s, (path) => 'infix').invalid, false)\r\n  assert(17.1, () => v(data.lhs, {}, s, (path) => 'var').invalid, false)\r\n  assert(17.2, () => v(data.rhs.arg.rhs, {}, s, (path) => 'lit').invalid, true)\r\n  assert(17.3, () => v(1, {}, {...s, type:'integer'}).invalid, false)\r\n\r\n  // rule multipleOf\r\n  s = {type:'number?', multipleOf:1.2}\r\n  assert(18, () => v(-2.4, {}, s).invalid, false)\r\n  assert(18.1, () => v(1.5, {}, s).invalid, true)\r\n  assert(18.2, () => v(null, {}, s).invalid, false)\r\n  assert(18.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule maximum\r\n  s = {type:'integer?', maximum:10}\r\n  assert(19, () => v(10, {}, s).invalid, false)\r\n  assert(19.1, () => v(11, {}, s).invalid, true)\r\n  assert(19.2, () => v(null, {}, s).invalid, false)\r\n  assert(19.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule exclusiveMaximum\r\n  s = {type:'integer?', exclusiveMaximum:10}\r\n  assert(20, () => v(9, {}, s).invalid, false)\r\n  assert(20.1, () => v(10, {}, s).invalid, true)\r\n  assert(20.2, () => v(null, {}, s).invalid, false)\r\n  assert(20.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule minimum\r\n  s = {type:'integer?', minimum:10}\r\n  assert(21, () => v(10, {}, s).invalid, false)\r\n  assert(21.1, () => v(9, {}, s).invalid, true)\r\n  assert(21.2, () => v(null, {}, s).invalid, false)\r\n  assert(21.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule exclusiveMinimum\r\n  s = {type:'integer?', exclusiveMinimum:10}\r\n  assert(20, () => v(10, {}, s).invalid, true)\r\n  assert(20.1, () => v(11, {}, s).invalid, false)\r\n  assert(20.2, () => v(null, {}, s).invalid, false)\r\n  assert(20.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule maxLength\r\n  s = {type:'string', maxLength:3}\r\n  assert(21, () => v('abc', {}, s).invalid, false)\r\n  assert(21.1, () => v('abcd', {}, s).invalid, true)\r\n  assert(21.2, () => v('', {}, s).invalid, false)\r\n  assert(21.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule minLength\r\n  s = {type:'string', minLength:3}\r\n  assert(21, () => v('abd', {}, s).invalid, false)\r\n  assert(21.1, () => v('ab', {}, s).invalid, true)\r\n  assert(21.2, () => v('', {}, s).invalid, true)\r\n  assert(21.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n  \r\n  // rule pattern\r\n  s = {type:'string', pattern:\"^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$\"}\r\n  assert(22, () => v('info@example.com', {}, s).invalid, false)\r\n  assert(22.1, () => v('192.168.0.1', {}, s).invalid, true)\r\n  assert(22.2, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule maxItems\r\n  s = {type:'array?', maxItems:3}\r\n  assert(23, () => v([1,2,3], {}, s).invalid, false)\r\n  assert(23.1, () => v([1,2,3,4], {}, s).invalid, true)\r\n  assert(23.2, () => v(null, {}, s).invalid, false)\r\n  assert(23.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule minItems\r\n  s = {type:'array?', minItems:4}\r\n  assert(24, () => v([1,2,3], {}, s).invalid, true)\r\n  assert(24.1, () => v([1,2,3,4], {}, s).invalid, false)\r\n  assert(24.2, () => v(null, {}, s).invalid, false)\r\n  assert(24.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule same\r\n  s = {type:'string',same:'/first'}\r\n  data = {first:'a', second:'a'}\r\n  assert(25, () => v('a', {}, s, (path) => 'a').invalid, false)\r\n  assert(25.1, () => v('b', {}, s, (path) => 'a').invalid, true)\r\n  s = {same:'/first'}\r\n  assert(25.2, () => v('a', {}, s, (path) => 'a').invalid, false)\r\n}","\r\nimport * as U from './utils'\r\nimport * as E from './env'\r\nimport * as S from './schema'\r\n\r\nconst assert = (ident, thunk, rv) => {\r\n  const lv = thunk()\r\n  if (lv == rv) {\r\n    console.log('- ASSERTION', ident, 'OK')\r\n  } else {\r\n    console.log('! ASSERTION', ident, 'NG', lv, rv)\r\n  }\r\n}\r\n\r\nconst assertUndefined = (ident, thunk) => {\r\n  const lv = thunk()\r\n  if (typeof lv == \"undefined\") {\r\n    console.log('- ASSERTION', ident, 'OK')\r\n  } else {\r\n    console.log('! ASSERTION', ident, 'NG', lv, \"undefined\")\r\n  }\r\n}\r\n\r\nconst assertError = (ident, thunk, match) => {\r\n  let status = null\r\n  try {\r\n    const lv = thunk()\r\n    status = \"no error\"\r\n  } catch (e) {\r\n    if (e instanceof Error && e.message.startsWith(match)) {\r\n      console.log('- ASSERTION', ident, 'OK')\r\n      return\r\n    } else {\r\n      status = \"matching failure: \" + e.message\r\n    }\r\n  }\r\n  console.log('! ASSERTION', ident, 'NG', status)\r\n}\r\n\r\nconst callRun = (m, name) => {\r\n  console.log('TEST START: ' + name)\r\n  m.run(assert, assertError, assertUndefined)\r\n  console.log('TEST DONE: ' + name)\r\n  console.log('')\r\n}\r\n\r\ncallRun(U, 'utils')\r\ncallRun(E, 'env')\r\ncallRun(S, 'schema')"]}