{"version":3,"sources":["../src/utils.js","utils.js","../src/env.js","env.js","../src/schema.js","schema.js","_index.js"],"names":["isIntStr","x","n","normalizePath","path","frags","split","i","length","join","appendPath","base","charAt","base1","pathToArray","frag0","frag","upcount","splice","shift","concat","normalizePathArray","rv","push","typeOf","Array","isArray","emptyObject","emptyArray","isJsonValue","commonPath","path1","path2","frags1","frags2","run","assert","assertError","assertUndefined","U","hasPath","init2","list","makeSlot","value","invalid","message","input","touched","wrap","data","inner","es","rec","p","strip","tree","root","makeEnv","schemaDb","validate","validationNeeded","extra","isSame","env0","env1","internPath","test","env","extract","epath","slot","Error","getSlot","setSlot","add","location","name","slot0","type0","index","value1","lis","remove","hasOwnProperty","replace","move","from","copy","npath","value0","mapDeep","f","reduceDeep","cur","setExtra","info","_unused","getExtra","setRet","ret","env2","doReturn","isEnv","schema","E","age","buddies","slot80","foo","nullable","type","lastChar","defaultMessages","buildDb","db","properties","items","makeMessage","dict","code","arg","format","testType","defaultRules","param","required","switchRequired","tag","tagProperty","types","same","targetPath","target","multipleOf","maximum","exclusiveMaximum","minimum","exclusiveMinimum","maxLength","minLength","RegExp","maxItems","minItems","rules","result","coerce","indexOf","v","S","c","s","undefined","enum","bar","baz","infix","app","var","lit","lambda","op","lhs","rhs","pattern","first","second","ident","thunk","lv","console","log","match","status","e","startsWith","callRun","m"],"mappings":"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","file":"_index.js","sourceRoot":"..\\..\\tests","sourcesContent":["//@ts-check\r\n\r\n/**\r\n * Returns true if x is an string representation of an integer value.\r\n * @param {any} x\r\n * @returns {boolean} \r\n */\r\nexport const isIntStr = (x) => {\r\n  const n = +x\r\n  return (n % 1 === 0 && x === \"\" + n)\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} path \r\n * @returns {string}\r\n */\r\nexport const normalizePath = (path) => {\r\n  const frags = path.split('/')\r\n  for (let i = 1; i < frags.length; i++) {\r\n    if (isIntStr(frags[i])) {\r\n      frags[i] = '*'\r\n    }\r\n  }\r\n  return frags.join('/')\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} base \r\n * @param {string} path \r\n * @returns {string}\r\n */\r\nexport const appendPath = (base, path) => {\r\n  if (path.charAt(0) == '' || path.charAt(0) == '/') return path  // absolute path\r\n  if (path === '0') return base  // easy frequent case\r\n  \r\n  const base1 = pathToArray(base)\r\n  let frag0 = path.split('/')\r\n  let frag = []\r\n  let unused = null\r\n\r\n  let upcount = +frag0[0]\r\n  frag = base1\r\n  if (upcount > frag.length) {\r\n    upcount = frag.length\r\n  }\r\n  frag.splice(frag.length - upcount, upcount)\r\n\r\n  frag0.shift()\r\n\r\n  if (frag0.length == 0 && frag.length == 0) return ''\r\n  return '/' + frag.concat(frag0).join('/')\r\n}\r\n\r\n/**\r\n * \r\n * @param {(string | number)[]} path\r\n * @returns {string} \r\n */\r\nexport const normalizePathArray = (path) => {\r\n  let rv = ''\r\n  for (let i = 0; i < path.length; i++) {\r\n    if (typeof path[i] == 'number' || isIntStr(path[i])) {\r\n      rv += '/*'\r\n    } else {\r\n      rv += '/' + path[i]\r\n    }\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} path \r\n * @returns {(string | number)[]}\r\n */\r\nexport const pathToArray = (path) => {\r\n  const frags = path.split('/')\r\n  const rv = []\r\n  for (let i = 1; i < frags.length; i++) {\r\n    rv.push(isIntStr(frags[i]) ? +frags[i] : frags[i])\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * A variant of `typeof`, which handles null and Array appropreately.\r\n * @param {null|array|object|boolean|number|string} x \r\n * @returns {string}\r\n */\r\nexport const typeOf = (x) => x === null ? 'null' : Array.isArray(x) ? 'array' : typeof x\r\n\r\n/**\r\n * @type {{}}\r\n */\r\nexport const emptyObject = {}\r\n\r\n/**\r\n * @template T\r\n * @type {T[]}\r\n */\r\nexport const emptyArray = []\r\n\r\n/**\r\n * Returns true if `x' is json value.\r\n * @param {any} x\r\n * @returns {boolean} \r\n */\r\nexport const isJsonValue = (x) => {\r\n  switch (typeOf(x)) {\r\n    case 'null': \r\n    case 'number': \r\n    case 'boolean': \r\n    case 'string': \r\n    case 'object': \r\n    case 'array': \r\n      return true\r\n    default: \r\n      return false\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} path1 \r\n * @param {string} path2 \r\n * @return {string}\r\n */\r\nexport const commonPath = (path1, path2) => {\r\n  const frags1 = path1.split('/')\r\n  const frags2 = path2.split('/')\r\n  const rv = []\r\n  for (let i = 0; i < frags1.length; i++) {\r\n    if (frags2.length <= i) break\r\n    if (frags1[i] != frags2[i]) break\r\n    rv.push(frags1[i])\r\n  }\r\n  return rv.join('/')\r\n}","\r\nimport * as U from '../src/utils'\r\n\r\nexport const run = (assert, assertError, assertUndefined) => {\r\n  assert(1, () => U.appendPath('/a/b', '0/c/d'), '/a/b/c/d')\r\n  assert(1.1, () => U.appendPath('', '0/c'), '/c')\r\n  assert(1.2, () => U.appendPath('/a/b', '/x/y'), '/x/y')\r\n  assert(1.3, () => U.appendPath('/a/b/c', '1/d/e'), '/a/b/d/e')\r\n  assert(1.4, () => U.appendPath('/a', '3/z'), '/z')\r\n  assert(1.5, () => U.appendPath('/a/b', '1'), '/a')\r\n  assert(1.6, () => U.appendPath('/a/b/c', '3'), '')\r\n\r\n  assert(2, () => U.commonPath('/a/b/c', '/a/b/c'), '/a/b/c')\r\n  assert(2.1, () => U.commonPath('/a/b/c', '/a/b/d'), '/a/b')\r\n  assert(2.2, () => U.commonPath('/a/b/c', '/a'), '/a')\r\n  assert(2.3, () => U.commonPath('/a/b/c', ''), '')\r\n}","//@ts-check\r\n\r\nimport {normalizePath, typeOf, isIntStr, normalizePathArray} from './utils'\r\nimport {hasPath as rhasPath, init, path as rpath, assocPath, insert, last, dissoc, remove as rremove, update } from 'ramda'\r\n\r\n/**\r\n * \r\n * @typedef {import(\"./schema\").Json} Json\r\n * @typedef {import(\"./schema\").Schema} Schema\r\n * @typedef {import(\"./schema\").Slot} Slot\r\n * @typedef {import(\"./schema\").SchemaDb} SchemaDb\r\n * @typedef {{\r\n *   tree: Json, \r\n *   validationNeeded: boolean, \r\n *   schemaDb: SchemaDb, \r\n *   validate: (value:any, slot:Slot, schema:Schema, path:string, env:Env) => Slot\r\n *   extra: {[name:string]:any}\r\n *   ret?: (env:Env) => void\r\n * }} Env\r\n */\r\n\r\n\r\n/**\r\n * see: https://github.com/ramda/ramda/pull/2841\r\n * Anyway, here we fix the original behavior.\r\n * @param {string[]} path \r\n * @param {any} x \r\n * @return {boolean}\r\n */\r\nconst hasPath = (path, x) => {\r\n  if (! path.length) return true\r\n  return rhasPath(path, x)\r\n}\r\n\r\nconst init2 = (list) => {\r\n  return init(init(list))\r\n}\r\n\r\n/**\r\n * \r\n * @param {Json} value \r\n * @return {Slot} \r\n */\r\nconst makeSlot = (value) => {\r\n  const rv = {'@value':value, invalid:false, message:''}\r\n  switch (typeOf(value)) {\r\n    case 'object': // FALLTHRU\r\n    case 'array': \r\n      break\r\n    case 'number': // FALLTHRU\r\n    case 'integer': \r\n      rv.input = '' + value\r\n      rv.touched = false\r\n      break\r\n    case 'boolean': \r\n      rv.input = (value) ? 'true' : 'false'\r\n      rv.touched = false\r\n      break\r\n    case 'null': \r\n      rv.input = ''\r\n      rv.touched = false\r\n      break\r\n    case 'string': \r\n      rv.input = value\r\n      rv.touched = false\r\n      break\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * @param {Json} data \r\n * @returns {Slot}\r\n */\r\nconst wrap = (data) => {\r\n  /** @type {(data:Json) => Slot} */\r\n  const inner = (data) => {\r\n    switch (typeOf(data)) {\r\n      case 'array': \r\n        const es = []\r\n        for (let i = 0; i < /** @type {Json[]} */ (data).length; i++) {\r\n          es[i] = inner(data[i])\r\n        }\r\n        return makeSlot(es)\r\n      case 'object': \r\n        const rec = {}\r\n        for (let p in /** @type {{[name:string]:Json}} */ (data)) {\r\n          rec[p] = inner(data[p])\r\n        }\r\n        return makeSlot(rec)\r\n      default: \r\n        return makeSlot(data)\r\n    }\r\n  }\r\n  return inner(data)\r\n}\r\n\r\n/**\r\n * \r\n * @param {Json} tree \r\n * @returns {Json}\r\n */\r\nconst strip = (tree) => {\r\n  const root = tree['@value']\r\n  switch (typeOf(root)) {\r\n    case 'array': \r\n      const es = []\r\n      for (let i = 0; i < root.length; i++) {\r\n        es[i] = strip(root[i])\r\n      }\r\n      return es\r\n    case 'object': \r\n      const rec = {}\r\n      for (let p in root) {\r\n        rec[p] = strip(root[p])\r\n      }\r\n      return rec\r\n    default: \r\n      return root\r\n  }\r\n}\r\n\r\n/**\r\n * Makes env.\r\n * @param {Json} data \r\n * @param {SchemaDb} schemaDb \r\n * @param {(value:any, slot:Slot, schema:Schema, path:string, env:Env) => Slot} validate\r\n * @returns {Env}\r\n */\r\nexport const makeEnv = (data, schemaDb, validate) => {\r\n  const tree = wrap(data)\r\n  return {\r\n    tree, \r\n    validationNeeded: true, \r\n    schemaDb, \r\n    validate, \r\n    extra: {}\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @param {Env} env0 \r\n * @param {Env} env1 \r\n * @returns {boolean}\r\n */\r\nexport const isSame = (env0, env1) => {\r\n  return (env0.tree === env1.tree && env0.extra === env1.extra && env0.validationNeeded === env1.validationNeeded)\r\n}\r\n\r\n/**\r\n * Internalizes a path\r\n * @param {string} path \r\n */\r\nconst internPath = (path) => {\r\n  const frags = path.split('/')\r\n  const rv = []\r\n  for (let i = 1; i < frags.length; i++) {\r\n    rv.push('@value')\r\n    rv.push(isIntStr(frags[i]) ? +frags[i] : frags[i])\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} path \r\n * @param {Env} env \r\n */\r\nexport const test = (path, env) => {\r\n  return hasPath(/** @type {string[]} */ (internPath(path)), env.tree)\r\n}\r\n\r\n/**\r\n * Extracts a subtree of Env.\r\n * @param {string} path\r\n * @param {Env} env\r\n * @returns {Json}\r\n */\r\nexport const extract = (path, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const slot = rpath(epath, env.tree)\r\n  if (! slot) {\r\n    throw new Error('extract/1: not found: ' + path)\r\n  }\r\n  return strip(slot)\r\n}\r\n\r\n/**\r\n * Low-level api.\r\n * @param {string} path \r\n * @param {Env} env\r\n * @returns {Slot} \r\n */\r\nexport const getSlot = (path, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const slot = rpath(epath, env.tree)\r\n  if (! slot) {\r\n    throw new Error('getSlot/1: not found: ' + path)\r\n  }\r\n  return slot\r\n}\r\n\r\n/**\r\n * Low-level api. This function executes neither validation nor coercion.\r\n * @param {string} path \r\n * @param {Slot} slot \r\n * @param {Env} env\r\n * @returns {Env} \r\n */\r\nexport const setSlot = (path, slot, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const slot0 = rpath(epath, env.tree)\r\n  if (! slot) {\r\n    throw new Error('setSlot/1: not found: ' + path)\r\n  }\r\n  const tree = assocPath(epath, slot, env.tree)\r\n  return {...env, tree}\r\n}\r\n\r\n/**\r\n * Adds value to env. `add' function of JSON patch.\r\n * @param {string} path \r\n * @param {Json} value \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const add = (path, value, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const location = init2(epath)\r\n  const name = last(epath)\r\n  const slot0 = rpath(location, env.tree)\r\n  const type0 = typeOf(slot0['@value'])\r\n  if (type0 != 'object' && type0 != 'array') {\r\n    throw new Error('add/1 neither an object nor an array: ' + path)\r\n  }\r\n  if (type0 == 'array') {\r\n    // insert into array\r\n    const index = (name === '-') ? slot0['@value'].length : name\r\n    if (typeof index != 'number' || index % 1 !== 0) {\r\n      throw new Error('add/2 invalid index: ' + path)\r\n    }\r\n    if (index < 0 || index > slot0['@value'].length) {\r\n      throw new Error('add/3 index out of range: ' + path)\r\n    }\r\n    const value1 = wrap(value)\r\n    const lis = insert(index, value1, slot0['@value'])\r\n    const slot = makeSlot(lis)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    return {...env, tree, validationNeeded:true}\r\n  } else {\r\n    // define or replace into object\r\n    if (typeof name != 'string') {\r\n      throw new Error('add/4 invalid name: ' + path)\r\n    }\r\n    const value1 = wrap(value)\r\n    const rec = {...slot0['@value'], [name]:value1}\r\n    const slot = makeSlot(rec)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    return {...env, tree, validationNeeded:true}\r\n  }\r\n}\r\n\r\n/**\r\n * Removes a value specified by path from env. `remove' function of JSON patch.\r\n * @param {string} path \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const remove = (path, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const location = init2(epath)\r\n  const name = last(epath)\r\n  const slot0 = rpath(location, env.tree)\r\n  const type0 = typeOf(slot0['@value'])\r\n  if (type0 != 'object' && type0 != 'array') {\r\n    throw new Error('remove/1 neither an object nor an array: ' + path)\r\n  }\r\n  if (type0 == 'array') {\r\n    // removes from array\r\n    if (typeof name != 'number' || name % 1 !== 0) {\r\n      throw new Error('remove/2 invalid index: ' + path)\r\n    }\r\n    if (name < 0 || name >= slot0['@value'].length) {\r\n      throw new Error('remove/3 out of range: ' + path)\r\n    }\r\n    const lis = rremove(name, 1, slot0['@value'])\r\n    const slot = makeSlot(lis)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    return {...env, tree, validationNeeded:true}\r\n  } else {\r\n    // delete property from object\r\n    if (! slot0['@value'].hasOwnProperty(name)) {\r\n      throw new Error('remove/4: property not found: ' + path)\r\n    }\r\n    const rec = dissoc(name, slot0['@value'])\r\n    const slot = makeSlot(rec)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    return {...env, tree, validationNeeded:true}\r\n  }\r\n}\r\n\r\n/**\r\n * Replaces a value specified by path into value.  Implements replace function of JSON patch.\r\n * @param {string} path \r\n * @param {Json} value \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const replace = (path, value, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  if (epath.length == 0) {\r\n    // replace whole data\r\n    const tree = wrap(value)\r\n    return {...env, tree, validationNeeded:true}\r\n  }\r\n  const location = init2(epath)\r\n  const name = last(epath)\r\n  const slot0 = rpath(location, env.tree)\r\n  const type0 = typeOf(slot0['@value'])\r\n  if (type0 != 'object' && type0 != 'array') {\r\n    throw new Error('replace/1 neither an object nor an array: ' + path)\r\n  }\r\n  if (type0 == 'array') {\r\n    // replace an element in array\r\n    if (typeof name != 'number' || name % 1 !== 0) {\r\n      throw new Error('replace/2 invalid index: ' + path)\r\n    }\r\n    if (name < 0 || name >= slot0['@value'].length) {\r\n      throw new Error('replace/3 out of range: ' + path)\r\n    }\r\n    const value1 = wrap(value)\r\n    const lis = update(name, value1, slot0['@value'])\r\n    const slot = makeSlot(lis)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    return {...env, tree, validationNeeded:true}\r\n  } else {\r\n    // replace a property of object\r\n    if (typeof name != 'string') {\r\n      throw new Error('replace/4 invalid name: ' + path)\r\n    }\r\n    const value1 = wrap(value)\r\n    const rec = {...slot0['@value'], [name]:value1}\r\n    const slot = makeSlot(rec)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    return {...env, tree, validationNeeded:true}\r\n  }\r\n}\r\n\r\n/**\r\n * Moves a value located in from, to a location specified by path.  Implements move function of JSON patch.\r\n * @param {string} from \r\n * @param {string} path \r\n * @param {Env} env\r\n * @returns {Env} \r\n */\r\nexport const move = (from, path, env) => {\r\n  const value = extract(from, env)\r\n  env = remove(from, env)\r\n  env = add(path, value, env)\r\n  return env\r\n}\r\n\r\n/**\r\n * Copies a value located in from, to a location specified by path.  Impelementing copy function of JSON patch.\r\n * @param {string} from \r\n * @param {string} path \r\n * @param {Env} env\r\n * @returns {Env} \r\n */\r\nexport const copy = (from, path, env) => {\r\n  const value = extract(from, env)\r\n  env = add(path, value, env)\r\n  return env\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} path \r\n * @param {Env} env\r\n * @returns {Env} \r\n */\r\nexport const validate = (path, env) => {\r\n  /**\r\n   * \r\n   * @param {Slot} slot0 \r\n   * @param {string} npath\r\n   * @param {string} path\r\n   * @returns {Slot} \r\n   */\r\n  const inner = (slot0, npath, path) => {\r\n    const value0 = slot0['@value']\r\n    switch (typeOf(value0)) {\r\n      case 'array': \r\n        const lis = []\r\n        for (let i = 0; i < (/** @type {Json[]} */(value0)).length; i++) {\r\n          lis[i] = inner(value0[i], npath + '/*', path + '/' + i)\r\n        }\r\n        return env.validate(lis, slot0, env.schemaDb[npath], path, env)\r\n      case 'object': \r\n        const rec = {}\r\n        for (let p in  /** @type {{[name:string]:Json}} */(value0)) {\r\n          rec[p] = inner(value0[p], npath + '/' + p, path + '/' + p)\r\n        }\r\n        return env.validate(rec, slot0, env.schemaDb[npath], path, env)\r\n      default: \r\n        const slot = env.validate(value0, slot0, env.schemaDb[npath], path, env)\r\n        return slot\r\n    }\r\n  }\r\n\r\n  const epath = internPath(path)\r\n  const slot0 = rpath(epath, env.tree)\r\n  if (! slot0) {\r\n    throw new Error('validate/1: not found: ' + path)\r\n  }\r\n  const slot = inner(slot0, normalizePath(path), path)\r\n  const tree = assocPath(epath, slot, env.tree)\r\n  return {...env, tree, validationNeeded:false}\r\n}\r\n\r\n/**\r\n * By f, maps every slot descending to a location specified by path.\r\n * @param {(slot:Slot, path:string) => Slot} f \r\n * @param {string} path \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const mapDeep = (f, path, env) => {\r\n  const inner = (slot0, path) => {\r\n    const value0 = slot0['@value']\r\n    switch (typeOf(value0)) {\r\n      case 'array': \r\n        const lis = []\r\n        for (let i = 0; i < value0.length; i++) {\r\n          lis[i] = inner(value0[i], path + '/' + i)\r\n        }\r\n        return {...f(slot0, path), '@value':lis}\r\n      case 'object': \r\n        const rec = {}\r\n        for (let p in value0) {\r\n          rec[p] = inner(value0[p], path + '/' + p)\r\n        }\r\n        return {...f(slot0, path), '@value':rec}\r\n      default: \r\n        return {...f(slot0, path), '@value':value0}\r\n    }\r\n  }\r\n  const epath = internPath(path)\r\n  const slot0 = rpath(epath, env.tree)\r\n  if (! slot0) {\r\n    throw new Error('mapDeep/1: not found: ' + path)\r\n  }\r\n  const slot = inner(slot0, path)\r\n  const tree = assocPath(epath, slot, env.tree)\r\n  return {...env, tree}\r\n}\r\n\r\n/**\r\n * By f, deeply reduces a subtree of path.\r\n * @template T\r\n * @param {(cur:T, slot:Slot, path:String) => T} f \r\n * @param {T} cur \r\n * @param {string} path \r\n * @param {Env} env \r\n */\r\nexport const reduceDeep = (f, cur, path, env) => {\r\n  const inner = (cur, slot, path) => {\r\n    const value0 = slot['@value']\r\n    switch (typeOf(value0)) {\r\n      case 'array': \r\n        for (let i = 0; i < value0.length; i++) {\r\n          cur = inner(cur, value0[i], path + '/' + i)\r\n        }\r\n        return f(cur, slot, path)\r\n      case 'object': \r\n        for (let p in value0) {\r\n          cur = inner(cur, value0[p], path + '/' + p)\r\n        }\r\n        return f(cur, slot, path)\r\n      default: \r\n        return f(cur, slot, path)\r\n    }\r\n  }\r\n  const epath = internPath(path)\r\n  const slot = rpath(epath, env.tree)\r\n  if (! slot) {\r\n    throw new Error('reduceDeep/1: not found: ' + path)\r\n  }\r\n  return inner(cur, slot, path)\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} name \r\n * @param {Object|null} info \r\n * @param {Env} env\r\n * @returns {Env} \r\n */\r\nexport const setExtra = (name, info, env) => {\r\n  if (info === null) {\r\n    const {[name]:_unused, ...extra} = env.extra\r\n    return {...env, extra}\r\n  } else {\r\n    const extra = {...env.extra, [name]:info}\r\n    return {...env, extra}\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} name \r\n * @param {Env} env\r\n * @returns {Object|null} \r\n */\r\nexport const getExtra = (name, env) => {\r\n  return env.extra[name] || null\r\n}\r\n\r\n/**\r\n * \r\n * @param {((env:Env) => void)|null} ret \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const setRet = (ret, env) => {\r\n  if (ret) return {...env, ret}\r\n  const {ret:_unused, ...env2} = env\r\n  return env2\r\n}\r\n\r\n/**\r\n * \r\n * @param {Env} env\r\n * @returns {void} \r\n */\r\nexport const doReturn = (env) => {\r\n  if (env.ret) {\r\n    env.ret(env)\r\n  } else {\r\n    throw new Error('doReturn/0: no ret')\r\n  }\r\n}\r\n\r\nexport const isEnv = (x) => {\r\n  return (x != null \r\n    && typeof x == \"object\" \r\n    && \"tree\" in x)\r\n}","\r\nimport * as E from '../src/env'\r\n\r\nconst validate = (value, schema) => {\r\n  //console.log('validate called', value, path)\r\n  return {'@value':value}\r\n}\r\n\r\nexport const run = (assert, assertError) => {\r\n  const json = {\r\n    name: 'Bob', \r\n    age: 24, \r\n    buddies: [\r\n      'Mam', 'Dad'\r\n    ]\r\n  }\r\n\r\n  let env = E.makeEnv(json, {}, validate)\r\n  assert(1, () => E.extract('/name', env), 'Bob')\r\n  assert(1.1, () => E.test('/name', env), true)\r\n  assert(1.2, () => E.test('/foo', env), false)\r\n\r\n  env = E.add('/email', 'info@example.com', env)\r\n  assert(2, () => E.extract('/email', env), 'info@example.com')\r\n  assertError(2.1, () => E.extract('/foo', env), 'extract/')\r\n\r\n  assert(3, () => E.extract('/buddies/1', env), 'Dad')\r\n\r\n  env = E.add('/buddies/1', 'Pochi', env)  // Mam,Pochi,Dad\r\n  assert(4, () => E.extract('/buddies/1', env), 'Pochi')\r\n  assertError(4.1, () => E.extract('/buddies/5', env), 'extract/')\r\n\r\n  env = E.add('/buddies/-', 'Komino', env)  // Mam,Pochi,Dad,Komino\r\n  assert(5, () => E.extract('/buddies/3', env), 'Komino')\r\n\r\n  env = E.remove('/buddies/3', env)  // Mam,Pochi,Dad\r\n  assert(6, () => E.extract('/buddies', env).join(','), 'Mam,Pochi,Dad')\r\n  assertError(6.1, () => E.extract('/buddies/3', env), 'extract/')\r\n\r\n  env = E.remove('/email', env)\r\n  assertError(7, () => E.extract('/email', env), 'extract/')\r\n  assertError(7.1, () => E.remove('/email', env), 'remove/')\r\n\r\n  assert(8, () => {\r\n    let slot80 = E.getSlot('/name', env)\r\n    slot80 = {...slot80, invalid:true}\r\n    env = E.setSlot('/name', slot80, env)\r\n    slot80 = E.getSlot('/name', env)\r\n    return slot80.invalid\r\n  }, true)\r\n\r\n  env = E.replace('/age', 30, env)\r\n  assert(9, () => E.extract('/age', env), 30)\r\n  let env2 = E.replace('', {foo:1}, env)\r\n  assert(9.1, () => E.extract('/foo', env2), 1)\r\n  assertError(9.2, () => E.extract('/age', env2), 'extract/')\r\n\r\n  env = E.add('/id', 'TS1101', env)\r\n  env = E.move('/id', '/employeeId', env)\r\n  assert(10, () => E.extract('/employeeId', env), 'TS1101')\r\n  assertError(10.1, () => E.extract('/id', env), 'extract/')\r\n\r\n  env = E.copy('/employeeId', '/id', env)\r\n  assert(11, () => E.extract('/employeeId', env), 'TS1101')\r\n  assert(11.1, () => E.extract('/id', env), 'TS1101')\r\n\r\n  assert(11.9, () => E.extract('/buddies', env).join(','), 'Mam,Pochi,Dad')\r\n  env = E.move('/buddies/2', '/buddies/0', env)  // Dad,Mam,Pochi\r\n  assert(12, () => E.extract('/buddies', env).join(','), 'Dad,Mam,Pochi')\r\n\r\n  env = E.copy('/buddies/0', '/buddies/2', env)  // Dad,Mam,Dad,Pochi\r\n  assert(13, () => E.extract('/buddies', env), 'Dad,Mam,Dad,Pochi')\r\n\r\n  env = E.mapDeep((slot, path) => ({...slot, message:'yeah'}), '/buddies', env)\r\n  assert(14, () => E.getSlot('/buddies', env).message, 'yeah')\r\n  assert(14.1, () => E.getSlot('/buddies/0', env).message, 'yeah')\r\n  assert(14.2, () => E.getSlot('/name', env).message || '', '')\r\n\r\n  assert(15, () => {\r\n    return E.reduceDeep((cur, slot, path) => {\r\n      if (path == '/buddies') return cur\r\n      return cur + `[${slot['@value']}]`\r\n    }, \"\", '/buddies', env)\r\n  }, '[Dad][Mam][Dad][Pochi]')\r\n}\r\n\r\n","//@ts-check\r\n\r\nimport {emptyObject, typeOf, isJsonValue, appendPath} from './utils'\r\nimport * as E from './env'\r\n\r\n/**\r\n * @typedef {null|number|string|boolean|any[]|{[name:string]:any}} Json \r\n * @typedef {{\r\n *   invalid?:boolean, \r\n *   message?:string, \r\n *   touched?:boolean, \r\n *   input?:string, \r\n *   ['@value']?:Json\r\n * }} Slot\r\n * @typedef {import(\"./env\").Env} Env\r\n * @typedef {{\r\n *   type:string, \r\n *   [rule:string]:Json\r\n * }} Schema\r\n * @typedef {(param:Json, value:Json, path:string, env:Env) => true|string} RuleFunc\r\n * @typedef {{[name:string]:RuleFunc}} Rules\r\n * @typedef {{[key:string]:string}} Dictionary\r\n * @typedef {{[path:string]:Schema}} SchemaDb\r\n * \r\n */\r\n\r\n/**\r\n * Returns true if type specification allows null.\r\n * @param {string|null|undefined} type a type in schema\r\n */\r\nconst nullable = (type) => {\r\n  if (! type) return true\r\n  const lastChar = type.charAt(type.length - 1)\r\n  return type == 'null' || lastChar == '?'\r\n}\r\n\r\n/**\r\n * Maps error codes to messages. Use your own messages for localization.\r\n * @type {Dictionary}\r\n */\r\nexport const defaultMessages = {\r\n  'schema.ruleError.enum': 'Invalid input',   // 不正な入力です\r\n  'schema.ruleError.const': 'Invalid input',   // 不正な入力です\r\n  'schema.ruleError.required': 'Missing properties',  // フィールドが不足しています\r\n  'schema.ruleError.switchRequired': 'Unknown instance',  // 未知のインスタンスです\r\n  'schema.ruleError.same': 'Not a same value', \r\n  'schema.ruleError.multipleOf': 'Please enter a multiple of {{0}}',  // %Sの倍数を入力してください\r\n  'schema.ruleError.maximum': 'Please enter {{0}} or less',  // %s以下を入力してください\r\n  'schema.ruleError.exclusiveMaximum': 'Please enter a number less than {{0}}',  // %sより小さい数を入力してください\r\n  'schema.ruleError.minimum': 'Please enter {{0}} or more',  // %s以上を入力してください\r\n  'schema.ruleError.exclusiveMinimum': 'Please enter a number more than {{0}}',  // %sより大きい数を入力してください\r\n  'schema.ruleError.maxLength': 'Please enter no more than {{0}} characters',  // %s文字以下で入力してください\r\n  'schema.ruleError.minLength0': 'Please enter',  // 入力してください\r\n  'schema.ruleError.minLength': 'Please enter at least {{0}} characters',  // %s文字以上で入力してください\r\n  'schema.ruleError.pattern': 'Invalid format',  // 形式が不正です\r\n  'schema.ruleError.maxItems': 'Please make it less than or equal to {{0}}',  // %s個以下にしてください\r\n  'schema.ruleError.minItems': 'Please make it more than or equal to {{0}}',  // %s個以上にしてください\r\n  'schema.valueError.generic': 'Invalid value',  // 不正な値です\r\n  'schema.valueError.null': 'Invalid input', \r\n  'schema.valueError.number': 'Please input a number', \r\n  'schema.valueError.number?': 'Please input a number', \r\n  'schema.valueError.integer': 'Please input an integer', \r\n  'schema.valueError.integer?': 'Please input an integer', \r\n  'schema.valueError.boolean': 'Please input true or false', \r\n  'schema.valueError.boolean?': 'Please input true or false', \r\n  'schema.valueError.string': 'Invalid input', \r\n  'schema.valueError.array': 'Invalid input', \r\n  'schema.valueError.array?': 'Invalid input', \r\n  'schema.valueError.object': 'Invalid input', \r\n  'schema.valueError.object?': 'Invalid input'\r\n}\r\n\r\n/**\r\n * \r\n * @param {Json} schema \r\n * @returns {SchemaDb}\r\n */\r\nexport const buildDb = (schema) => {\r\n  const db = /** @type SchemaDb */ ({})\r\n  const inner = (schema, path) => {\r\n    db[path] = schema\r\n    switch (schema.type) {\r\n      case 'object': \r\n      case 'object?': \r\n        for (let p in schema.properties) {\r\n          inner(schema.properties[p], path + '/' + p)\r\n        }\r\n        break\r\n      case 'array': \r\n      case 'array?': \r\n        inner(schema.items, path + '/*')\r\n        break\r\n      default: \r\n        break\r\n    }\r\n  }\r\n  inner(schema, \"\")\r\n  return db\r\n}\r\n\r\n/**\r\n * Makes a localized message for error code.\r\n * @param {Dictionary} dict \r\n * @param {string} code an error code\r\n * @param {Json} arg a parameter for validation rule\r\n * @return {string}\r\n */\r\nconst makeMessage = (dict, code, arg = null) => {\r\n  const format = dict[code] || (code + ': {{0}}')\r\n  return format.replace('{{0}}', '' + arg)\r\n}\r\n\r\n/**\r\n * Returns true if the value is in an specified type\r\n * @param {Json} value\r\n * @param {string} type \r\n * @returns {boolean}\r\n */\r\nconst testType = (value, type) => {\r\n  if (! type) return true\r\n  if (value === null) {\r\n    return nullable(type)\r\n  } else {\r\n    switch (type) {\r\n      case 'null': \r\n        return false\r\n      case 'number':  // FALLTHRU\r\n      case 'number?': \r\n        return typeof value == 'number'\r\n      case 'integer':  // FALLTHRU\r\n      case 'integer?': \r\n        return (typeof value == 'number' && value % 1 === 0)\r\n      case 'boolean':  // FALLTHRU\r\n      case 'boolean?': \r\n        return typeof value == 'boolean'\r\n      case 'string': \r\n        return typeof value == 'string'\r\n      case 'object':  // FALLTHRU\r\n      case 'object?': \r\n        return (typeof value == 'object' && value !== null)\r\n      case 'array':  // FALLTHRU\r\n      case 'array?': \r\n        return Array.isArray(value)\r\n      default: \r\n        throw new Error('unknown type: ' + type)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * validation rules.\r\n * @type {Rules}\r\n */\r\nexport const defaultRules = {\r\n  'enum': (param, value) => {\r\n    if (! Array.isArray(param)) throw new Error('invalid parameter')\r\n    for (let i = 0; i < param.length; i++) {\r\n      if (param[i] === value) return true\r\n    }\r\n    return 'schema.ruleError.enum'\r\n  }, \r\n  'const': (param, value) => {\r\n    if (param === value) return true\r\n    return 'schema.ruleError.const'\r\n  }, \r\n  required: (param, value) => {\r\n    if (! Array.isArray(param)) throw new Error('invalid parameter')\r\n    if (typeof value != 'object') return true\r\n    for (let i = 0; i < param.length; i++) {\r\n      if (! value.hasOwnProperty(param[i])) return 'schema.ruleError.required'\r\n    }\r\n    return true\r\n  }, \r\n  switchRequired: (param, value, path, env) => {\r\n    if (typeOf(param) != 'object' || !('tagProperty' in /** @type {object} */ (param))) throw new Error('invalid parameter')\r\n    if (typeOf(value) != 'object') return true\r\n    const tag = /** @type {string} */ (E.extract(path + '/' + param.tagProperty, env))\r\n    if (!tag || !param.types[tag]) return 'schema.ruleError.switchRequired'\r\n    const required = param.types[tag]\r\n    if (! Array.isArray(required)) throw new Error('invalid parameter')\r\n    for (let i = 0; i < required.length; i++) {\r\n      if (! value.hasOwnProperty(required[i])) return 'schema.ruleError.switchRequired'\r\n    }\r\n    return true\r\n  }, \r\n  same: (param, value, path, env) => {\r\n    if (typeof param != 'string') throw new Error('invalid parameter')\r\n    const targetPath = appendPath(path, param)\r\n    const target = E.extract(targetPath, env)\r\n    if (target !== value) return 'schema.ruleError.same'\r\n    return true\r\n  }, \r\n  multipleOf: (param, value) => {\r\n    if (typeof param != 'number') throw new Error('invalid parameter')\r\n    if (typeof value != 'number') return true\r\n    if (value % param === 0) return true\r\n    return 'schema.ruleError.multipleOf'\r\n  }, \r\n  maximum: (param, value) => {\r\n    if (typeof value != 'number') return true\r\n    if (param >= value) return true\r\n    return 'schema.ruleError.maximum'\r\n  }, \r\n  exclusiveMaximum: (param, value) => {\r\n    if (typeof value != 'number') return true\r\n    if (param > value) return true\r\n    return 'schema.ruleError.exclusiveMaximum'\r\n  }, \r\n  minimum: (param, value) => {\r\n    if (typeof value != 'number') return true\r\n    if (param <= value) return true\r\n    return 'schema.ruleError.minimum'\r\n  }, \r\n  exclusiveMinimum: (param, value) => {\r\n    if (typeof value != 'number') return true\r\n    if (param < value) return true\r\n    return 'schema.ruleError.exclusiveMinimum'\r\n  }, \r\n  maxLength: (param, value) => {\r\n    if (typeof value != 'string') return true\r\n    if (value.length <= param) return true\r\n    return 'schema.ruleError.maxLength'\r\n  }, \r\n  minLength: (param, value) => {\r\n    if (typeof value != 'string') return true\r\n    if (value.length >= param) return true\r\n    return (param == 1) ? 'schema.ruleError.minLength0' : 'schema.ruleError.minLength'\r\n  }, \r\n  'pattern': (param, value) => {\r\n    if (typeof param != 'string') throw new Error('invalid parameter')\r\n    if (typeof value != 'string') return true\r\n    if (new RegExp(param).test(value)) return true\r\n    return 'schema.ruleError.pattern'\r\n  }, \r\n  maxItems: (param, value) => {\r\n    if (typeof param != 'number') throw new Error('invalid parameter')\r\n    if (! Array.isArray(value)) return true\r\n    if (value.length <= param) return true\r\n    return 'schema.ruleError.maxItems'\r\n  }, \r\n  minItems: (param, value) => {\r\n    if (typeof param != 'number') throw new Error('invalid parameter')\r\n    if (! Array.isArray(value)) return true\r\n    if (value.length >= param) return true\r\n    return 'schema.ruleError.minItems'\r\n  }\r\n}\r\n\r\n/**\r\n * Validates a value with a schema.\r\n * @description shallow validation\r\n * @param {Rules} rules\r\n * @param {Dictionary} dict\r\n * @returns {(value:any, slot:Slot, schema:Schema, path:string, env:Env) => Slot} \r\n */\r\nexport const validate = (rules, dict) => (value, slot, schema, path, env) => {\r\n  if (! isJsonValue(value)) {\r\n    const code = (schema && schema.type) ? 'schema.valueError.' + schema.type : 'schema.valueError.generic'\r\n    return {...slot, '@value':value, invalid:true, message:makeMessage(dict, code, null)}\r\n  }\r\n  if (schema && schema.type) {\r\n    if (! testType(value, schema.type)) {\r\n      return {...slot, '@value':value, invalid:true, message:makeMessage(dict, 'schema.typeError.' + schema.type, null)}\r\n    }\r\n  }\r\n\r\n  for (let p in schema) {\r\n    const f = rules[p]\r\n    if (! f) continue\r\n    const result = f(schema[p], value, path, env)\r\n    if (result !== true) {\r\n      const message = makeMessage(dict, result, schema[p])\r\n      return {...slot, '@value':value, invalid:true, message}\r\n    }\r\n  }\r\n  return {...slot, '@value':value, invalid:false, message:''}\r\n}\r\n\r\n/**\r\n * \r\n * @param {Rules} rules \r\n * @param {Dictionary} dict \r\n * @returns {(input:string, slot:Slot, schema:Schema) => Slot}\r\n */\r\nexport const coerce = (rules, dict) => (input, slot, schema) => {\r\n  if (! schema) {\r\n    throw new Error('coerce/0: no schema')\r\n  }\r\n  if (! schema.type) {\r\n    throw new Error('coerce/1: type not specified')\r\n  }\r\n  if (['null', 'boolean', 'boolean?', 'integer', 'integer?', 'number', 'number?', 'string'].indexOf(schema.type) == -1) {\r\n    throw new Error('coerce/2: not a coercion enabled type: ' + schema.type)\r\n  }\r\n\r\n  switch (schema.type) {\r\n    case 'null': \r\n      break\r\n    case 'number': \r\n    case 'number?': \r\n      const n = +input\r\n      if (\"\" + n === input) {\r\n        return {'@value':n, input, touched:slot.touched}\r\n      }\r\n      break\r\n    case 'integer': \r\n    case 'integer?': \r\n      const i = +input\r\n      if (\"\" + i === input && i % 1 === 0) {\r\n        return {'@value':i, input, touched:slot.touched}\r\n      }\r\n      break\r\n    case 'boolean': \r\n    case 'boolean?': \r\n      if (input === \"true\" || input === \"false\") {\r\n        return {'@value':input===\"true\", input, touched:slot.touched}\r\n      }\r\n      break\r\n    case 'string': \r\n      return {'@value':input, input, touched:slot.touched}\r\n  }\r\n  if (input == \"\" && nullable(schema.type)) {\r\n    return {'@value':null, input, touched:slot.touched}\r\n  }\r\n  return {input, touched:slot.touched}\r\n}\r\n","\r\nimport * as S from '../src/schema'\r\nimport * as E from '../src/env'\r\n\r\nexport const run = (assert, assertError, assertUndefined) => {\r\n  const v = S.validate(S.defaultRules, {})\r\n  const c = S.coerce(S.defaultRules, {})\r\n\r\n  let s = null\r\n  let env = null\r\n\r\n  // type null\r\n  s = {type:'null'}\r\n  assert(1, () => v(null, {}, s).invalid, false)\r\n  assert(1.1, () => v(1, {}, s).invalid, true)\r\n  assert(1.2, () => v(\"abc\", {}, s).invalid, true)\r\n  assert(1.3, () => c(\"\", {}, s)['@value'], null)\r\n  assertUndefined(1.4, () => c(\"abc\", {}, s)['@value'])\r\n  assert(1.5, () => v(undefined, {}, s).invalid, true)\r\n\r\n  // no schema\r\n  s = null\r\n  assert(2, () => v(null, {}, s).invalid, false)\r\n  assert(2.1, () => v(10, {}, s).invalid, false)\r\n  assert(2.2, () => v([], {}, s).invalid, false)\r\n  assertError(2.3, () => c(\"\", {}, s), 'coerce/')\r\n  assertError(2.4, () => c(\"aaa\", {}, s), 'coerce/')\r\n  assert(2.5, () => v(undefined, {}, s).invalid, true)  // because `undefined' is not a JSON value\r\n\r\n  // type boolean\r\n  s = {type:'boolean'}\r\n  assert(3, () => v(null, {}, s).invalid, true)\r\n  assert(3.1, () => v(1, {}, s).invalid, true)\r\n  assert(3.2, () => v(true, {}, s).invalid, false)\r\n  assertUndefined(3.3, () => c('', {}, s)['@value'])\r\n  assert(3.4, () => c('false', {}, s)['@value'], false)\r\n  assertUndefined(3.5, () => c('abc', {}, s)['@value'])\r\n  assert(3.6, () => c('true', {}, s)['@value'], true)\r\n\r\n  // type boolean?\r\n  s = {type:'boolean?'}\r\n  assert(4, () => v(null, {}, s).invalid, false)\r\n  assert(4.1, () => v(1, {}, s).invalid, true)\r\n  assert(4.2, () => v(true, {}, s).invalid, false)\r\n  assert(4.3, () => c('', {}, s)['@value'], null)\r\n  assert(4.4, () => c('false', {}, s)['@value'], false)\r\n  assertUndefined(4.5, () => c('abc', {}, s)['@value'])\r\n\r\n  // type integer\r\n  s = {type:'integer'}\r\n  assert(5, () => v(null, {}, s).invalid, true)\r\n  assert(5.1, () => v(1, {}, s).invalid, false)\r\n  assert(5.2, () => v(true, {}, s).invalid, true)\r\n  assertUndefined(5.3, () => c('', {}, s)['@value'])\r\n  assert(5.4, () => c('10', {}, s)['@value'], 10)\r\n  assertUndefined(5.5, () => c('abc', {}, s)['@value'])\r\n  assert(5.6, () => v(132, {}, s)['@value'], 132)\r\n\r\n  // type integer?\r\n  s = {type:'integer?'}\r\n  assert(6, () => v(null, {}, s).invalid, false)\r\n  assert(6.1, () => v(1, {}, s).invalid, false)\r\n  assert(6.2, () => v(true, {}, s).invalid, true)\r\n  assert(6.3, () => c('', {}, s)['@value'], null)\r\n  assert(6.4, () => c('10', {}, s)['@value'], 10)\r\n  assertUndefined(6.5, () => c('10.3', {}, s)['@value'])\r\n  assert(6.6, () => c('132', {}, s)['@value'], 132)\r\n\r\n  // type number\r\n  s = {type:'number'}\r\n  assert(7, () => v(null, {}, s).invalid, true)\r\n  assert(7.1, () => v(1.2, {}, s).invalid, false)\r\n  assert(7.2, () => v(true, {}, s).invalid, true)\r\n  assertUndefined(7.3, () => c('', {}, s)['@value'])\r\n  assert(7.4, () => c('10.3', {}, s)['@value'], 10.3)\r\n  assertUndefined(7.5, () => c('abc', {}, s)['@value'])\r\n\r\n  // type number?\r\n  s = {type:'number?'}\r\n  assert(8, () => v(null, {}, s).invalid, false)\r\n  assert(8.1, () => v(1.2, {}, s).invalid, false)\r\n  assert(8.2, () => v(true, {}, s).invalid, true)\r\n  assert(8.3, () => c('', {}, s)['@value'], null)\r\n  assert(8.4, () => c('10.3', {}, s)['@value'], 10.3)\r\n  assertUndefined(8.5, () => c('abc', {}, s)['@value'])\r\n\r\n  // type string\r\n  s = {type:'string'}\r\n  assert(9, () => v(null, {}, s).invalid, true)\r\n  assert(9.1, () => v('', {}, s).invalid, false)\r\n  assert(9.2, () => v(true, {}, s).invalid, true)\r\n  assert(9.3, () => v('abc', {}, s).invalid, false)\r\n  assert(9.4, () => c(\"\", {}, s)['@value'], \"\")\r\n  assert(9.5, () => c(\"abc\", {}, s)['@value'], \"abc\")\r\n\r\n  // type object\r\n  s = {type:'object'}\r\n  assert(10, () => v(null, {}, s).invalid, true)\r\n  assert(10.1, () => v('', {}, s).invalid, true)\r\n  assert(10.2, () => v({}, s).invalid, false)\r\n  assertError(10.3, () => c('', {}, s), 'coerce/')\r\n\r\n  // type object?\r\n  s = {type:'object?'}\r\n  assert(11, () => v(null, {}, s).invalid, false)\r\n  assert(11.1, () => v('', {}, s).invalid, true)\r\n  assert(11.2, () => v({}, {}, s).invalid, false)\r\n  assertError(11.3, () => c('', {}, s), 'coerce/')\r\n\r\n  // type array\r\n  s = {type:'array'}\r\n  assert(12, () => v(null, {}, s).invalid, true)\r\n  assert(12.1, () => v('', {}, s).invalid, true)\r\n  assert(12.2, () => v([], {}, s).invalid, false)\r\n  assertError(12.3, () => c('', {}, s), 'coerce/')\r\n\r\n  // type array?\r\n  s = {type:'array?'}\r\n  assert(13, () => v(null, {}, s).invalid, false)\r\n  assert(13.1, () => v('', {}, s).invalid, true)\r\n  assert(13.2, () => v([], {}, s).invalid, false)\r\n  assertError(13.3, () => c('', {}, s), 'coerce/')\r\n\r\n  // rule enum\r\n  s = {type:'integer?', enum:[1]}\r\n  assert(14, () => v(null, {}, s).invalid, true)\r\n  assert(14.1, () => v(1, {}, s).invalid, false)\r\n  assert(14.2, () => v(3, {}, s).invalid, true)\r\n\r\n  // rule const\r\n  s = {type:'number', 'const':3.2}\r\n  assert(15, () => v(3.2, {}, s).invalid, false)\r\n  assert(15.1, () => v(3, {}, s).invalid, true)\r\n\r\n  // rule required\r\n  s = {type:'object', required:['foo', 'bar']}\r\n  assert(16, () => v({foo:1, bar:1}, {}, s).invalid, false)\r\n  assert(16.1, () => v({foo:1}, {}, s).invalid, true)\r\n  assert(16.2, () => v({foo:1, bar:1, baz:1}, {}, s).invalid, false)\r\n  assert(16.3, () => v(1, {}, {...s, type:'integer'}).invalid, false)\r\n\r\n  // rule switchRequired\r\n  s = {\r\n    type:'object', \r\n    switchRequired: {\r\n      tagProperty: 'type', \r\n      types: {\r\n        infix: ['type', 'op', 'lhs', 'rhs'], \r\n        app: ['type', 'f', 'arg'], \r\n        var: ['type', 'var'], \r\n        lit: ['type', 'val'], \r\n        lambda: ['type', 'param', 'expr']\r\n      }\r\n    }\r\n  }\r\n  let data = {type:'infix', op:'*', lhs:{type:'var', var:'n'}, rhs:{type:'app', f:'fact', arg:{type:'infix', op:'-', lhs:{type:'var', var:'n'}, rhs:{type:'lit'}}}}  // n * fact(n - 1)\r\n  env = E.makeEnv(data, {}, v)\r\n  assert(17, () => v(data, {}, s, '', env).invalid, false)\r\n  assert(17.1, () => v(data.lhs, {}, s, '/lhs', env).invalid, false)\r\n  assert(17.2, () => v(data.rhs.arg.rhs, {}, s, '/rhs/arg/rhs', env).invalid, true)\r\n  assert(17.3, () => v(1, {}, {...s, type:'integer'}).invalid, false)\r\n\r\n  // rule multipleOf\r\n  s = {type:'number?', multipleOf:1.2}\r\n  assert(18, () => v(-2.4, {}, s).invalid, false)\r\n  assert(18.1, () => v(1.5, {}, s).invalid, true)\r\n  assert(18.2, () => v(null, {}, s).invalid, false)\r\n  assert(18.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule maximum\r\n  s = {type:'integer?', maximum:10}\r\n  assert(19, () => v(10, {}, s).invalid, false)\r\n  assert(19.1, () => v(11, {}, s).invalid, true)\r\n  assert(19.2, () => v(null, {}, s).invalid, false)\r\n  assert(19.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule exclusiveMaximum\r\n  s = {type:'integer?', exclusiveMaximum:10}\r\n  assert(20, () => v(9, {}, s).invalid, false)\r\n  assert(20.1, () => v(10, {}, s).invalid, true)\r\n  assert(20.2, () => v(null, {}, s).invalid, false)\r\n  assert(20.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule minimum\r\n  s = {type:'integer?', minimum:10}\r\n  assert(21, () => v(10, {}, s).invalid, false)\r\n  assert(21.1, () => v(9, {}, s).invalid, true)\r\n  assert(21.2, () => v(null, {}, s).invalid, false)\r\n  assert(21.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule exclusiveMinimum\r\n  s = {type:'integer?', exclusiveMinimum:10}\r\n  assert(20, () => v(10, {}, s).invalid, true)\r\n  assert(20.1, () => v(11, {}, s).invalid, false)\r\n  assert(20.2, () => v(null, {}, s).invalid, false)\r\n  assert(20.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule maxLength\r\n  s = {type:'string', maxLength:3}\r\n  assert(21, () => v('abc', {}, s).invalid, false)\r\n  assert(21.1, () => v('abcd', {}, s).invalid, true)\r\n  assert(21.2, () => v('', {}, s).invalid, false)\r\n  assert(21.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule minLength\r\n  s = {type:'string', minLength:3}\r\n  assert(21, () => v('abd', {}, s).invalid, false)\r\n  assert(21.1, () => v('ab', {}, s).invalid, true)\r\n  assert(21.2, () => v('', {}, s).invalid, true)\r\n  assert(21.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n  \r\n  // rule pattern\r\n  s = {type:'string', pattern:\"^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$\"}\r\n  assert(22, () => v('info@example.com', {}, s).invalid, false)\r\n  assert(22.1, () => v('192.168.0.1', {}, s).invalid, true)\r\n  assert(22.2, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule maxItems\r\n  s = {type:'array?', maxItems:3}\r\n  assert(23, () => v([1,2,3], {}, s).invalid, false)\r\n  assert(23.1, () => v([1,2,3,4], {}, s).invalid, true)\r\n  assert(23.2, () => v(null, {}, s).invalid, false)\r\n  assert(23.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule minItems\r\n  s = {type:'array?', minItems:4}\r\n  assert(24, () => v([1,2,3], {}, s).invalid, true)\r\n  assert(24.1, () => v([1,2,3,4], {}, s).invalid, false)\r\n  assert(24.2, () => v(null, {}, s).invalid, false)\r\n  assert(24.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule same\r\n  s = {type:'string',same:'/first'}\r\n  data = {first:'a', second:'a'}\r\n  env = E.makeEnv(data, {}, v)\r\n  assert(25, () => v('a', {}, s, '/second', env).invalid, false)\r\n  assert(25.1, () => v('b', {}, s, '/second', env).invalid, true)\r\n  s = {same:'/first'}\r\n  assert(25.2, () => v('a', {}, s, '/second', env).invalid, false)\r\n}","\r\nimport * as U from './utils'\r\nimport * as E from './env'\r\nimport * as S from './schema'\r\n\r\nconst assert = (ident, thunk, rv) => {\r\n  const lv = thunk()\r\n  if (lv == rv) {\r\n    console.log('- ASSERTION', ident, 'OK')\r\n  } else {\r\n    console.log('! ASSERTION', ident, 'NG', lv, rv)\r\n  }\r\n}\r\n\r\nconst assertUndefined = (ident, thunk) => {\r\n  const lv = thunk()\r\n  if (typeof lv == \"undefined\") {\r\n    console.log('- ASSERTION', ident, 'OK')\r\n  } else {\r\n    console.log('! ASSERTION', ident, 'NG', lv, \"undefined\")\r\n  }\r\n}\r\n\r\nconst assertError = (ident, thunk, match) => {\r\n  let status = null\r\n  try {\r\n    const lv = thunk()\r\n    status = \"no error\"\r\n  } catch (e) {\r\n    if (e instanceof Error && e.message.startsWith(match)) {\r\n      console.log('- ASSERTION', ident, 'OK')\r\n      return\r\n    } else {\r\n      status = \"matching failure: \" + e.message\r\n    }\r\n  }\r\n  console.log('! ASSERTION', ident, 'NG', status)\r\n}\r\n\r\nconst callRun = (m, name) => {\r\n  console.log('TEST START: ' + name)\r\n  m.run(assert, assertError, assertUndefined)\r\n  console.log('TEST DONE: ' + name)\r\n  console.log('')\r\n}\r\n\r\ncallRun(U, 'utils')\r\ncallRun(E, 'env')\r\ncallRun(S, 'schema')"]}