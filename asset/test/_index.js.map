{"version":3,"sources":["../src/core/utils.js","utils.js","../src/core/env.js","env.js","../src/core/schema.js","schema.js","_index.js"],"names":["isIntStr","x","n","normalizePath","path","frags","split","i","length","join","appendPath","base","charAt","base1","pathToArray","frag0","frag","upcount","splice","shift","concat","normalizePathArray","rv","push","typeOf","Array","isArray","emptyObject","emptyArray","isJsonValue","commonPath","path1","path2","frags1","frags2","normalizeQuery","obj","omitEmptyParam","p","run","assert","assertError","assertUndefined","U","hasPath","init2","list","makeSlot","value","invalid","message","input","touched","wrap","data","inner","es","rec","strip","tree","root","makeEnv","schemaDb","validate","trackUpdate","updatePoint","extra","isSame","env0","env1","internPath","externPath","intersect","path0","beginUpdateTracking","env","endUpdateTracking","console","log","JSON","stringify","test","extract","epath","slot","Error","getSlot","setSlot","slot0","add","location","name","type0","index","value1","lis","remove","hasOwnProperty","replace","move","from","copy","basePath","lookup","pathToLookup","npath","value0","mapDeep","f","reduceDeep","cur","duplicate","fromEnv","toEnv","setExtra","info","_unused","getExtra","setPortal","ret","onPromiseThen","_unused2","env2","doReturn","isEnv","schema","json","age","buddies","E","slot80","foo","nullable","type","lastChar","buildDb","db","properties","items","testType","defaultRules","param","code","hint","notEmpty","_param","required","switchRequired","tag","tagProperty","decription","types","detail","same","target","if","rules","match","then","el","targetValue","targetResult","applyRules","multipleOf","maximum","exclusiveMaximum","minimum","exclusiveMinimum","maxLength","minLength","RegExp","maxItems","minItems","error","result","coerce","indexOf","v","S","c","s","undefined","enum","bar","baz","infix","app","var","lit","lambda","op","lhs","rhs","arg","pattern","first","second","at","to","ident","thunk","lv","status","e","startsWith","callRun","m"],"mappings":"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","file":"_index.js","sourceRoot":"..\\..\\tests","sourcesContent":["//@ts-check\r\n/** @module core/utils */\r\n\r\n/**\r\n * Returns true if x is an string representation of an integer value.\r\n * @function\r\n * @param {any} x\r\n * @returns {boolean} \r\n */\r\nexport const isIntStr = (x) => {\r\n  const n = +x\r\n  return (n % 1 === 0 && x === \"\" + n)\r\n}\r\n\r\n/**\r\n * Returns the array-index independent normalized path.\r\n * @function\r\n * @param {string} path \r\n * @returns {string}\r\n */\r\nexport const normalizePath = (path) => {\r\n  const frags = path.split('/')\r\n  for (let i = 1; i < frags.length; i++) {\r\n    if (isIntStr(frags[i])) {\r\n      frags[i] = '*'\r\n    }\r\n  }\r\n  return frags.join('/')\r\n}\r\n\r\n/**\r\n * Concatenates two pathes, `path' can be a relative one.\r\n * @function\r\n * @param {string} base \r\n * @param {string} path \r\n * @returns {string}\r\n */\r\nexport const appendPath = (base, path) => {\r\n  if (path.charAt(0) == '' || path.charAt(0) == '/') return path  // absolute path\r\n  if (path === '0') return base  // easy frequent case\r\n  \r\n  const base1 = pathToArray(base)\r\n  let frag0 = path.split('/')\r\n  let frag = []\r\n  let unused = null\r\n\r\n  let upcount = +frag0[0]\r\n  frag = base1\r\n  if (upcount > frag.length) {\r\n    upcount = frag.length\r\n  }\r\n  frag.splice(frag.length - upcount, upcount)\r\n\r\n  frag0.shift()\r\n\r\n  if (frag0.length == 0 && frag.length == 0) return ''\r\n  return '/' + frag.concat(frag0).join('/')\r\n}\r\n\r\n/**\r\n * Normalizes not a string path but an array path, then returns a normalized string path.\r\n * @function\r\n * @param {(string | number)[]} path\r\n * @returns {string} \r\n */\r\nexport const normalizePathArray = (path) => {\r\n  let rv = ''\r\n  for (let i = 0; i < path.length; i++) {\r\n    if (typeof path[i] == 'number' || isIntStr(path[i])) {\r\n      rv += '/*'\r\n    } else {\r\n      rv += '/' + path[i]\r\n    }\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * Separates a path described by a string into a (string|number) array.\r\n * @function\r\n * @param {string} path \r\n * @returns {(string | number)[]}\r\n */\r\nexport const pathToArray = (path) => {\r\n  const frags = path.split('/')\r\n  const rv = []\r\n  for (let i = 1; i < frags.length; i++) {\r\n    rv.push(isIntStr(frags[i]) ? +frags[i] : frags[i])\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * A variant of `typeof', which handles null and Array appropreately.\r\n * @function\r\n * @param {null|array|object|boolean|number|string} x \r\n * @returns {string}\r\n */\r\nexport const typeOf = (x) => x === null ? 'null' : Array.isArray(x) ? 'array' : typeof x\r\n\r\n/**\r\n * Empty object.\r\n * @type {{}}\r\n */\r\nexport const emptyObject = {}\r\n\r\n/**\r\n * Empty Array.\r\n * @template T\r\n * @type {T[]}\r\n */\r\nexport const emptyArray = []\r\n\r\n/**\r\n * Returns true if `x' is a json value.\r\n * @function\r\n * @param {any} x\r\n * @returns {boolean} \r\n */\r\nexport const isJsonValue = (x) => {\r\n  switch (typeOf(x)) {\r\n    case 'null': \r\n    case 'number': \r\n    case 'boolean': \r\n    case 'string': \r\n    case 'object': \r\n    case 'array': \r\n      return true\r\n    default: \r\n      return false\r\n  }\r\n}\r\n\r\n/**\r\n * Extracts common portion of pathes.\r\n * @function\r\n * @param {string} path1 \r\n * @param {string} path2 \r\n * @return {string}\r\n */\r\nexport const commonPath = (path1, path2) => {\r\n  const frags1 = path1.split('/')\r\n  const frags2 = path2.split('/')\r\n  const rv = []\r\n  for (let i = 0; i < frags1.length; i++) {\r\n    if (frags2.length <= i) break\r\n    if (frags1[i] != frags2[i]) break\r\n    rv.push(frags1[i])\r\n  }\r\n  return rv.join('/')\r\n}\r\n\r\n/**\r\n * Builds a query string from `obj'.\r\n * @function\r\n * @param {Object} obj \r\n * @param {boolean} omitEmptyParam \r\n * @returns {Record<string, string>}\r\n */\r\nexport const normalizeQuery = (obj, omitEmptyParam) => {\r\n  const rv = /** @type {Record<string, string>} */ ({})\r\n  for (let p in obj) {\r\n    switch (typeOf(p)) {\r\n      case 'null': \r\n        if (!omitEmptyParam) rv[p] = ''\r\n        break\r\n      case 'boolean': \r\n        rv[p] = obj[p] ? 'true' : 'false'\r\n        break\r\n      case 'number': \r\n        rv[p] = \"\" + obj[p]\r\n        break\r\n      case 'string': \r\n        if (omitEmptyParam && obj[p] === \"\") break\r\n        rv[p] = obj[p]\r\n        break\r\n    }\r\n  }\r\n  return rv\r\n}","\r\nimport * as U from '../src/core/utils'\r\n\r\nexport const run = (assert, assertError, assertUndefined) => {\r\n  assert(1, () => U.appendPath('/a/b', '0/c/d'), '/a/b/c/d')\r\n  assert(1.1, () => U.appendPath('', '0/c'), '/c')\r\n  assert(1.2, () => U.appendPath('/a/b', '/x/y'), '/x/y')\r\n  assert(1.3, () => U.appendPath('/a/b/c', '1/d/e'), '/a/b/d/e')\r\n  assert(1.4, () => U.appendPath('/a', '3/z'), '/z')\r\n  assert(1.5, () => U.appendPath('/a/b', '1'), '/a')\r\n  assert(1.6, () => U.appendPath('/a/b/c', '3'), '')\r\n\r\n  assert(2, () => U.commonPath('/a/b/c', '/a/b/c'), '/a/b/c')\r\n  assert(2.1, () => U.commonPath('/a/b/c', '/a/b/d'), '/a/b')\r\n  assert(2.2, () => U.commonPath('/a/b/c', '/a'), '/a')\r\n  assert(2.3, () => U.commonPath('/a/b/c', ''), '')\r\n}","//@ts-check\r\n/** @module core/env */\r\n\r\nimport {normalizePath, typeOf, isIntStr, normalizePathArray, appendPath} from './utils'\r\nimport {hasPath as rhasPath, init, path as rpath, assocPath, insert, last, dissoc, remove as rremove, update } from 'ramda'\r\n\r\n/** \r\n * @typedef {import(\"./schema\").Json} Json\r\n * @typedef {import(\"./schema\").Schema} Schema\r\n * @typedef {import(\"./schema\").Slot} Slot\r\n * @typedef {import(\"./schema\").SchemaDb} SchemaDb\r\n * @typedef {import(\"./schema\").LookupFunc} LookupFunc\r\n * @typedef {import(\"./schema\").ValidateFunc} ValidateFunc\r\n */\r\n/**\r\n * \r\n * @typedef {Object} Env\r\n * @property {Json} tree\r\n * @property {boolean} trackUpdate\r\n * @property {Array<string|number>} updatePoint\r\n * @property {SchemaDb} schemaDb\r\n * @property {ValidateFunc} validate\r\n * @property {Record<string,any>} extra\r\n * @property {any} [ret]\r\n * @property {any} [onPromiseThen]\r\n */\r\n/**\r\n * \r\n * @callback MutateSlotFunc\r\n * @param {Slot} slot\r\n * @param {string} path\r\n * @returns {Slot}\r\n */\r\n/**\r\n * \r\n * @template T\r\n * @callback ReduceSlotFunc\r\n * @param {T} cur\r\n * @param {Slot} slot\r\n * @param {string} path\r\n * @returns {T}\r\n */\r\n\r\n\r\n/**\r\n * see: https://github.com/ramda/ramda/pull/2841\r\n * Anyway, here we fix the original behavior.\r\n * @function\r\n * @private\r\n * @param {string[]} path \r\n * @param {any} x \r\n * @return {boolean}\r\n */\r\nconst hasPath = (path, x) => {\r\n  if (! path.length) return true\r\n  return rhasPath(path, x)\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @private\r\n */\r\nconst init2 = (list) => {\r\n  return init(init(list))\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @private\r\n * @param {Json} value \r\n * @return {Slot} \r\n */\r\nconst makeSlot = (value) => {\r\n  const rv = {value, invalid:false, message:''}\r\n  switch (typeOf(value)) {\r\n    case 'object': // FALLTHRU\r\n    case 'array': \r\n      break\r\n    case 'number': // FALLTHRU\r\n    case 'integer': \r\n      rv.input = '' + value\r\n      rv.touched = false\r\n      break\r\n    case 'boolean': \r\n      rv.input = (value) ? 'true' : 'false'\r\n      rv.touched = false\r\n      break\r\n    case 'null': \r\n      rv.input = ''\r\n      rv.touched = false\r\n      break\r\n    case 'string': \r\n      rv.input = value\r\n      rv.touched = false\r\n      break\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @private\r\n * @param {Json} data \r\n * @returns {Slot}\r\n */\r\nconst wrap = (data) => {\r\n  /** @type {(data:Json) => Slot} */\r\n  const inner = (data) => {\r\n    switch (typeOf(data)) {\r\n      case 'array': \r\n        const es = []\r\n        for (let i = 0; i < /** @type {Json[]} */ (data).length; i++) {\r\n          es[i] = inner(data[i])\r\n        }\r\n        return makeSlot(es)\r\n      case 'object': \r\n        const rec = {}\r\n        for (let p in /** @type {{[name:string]:Json}} */ (data)) {\r\n          rec[p] = inner(data[p])\r\n        }\r\n        return makeSlot(rec)\r\n      default: \r\n        return makeSlot(data)\r\n    }\r\n  }\r\n  return inner(data)\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @private\r\n * @param {Json} tree \r\n * @returns {Json}\r\n */\r\nconst strip = (tree) => {\r\n  const root = /** @type {Slot} */ (tree).value\r\n  switch (typeOf(root)) {\r\n    case 'array': \r\n      const es = []\r\n      for (let i = 0; i < /** @type {Array<Json>} */(root).length; i++) {\r\n        es[i] = strip(root[i])\r\n      }\r\n      return es\r\n    case 'object': \r\n      const rec = {}\r\n      for (let p in /** @type {Record<string,Json>} */(root)) {\r\n        rec[p] = strip(root[p])\r\n      }\r\n      return rec\r\n    default: \r\n      return root\r\n  }\r\n}\r\n\r\n/**\r\n * Makes env.\r\n * @function\r\n * @param {Json} data \r\n * @param {SchemaDb} schemaDb \r\n * @param {ValidateFunc} validate\r\n * @param {boolean} trackUpdate\r\n * @returns {Env}\r\n */\r\nexport const makeEnv = (data, schemaDb, validate, trackUpdate) => {\r\n  const tree = wrap(data)\r\n  return {\r\n    tree, \r\n    trackUpdate, \r\n    updatePoint: trackUpdate ? [] : null, \r\n    schemaDb, \r\n    validate, \r\n    extra: {}\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @param {Env} env0 \r\n * @param {Env} env1 \r\n * @returns {boolean}\r\n */\r\nexport const isSame = (env0, env1) => {\r\n  return (env0.tree === env1.tree && env0.extra === env1.extra)\r\n}\r\n\r\n/**\r\n * Internalizes a path\r\n * @function\r\n * @private\r\n * @param {string} path \r\n * @returns {(string|number)[]}\r\n */\r\nconst internPath = (path) => {\r\n  const frags = path.split('/')\r\n  const rv = []\r\n  for (let i = 1; i < frags.length; i++) {\r\n    rv.push('value')\r\n    rv.push(isIntStr(frags[i]) ? +frags[i] : frags[i])\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @private\r\n * @param {(string|number)[]} path \r\n * @returns {string}\r\n */\r\nconst externPath = (path) => {\r\n  let rv = \"\"\r\n  for (let i = 0; i < path.length; i += 2) {\r\n    rv += \"/\" + path[i + 1]\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @private\r\n * @param {((string|number)[])|null} path0 \r\n * @param {((string|number)[])|null} path1\r\n * @returns {((string|number)[])|null} \r\n */\r\nconst intersect = (path0, path1) => {\r\n  if (path0 === null) return path1\r\n  if (path1 === null) return path0\r\n\r\n  const rv = []\r\n  for (let i = 0; i < path0.length; i += 2) {\r\n    if (i >= path1.length) break\r\n    if (path0[i + 1] !== path1[i + 1]) break\r\n    rv.push(path0[i])\r\n    rv.push(path0[i + 1])\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const beginUpdateTracking = (env) => {\r\n  // Essentially, `updatePoint' should be set to null, but it can be omitted \r\n  // because the value when disabled is null.\r\n  return {...env, trackUpdate:true}\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @param {Env} env \r\n * @returns {[string|null, Env]}\r\n */\r\nexport const endUpdateTracking = (env) => {\r\n  const updatePoint = env.updatePoint ? externPath(env.updatePoint) : null\r\n  console.log('update occurred at ' + JSON.stringify(updatePoint))\r\n  return [\r\n    updatePoint, \r\n    {...env, trackUpdate:false, updatePoint:null}\r\n  ]\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @param {string} path \r\n * @param {Env} env \r\n * @returns {boolean}\r\n */\r\nexport const test = (path, env) => {\r\n  return hasPath(/** @type {string[]} */ (internPath(path)), env.tree)\r\n}\r\n\r\n/**\r\n * Extracts a subtree of Env.\r\n * @function\r\n * @param {string} path\r\n * @param {Env} env\r\n * @returns {Json}\r\n */\r\nexport const extract = (path, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const slot = rpath(epath, env.tree)\r\n  if (! slot) {\r\n    throw new Error('extract/1: not found: ' + path)\r\n  }\r\n  return strip(slot)\r\n}\r\n\r\n/**\r\n * Low-level api.\r\n * @function\r\n * @param {string} path \r\n * @param {Env} env\r\n * @returns {Slot} \r\n */\r\nexport const getSlot = (path, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const slot = rpath(epath, env.tree)\r\n  if (! slot) {\r\n    throw new Error('getSlot/1: not found: ' + path)\r\n  }\r\n  return slot\r\n}\r\n\r\n/**\r\n * Low-level api. This function executes neither validation nor coercion.\r\n * @function\r\n * @param {string} path \r\n * @param {Slot} slot \r\n * @param {Env} env\r\n * @returns {Env} \r\n * \r\n * slot value must be a scalar.\r\n */\r\nexport const setSlot = (path, slot, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const slot0 = rpath(epath, env.tree)\r\n  if (! slot0) {\r\n    throw new Error('setSlot/1: not found: ' + path)\r\n  }\r\n  switch (typeOf(slot0.value)) {\r\n    case 'null': \r\n    case 'boolean': \r\n    case 'number': \r\n    case 'string': \r\n    case 'undefined': \r\n      break\r\n    default: \r\n      throw new Error('setSlot/2: not a scalar: ' + path)\r\n  }\r\n  const tree = assocPath(epath, slot, env.tree)\r\n  const updatePoint = env.trackUpdate ? intersect(env.updatePoint, epath) : env.updatePoint\r\n  return {...env, tree, updatePoint}\r\n}\r\n\r\n/**\r\n * Adds value to env. `add' function of JSON patch.\r\n * @function\r\n * @param {string} path \r\n * @param {Json} value \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const add = (path, value, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const location = init2(epath)\r\n  const name = last(epath)\r\n  const slot0 = rpath(location, env.tree)\r\n  const type0 = typeOf(slot0.value)\r\n  if (type0 != 'object' && type0 != 'array') {\r\n    throw new Error('add/1 neither an object nor an array: ' + path)\r\n  }\r\n  if (type0 == 'array') {\r\n    // insert into array\r\n    const index = (name === '-') ? slot0.value.length : name\r\n    if (typeof index != 'number' || index % 1 !== 0) {\r\n      throw new Error('add/2 invalid index: ' + path)\r\n    }\r\n    if (index < 0 || index > slot0.value.length) {\r\n      throw new Error('add/3 index out of range: ' + path)\r\n    }\r\n    const value1 = wrap(value)\r\n    const lis = insert(index, value1, slot0.value)\r\n    const slot = makeSlot(lis)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    // Insertion to a list is an update not to an item but to the list.\r\n    const updatePoint = env.trackUpdate ? intersect(env.updatePoint, location) : env.updatePoint\r\n    return {...env, tree, updatePoint}\r\n  } else {\r\n    // define or replace into object\r\n    if (typeof name != 'string') {\r\n      throw new Error('add/4 invalid name: ' + path)\r\n    }\r\n    const value1 = wrap(value)\r\n    const rec = {...slot0.value, [name]:value1}\r\n    const slot = makeSlot(rec)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    // Adding a property is an update to an object, while replacing a property is an update to an property value.\r\n    const updatePoint = !env.trackUpdate ? env.updatePoint \r\n      : intersect(env.updatePoint, (name in slot0.value) ? epath : location)\r\n    return {...env, tree, updatePoint}\r\n  }\r\n}\r\n\r\n/**\r\n * Removes a value specified by path from env. `remove' function of JSON patch.\r\n * @function\r\n * @param {string} path \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const remove = (path, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const location = init2(epath)\r\n  const name = last(epath)\r\n  const slot0 = rpath(location, env.tree)\r\n  const type0 = typeOf(slot0.value)\r\n  if (type0 != 'object' && type0 != 'array') {\r\n    throw new Error('remove/1 neither an object nor an array: ' + path)\r\n  }\r\n  if (type0 == 'array') {\r\n    // removes from array\r\n    if (typeof name != 'number' || name % 1 !== 0) {\r\n      throw new Error('remove/2 invalid index: ' + path)\r\n    }\r\n    if (name < 0 || name >= slot0.value.length) {\r\n      throw new Error('remove/3 out of range: ' + path)\r\n    }\r\n    const lis = rremove(name, 1, slot0.value)\r\n    const slot = makeSlot(lis)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    const updatePoint = env.trackUpdate ? intersect(env.updatePoint, location) : env.updatePoint\r\n    return {...env, tree, updatePoint}\r\n  } else {\r\n    // delete property from object\r\n    if (! slot0.value.hasOwnProperty(name)) {\r\n      throw new Error('remove/4: property not found: ' + path)\r\n    }\r\n    const rec = dissoc(name, slot0.value)\r\n    const slot = makeSlot(rec)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    const updatePoint = env.trackUpdate ? intersect(env.updatePoint, location) : env.updatePoint\r\n    return {...env, tree, updatePoint}\r\n  }\r\n}\r\n\r\n/**\r\n * Replaces a value specified by path into value.  Implements replace function of JSON patch.\r\n * @function\r\n * @param {string} path \r\n * @param {Json} value \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const replace = (path, value, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  if (epath.length == 0) {\r\n    // replace whole data\r\n    const tree = wrap(value)\r\n    const updatePoint = env.trackUpdate ? [] : env.updatePoint\r\n    return {...env, tree, updatePoint}\r\n  }\r\n  const location = init2(epath)\r\n  const name = last(epath)\r\n  const slot0 = rpath(location, env.tree)\r\n  const type0 = typeOf(slot0.value)\r\n  if (type0 != 'object' && type0 != 'array') {\r\n    throw new Error('replace/1 neither an object nor an array: ' + path)\r\n  }\r\n  if (type0 == 'array') {\r\n    // replace an element in array\r\n    if (typeof name != 'number' || name % 1 !== 0) {\r\n      throw new Error('replace/2 invalid index: ' + path)\r\n    }\r\n    if (name < 0 || name >= slot0.value.length) {\r\n      throw new Error('replace/3 out of range: ' + path)\r\n    }\r\n    const value1 = wrap(value)\r\n    const lis = update(name, value1, slot0.value)\r\n    const slot = makeSlot(lis)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    const updatePoint = env.trackUpdate ? intersect(env.updatePoint, epath) : env.updatePoint\r\n    return {...env, tree, updatePoint}\r\n  } else {\r\n    // replace a property of object\r\n    if (typeof name != 'string') {\r\n      throw new Error('replace/4 invalid name: ' + path)\r\n    }\r\n    if (!(name in slot0.value)) {\r\n      throw new Error('replace/5 undefined property: ' + path)\r\n    }\r\n    const value1 = wrap(value)\r\n    const rec = {...slot0.value, [name]:value1}\r\n    const slot = makeSlot(rec)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    const updatePoint = env.trackUpdate ? intersect(env.updatePoint, epath) : env.updatePoint\r\n    return {...env, tree, updatePoint}\r\n  }\r\n}\r\n\r\n/**\r\n * Moves a value located in from, to a location specified by path.  Implements move function of JSON patch.\r\n * @function\r\n * @param {string} from \r\n * @param {string} path \r\n * @param {Env} env\r\n * @returns {Env} \r\n */\r\nexport const move = (from, path, env) => {\r\n  const value = extract(from, env)\r\n  env = remove(from, env)\r\n  env = add(path, value, env)\r\n  return env\r\n}\r\n\r\n/**\r\n * Copies a value located in from, to a location specified by path.  Impelementing copy function of JSON patch.\r\n * @function\r\n * @param {string} from \r\n * @param {string} path \r\n * @param {Env} env\r\n * @returns {Env} \r\n */\r\nexport const copy = (from, path, env) => {\r\n  const value = extract(from, env)\r\n  env = add(path, value, env)\r\n  return env\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @param {string} path \r\n * @param {Env} env\r\n * @returns {Env} \r\n */\r\nexport const validate = (path, env) => {\r\n  let basePath = null\r\n\r\n  /**\r\n   * \r\n   * @param {string} path \r\n   * @returns {Json}\r\n   */\r\n  const lookup = (path) => {\r\n    const pathToLookup = appendPath(basePath, path)\r\n    return extract(pathToLookup, env)\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {Slot} slot0 \r\n   * @param {string} npath\r\n   * @param {string} path\r\n   * @returns {Slot} \r\n   */\r\n  const inner = (slot0, npath, path) => {\r\n    const value0 = slot0.value\r\n    switch (typeOf(value0)) {\r\n      case 'array': \r\n        const lis = []\r\n        for (let i = 0; i < (/** @type {Json[]} */(value0)).length; i++) {\r\n          lis[i] = inner(value0[i], npath + '/*', path + '/' + i)\r\n        }\r\n        basePath = path\r\n        return env.validate(lis, slot0, env.schemaDb[npath], lookup)\r\n      case 'object': \r\n        const rec = {}\r\n        for (let p in  /** @type {{[name:string]:Json}} */(value0)) {\r\n          rec[p] = inner(value0[p], npath + '/' + p, path + '/' + p)\r\n        }\r\n        basePath = path\r\n        return env.validate(rec, slot0, env.schemaDb[npath], lookup)\r\n      default: \r\n        basePath = path\r\n        const slot = env.validate(value0, slot0, env.schemaDb[npath], lookup)\r\n        if (slot.value !== value0) {\r\n          throw new Error('validate/0: value changed: ' + path)\r\n        }\r\n        return slot\r\n    }\r\n  }\r\n\r\n  const epath = internPath(path)\r\n  const slot0 = rpath(epath, env.tree)\r\n  if (! slot0) {\r\n    throw new Error('validate/1: not found: ' + path)\r\n  }\r\n  const slot = inner(slot0, normalizePath(path), path)\r\n  const tree = assocPath(epath, slot, env.tree)\r\n  return {...env, tree}\r\n}\r\n\r\n/**\r\n * By f, maps every slot descending to a location specified by path.\r\n * @function\r\n * @param {MutateSlotFunc} f \r\n * @param {string} path \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const mapDeep = (f, path, env) => {\r\n  const inner = (slot0, path) => {\r\n    const value0 = slot0.value\r\n    switch (typeOf(value0)) {\r\n      case 'array': \r\n        const lis = []\r\n        for (let i = 0; i < value0.length; i++) {\r\n          lis[i] = inner(value0[i], path + '/' + i)\r\n        }\r\n        return {...f(slot0, path), value:lis}\r\n      case 'object': \r\n        const rec = {}\r\n        for (let p in value0) {\r\n          rec[p] = inner(value0[p], path + '/' + p)\r\n        }\r\n        return {...f(slot0, path), value:rec}\r\n      default: \r\n        return {...f(slot0, path), value:value0}\r\n    }\r\n  }\r\n  const epath = internPath(path)\r\n  const slot0 = rpath(epath, env.tree)\r\n  if (! slot0) {\r\n    throw new Error('mapDeep/1: not found: ' + path)\r\n  }\r\n  const slot = inner(slot0, path)\r\n  const tree = assocPath(epath, slot, env.tree)\r\n  return {...env, tree}\r\n}\r\n\r\n/**\r\n * By f, deeply reduces a subtree of path.\r\n * @function\r\n * @template T\r\n * @param {ReduceSlotFunc<T>} f \r\n * @param {T} cur \r\n * @param {string} path \r\n * @param {Env} env \r\n * @returns {T}\r\n */\r\nexport const reduceDeep = (f, cur, path, env) => {\r\n  const inner = (cur, slot, path) => {\r\n    const value0 = slot.value\r\n    switch (typeOf(value0)) {\r\n      case 'array': \r\n        for (let i = 0; i < value0.length; i++) {\r\n          cur = inner(cur, value0[i], path + '/' + i)\r\n        }\r\n        return f(cur, slot, path)\r\n      case 'object': \r\n        for (let p in value0) {\r\n          cur = inner(cur, value0[p], path + '/' + p)\r\n        }\r\n        return f(cur, slot, path)\r\n      default: \r\n        return f(cur, slot, path)\r\n    }\r\n  }\r\n  const epath = internPath(path)\r\n  const slot = rpath(epath, env.tree)\r\n  if (! slot) {\r\n    throw new Error('reduceDeep/1: not found: ' + path)\r\n  }\r\n  return inner(cur, slot, path)\r\n}\r\n\r\nexport const duplicate = (path, fromEnv, toEnv) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  if (epath.length == 0) {\r\n    // duplicate whole data\r\n    const tree = fromEnv.tree\r\n    const updatePoint = toEnv.trackUpdate ? [] : toEnv.updatePoint\r\n    return {...toEnv, tree, updatePoint}\r\n  }\r\n  const location = init2(epath)\r\n  const name = last(epath)\r\n  const slot0 = rpath(location, fromEnv.tree)\r\n  const type0 = typeOf(slot0.value)\r\n  if (type0 != 'object' && type0 != 'array') {\r\n    throw new Error('duplicate/1 neither an object nor an array: ' + path)\r\n  }\r\n  if (type0 == 'array') {\r\n    // duplicate an element in an array\r\n    if (typeof name != 'number' || name % 1 !== 0) {\r\n      throw new Error('duplicate/2 invalid index: ' + path)\r\n    }\r\n    if (name < 0 || name >= slot0.value.length) {\r\n      throw new Error('duplicate/3 out of range: ' + path)\r\n    }\r\n    const value1 = slot0.value[name]\r\n    const lis = update(name, value1, slot0.value)\r\n    const slot = makeSlot(lis)\r\n    const tree = assocPath(location, slot, toEnv.tree)\r\n    const updatePoint = toEnv.trackUpdate ? intersect(toEnv.updatePoint, epath) : toEnv.updatePoint\r\n    return {...toEnv, tree, updatePoint}\r\n  } else {\r\n    // duplicate a property of an object\r\n    if (typeof name != 'string') {\r\n      throw new Error('replace/4 invalid name: ' + path)\r\n    }\r\n    if (!(name in slot0.value)) {\r\n      throw new Error('replace/5 undefined property: ' + path)\r\n    }\r\n    const value1 = slot0.value[name]\r\n    const rec = {...slot0.value, [name]:value1}\r\n    const slot = makeSlot(rec)\r\n    const tree = assocPath(location, slot, toEnv.tree)\r\n    const updatePoint = toEnv.trackUpdate ? intersect(toEnv.updatePoint, epath) : toEnv.updatePoint\r\n    return {...toEnv, tree, updatePoint}\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @param {string} name \r\n * @param {Object|null} info \r\n * @param {Env} env\r\n * @returns {Env} \r\n */\r\nexport const setExtra = (name, info, env) => {\r\n  if (info === null) {\r\n    const {[name]:_unused, ...extra} = env.extra\r\n    return {...env, extra}\r\n  } else {\r\n    const extra = {...env.extra, [name]:info}\r\n    return {...env, extra}\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @param {string} name \r\n * @param {Env} env\r\n * @returns {Object|null} \r\n */\r\nexport const getExtra = (name, env) => {\r\n  return env.extra[name] || null\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @param {any} ret \r\n * @param {any} onPromiseThen\r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const setPortal = (ret, onPromiseThen, env) => {\r\n  if (ret) return {...env, ret, onPromiseThen}\r\n  const {ret:_unused, onPromiseThen:_unused2, ...env2} = env\r\n  return env2\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @param {Env} env\r\n * @returns {void} \r\n */\r\nexport const doReturn = (env) => {\r\n  if (env.ret) {\r\n    env.ret(env)\r\n  } else {\r\n    throw new Error('doReturn/0: no ret')\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @param {any} x\r\n * @returns {boolean} \r\n */\r\nexport const isEnv = (x) => {\r\n  return (x != null \r\n    && typeof x == \"object\" \r\n    && \"tree\" in x)\r\n}","\r\nimport * as E from '../src/core/env'\r\n\r\nconst validate = (value, schema) => {\r\n  //console.log('validate called', value, path)\r\n  return {'@value':value}\r\n}\r\n\r\nexport const run = (assert, assertError) => {\r\n  const json = {\r\n    name: 'Bob', \r\n    age: 24, \r\n    buddies: [\r\n      'Mam', 'Dad'\r\n    ]\r\n  }\r\n\r\n  let env = E.makeEnv(json, {}, validate, true)\r\n  assert(1, () => E.extract('/name', env), 'Bob')\r\n  assert(1.1, () => E.test('/name', env), true)\r\n  assert(1.2, () => E.test('/foo', env), false)\r\n\r\n  env = E.add('/email', 'info@example.com', env)\r\n  assert(2, () => E.extract('/email', env), 'info@example.com')\r\n  assertError(2.1, () => E.extract('/foo', env), 'extract/')\r\n\r\n  assert(3, () => E.extract('/buddies/1', env), 'Dad')\r\n\r\n  env = E.add('/buddies/1', 'Pochi', env)  // Mam,Pochi,Dad\r\n  assert(4, () => E.extract('/buddies/1', env), 'Pochi')\r\n  assertError(4.1, () => E.extract('/buddies/5', env), 'extract/')\r\n\r\n  env = E.add('/buddies/-', 'Komino', env)  // Mam,Pochi,Dad,Komino\r\n  assert(5, () => E.extract('/buddies/3', env), 'Komino')\r\n\r\n  env = E.remove('/buddies/3', env)  // Mam,Pochi,Dad\r\n  assert(6, () => E.extract('/buddies', env).join(','), 'Mam,Pochi,Dad')\r\n  assertError(6.1, () => E.extract('/buddies/3', env), 'extract/')\r\n\r\n  env = E.remove('/email', env)\r\n  assertError(7, () => E.extract('/email', env), 'extract/')\r\n  assertError(7.1, () => E.remove('/email', env), 'remove/')\r\n\r\n  assert(8, () => {\r\n    let slot80 = E.getSlot('/name', env)\r\n    slot80 = {...slot80, invalid:true}\r\n    env = E.setSlot('/name', slot80, env)\r\n    slot80 = E.getSlot('/name', env)\r\n    return slot80.invalid\r\n  }, true)\r\n\r\n  env = E.replace('/age', 30, env)\r\n  assert(9, () => E.extract('/age', env), 30)\r\n  let env2 = E.replace('', {foo:1}, env)\r\n  assert(9.1, () => E.extract('/foo', env2), 1)\r\n  assertError(9.2, () => E.extract('/age', env2), 'extract/')\r\n\r\n  env = E.add('/id', 'TS1101', env)\r\n  env = E.move('/id', '/employeeId', env)\r\n  assert(10, () => E.extract('/employeeId', env), 'TS1101')\r\n  assertError(10.1, () => E.extract('/id', env), 'extract/')\r\n\r\n  env = E.copy('/employeeId', '/id', env)\r\n  assert(11, () => E.extract('/employeeId', env), 'TS1101')\r\n  assert(11.1, () => E.extract('/id', env), 'TS1101')\r\n\r\n  assert(11.9, () => E.extract('/buddies', env).join(','), 'Mam,Pochi,Dad')\r\n  env = E.move('/buddies/2', '/buddies/0', env)  // Dad,Mam,Pochi\r\n  assert(12, () => E.extract('/buddies', env).join(','), 'Dad,Mam,Pochi')\r\n\r\n  env = E.copy('/buddies/0', '/buddies/2', env)  // Dad,Mam,Dad,Pochi\r\n  assert(13, () => E.extract('/buddies', env), 'Dad,Mam,Dad,Pochi')\r\n\r\n  env = E.mapDeep((slot, path) => ({...slot, message:'yeah'}), '/buddies', env)\r\n  assert(14, () => E.getSlot('/buddies', env).message, 'yeah')\r\n  assert(14.1, () => E.getSlot('/buddies/0', env).message, 'yeah')\r\n  assert(14.2, () => E.getSlot('/name', env).message || '', '')\r\n\r\n  assert(15, () => {\r\n    return E.reduceDeep((cur, slot, path) => {\r\n      if (path == '/buddies') return cur\r\n      return cur + `[${slot.value}]`\r\n    }, \"\", '/buddies', env)\r\n  }, '[Dad][Mam][Dad][Pochi]')\r\n\r\n  env = E.makeEnv(json, {}, validate, true)\r\n  assert(16, () => E.endUpdateTracking(env)[0], \"\")\r\n  env = E.endUpdateTracking(env)[1]\r\n  env = E.beginUpdateTracking(env)\r\n  env = E.replace('/age', 30, env)\r\n  assert(16.1, () => E.endUpdateTracking(env)[0], \"/age\")\r\n  env = E.add('/name', 'Jack', env)\r\n  assert(16.2, () => E.endUpdateTracking(env)[0], \"\")\r\n  env = E.makeEnv(json, {}, validate, false)\r\n  env = E.beginUpdateTracking(env)\r\n  env = E.add('/buddies/-', 'Puppy', env)\r\n  assert(16.3, () => E.endUpdateTracking(env)[0], \"/buddies\")\r\n  env = E.remove('/name', env)\r\n  assert(16.4, () => E.endUpdateTracking(env)[0], \"\")\r\n}\r\n\r\n","//@ts-check\r\n/** @module core/schema */\r\n\r\nimport {emptyObject, typeOf, isJsonValue, appendPath} from './utils'\r\n\r\n/**\r\n * \r\n * @typedef {import(\"./errors\").MgError} MgError\r\n */\r\n/**\r\n * \r\n * @callback LookupFunc\r\n * @param {string} path\r\n * @returns {Json}\r\n */\r\n/**\r\n * \r\n * @callback RuleFunc\r\n * @param {Json} param\r\n * @param {Json} value\r\n * @param {LookupFunc} lookup\r\n * @param {Rules} rules\r\n * @returns {true|MgError}\r\n */\r\n/**\r\n * \r\n * @typedef {null|number|string|boolean|array|object} Json \r\n */\r\n/**\r\n * \r\n * @typedef {Object} Slot\r\n * @property {boolean} [invalid]\r\n * @property {MgError} [error]\r\n * @property {boolean} [touched]\r\n * @property {string} [input]\r\n * @property {Json} [value]\r\n */\r\n/**\r\n * \r\n * @callback ValidateFunc\r\n * @param {any} value\r\n * @param {Slot} slot0\r\n * @param {Schema} schema\r\n * @param {LookupFunc} lookup\r\n * @returns {Slot}\r\n */\r\n/**\r\n * \r\n * @typedef {Record<string,Json>} Schema\r\n */\r\n/**\r\n * \r\n * @typedef {Record<string,RuleFunc>} Rules\r\n */\r\n/**\r\n * \r\n * @typedef {Record<string,Schema>} SchemaDb\r\n */\r\n\r\n/**\r\n * Returns true if type specification allows null.\r\n * @function\r\n * @private\r\n * @param {string|null|undefined} type a type in schema\r\n */\r\nconst nullable = (type) => {\r\n  if (! type) return true\r\n  const lastChar = type.charAt(type.length - 1)\r\n  return type == 'null' || lastChar == '?'\r\n}\r\n\r\n/**\r\n * Builds a map from path to schema.\r\n * @function\r\n * @param {Json} schema \r\n * @returns {SchemaDb}\r\n */\r\nexport const buildDb = (schema) => {\r\n  const db = /** @type SchemaDb */ ({})\r\n  const inner = (schema, path) => {\r\n    db[path] = schema\r\n    switch (schema.type) {\r\n      case 'object': \r\n      case 'object?': \r\n        for (let p in schema.properties) {\r\n          inner(schema.properties[p], path + '/' + p)\r\n        }\r\n        break\r\n      case 'array': \r\n      case 'array?': \r\n        inner(schema.items, path + '/*')\r\n        break\r\n      default: \r\n        break\r\n    }\r\n  }\r\n  inner(schema, \"\")\r\n  return db\r\n}\r\n\r\n/**\r\n * Returns true if the value is in an specified type\r\n * @function\r\n * @private\r\n * @param {Json} value\r\n * @param {string} type \r\n * @returns {boolean}\r\n */\r\nconst testType = (value, type) => {\r\n  if (! type) return true\r\n  if (value === null) {\r\n    return nullable(type)\r\n  } else {\r\n    switch (type) {\r\n      case 'null': \r\n        return false\r\n      case 'number':  // FALLTHRU\r\n      case 'number?': \r\n        return typeof value == 'number'\r\n      case 'integer':  // FALLTHRU\r\n      case 'integer?': \r\n        return (typeof value == 'number' && value % 1 === 0)\r\n      case 'boolean':  // FALLTHRU\r\n      case 'boolean?': \r\n        return typeof value == 'boolean'\r\n      case 'string': \r\n        return typeof value == 'string'\r\n      case 'object':  // FALLTHRU\r\n      case 'object?': \r\n        return (typeof value == 'object' && value !== null)\r\n      case 'array':  // FALLTHRU\r\n      case 'array?': \r\n        return Array.isArray(value)\r\n      default: \r\n        throw new Error('unknown type: ' + type)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * default validation rules.\r\n * @type {Rules}\r\n */\r\nexport const defaultRules = {\r\n  type: (param, value) => {\r\n    if (typeof param != 'string') throw new Error('invalid type')\r\n    const result = testType(value, param)\r\n    if (! result) return {code:'type.'+param}\r\n    return true\r\n  }, \r\n  'enum': (param, value) => {\r\n    if (! Array.isArray(param)) throw new Error('invalid parameter')\r\n    for (let i = 0; i < param.length; i++) {\r\n      if (param[i] === value) return true\r\n    }\r\n    return {code:'rule.enum'}\r\n  }, \r\n  'const': (param, value) => {\r\n    if (param === value) return true\r\n    switch (typeOf(param)) {\r\n      case 'string': \r\n      case 'number': \r\n      case 'null': \r\n      case 'boolean': \r\n        return {code:'rule.const', hint: /** @type {string|number|null|boolean} */(param)}\r\n      default: \r\n        return {code:'rule.const.nohint'}\r\n    }\r\n  }, \r\n  notEmpty: (_param, value) => {\r\n    if (typeOf(value) != 'string') return true\r\n    if (value !== '') return true\r\n    return {code:'rule.notEmpty'}\r\n  }, \r\n  required: (param, value) => {\r\n    if (! Array.isArray(param)) throw new Error('invalid parameter')\r\n    if (typeOf(value) != 'object') return true\r\n    for (let i = 0; i < param.length; i++) {\r\n      if (! value.hasOwnProperty(param[i])) return {code:'rule.required', hint:param[i]}\r\n    }\r\n    return true\r\n  }, \r\n  switchRequired: (param, value, lookup) => {\r\n    if (typeOf(param) != 'object' || !('tagProperty' in /** @type {object} */ (param))) throw new Error('invalid parameter')\r\n    if (typeOf(value) != 'object') return true\r\n    const tag = /** @type {string} */ (lookup('0/' + param.tagProperty))\r\n    if (! tag) return {code:'rule.switchRequired.nohint', decription:'no tag'}\r\n    if (! param.types[tag]) return {code:'rule.switchRequired.nohint', detail:'no type'}\r\n    const required = param.types[tag]\r\n    if (! Array.isArray(required)) throw new Error('invalid parameter')\r\n    for (let i = 0; i < required.length; i++) {\r\n      if (! value.hasOwnProperty(required[i])) return {code:'rule.switchRequired', hint:required[i]}\r\n    }\r\n    return true\r\n  }, \r\n  same: (param, value, lookup) => {\r\n    if (typeof param != 'string') throw new Error('invalid parameter')\r\n    const target = lookup(param)\r\n    if (target !== value) {\r\n      switch (typeOf(target)) {\r\n        case 'string': \r\n        case 'number': \r\n        case 'null': \r\n        case 'boolean': \r\n          return {code:'rule.same', hint: /** @type {string|number|null|boolean} */(target)}\r\n        default: \r\n          return {code:'rule.same.nohint'}\r\n      }\r\n    }\r\n    return true\r\n  }, \r\n  if: (param, value, lookup, rules) => {\r\n    if (typeOf(param) != 'array') throw new Error('invalid parameter')\r\n    const [target, match, then, el = {}] = /** @type {Array} */ (param)\r\n    if (! target || ! match || ! then) throw new Error('invalid parameter')\r\n    const targetValue = lookup(target)\r\n    const targetResult = applyRules(targetValue, match, lookup, rules)\r\n    if (targetResult === true) {\r\n      return applyRules(value, then, lookup, rules)\r\n    } else {\r\n      return applyRules(value, el, lookup, rules)\r\n    }\r\n  }, \r\n  // TODO: allOf, eitherOf, not\r\n  multipleOf: (param, value) => {\r\n    if (typeof param != 'number') throw new Error('invalid parameter')\r\n    if (typeof value != 'number') return true\r\n    if (value % param === 0) return true\r\n    return {code:'rule.multipleOf', hint:param}\r\n  }, \r\n  maximum: (param, value) => {\r\n    if (typeof value != 'number') return true\r\n    if (param >= value) return true\r\n    return {code:'rule.maximum', hint: /** @type {number} */ (param)}\r\n  }, \r\n  exclusiveMaximum: (param, value) => {\r\n    if (typeof value != 'number') return true\r\n    if (param > value) return true\r\n    return {code:'rule.exclusiveMaximum', hint: /** @type {number} */ (param)}\r\n  }, \r\n  minimum: (param, value) => {\r\n    if (typeof value != 'number') return true\r\n    if (param <= value) return true\r\n    return {code:'rule.minimum', hint: /** @type {number} */ (param)}\r\n  }, \r\n  exclusiveMinimum: (param, value) => {\r\n    if (typeof value != 'number') return true\r\n    if (param < value) return true\r\n    return {code:'rule.exclusiveMinimum', hint: /** @type {number} */ (param)}\r\n  }, \r\n  maxLength: (param, value) => {\r\n    if (typeof value != 'string') return true\r\n    if (value.length <= param) return true\r\n    return {code:'rule.maxLength', hint: /** @type {number} */ (param)}\r\n  }, \r\n  minLength: (param, value) => {\r\n    if (typeof value != 'string') return true\r\n    if (value.length >= param) return true\r\n    return {code:'rule.minLength', hint: /** @type {number} */ (param)}\r\n  }, \r\n  'pattern': (param, value) => {\r\n    if (typeof param != 'string') throw new Error('invalid parameter')\r\n    if (typeof value != 'string') return true\r\n    if (new RegExp(param).test(value)) return true\r\n    return {code:'rule.pattern', hint: /** @type {string} */ (param)}\r\n  }, \r\n  maxItems: (param, value) => {\r\n    if (typeof param != 'number') throw new Error('invalid parameter')\r\n    if (! Array.isArray(value)) return true\r\n    if (value.length <= param) return true\r\n    return {code:'rule.maxItems', hint: /** @type {number} */ (param)}\r\n  }, \r\n  minItems: (param, value) => {\r\n    if (typeof param != 'number') throw new Error('invalid parameter')\r\n    if (! Array.isArray(value)) return true\r\n    if (value.length >= param) return true\r\n    return {code:'rule.minItems', hint: /** @type {number} */ (param)}\r\n  }\r\n}\r\n\r\n/**\r\n * Validates a value with a schema.\r\n * @function\r\n * @description shallow validation\r\n * @param {Rules} rules\r\n * @returns {ValidateFunc} \r\n */\r\nexport const validate = (rules) => (value, slot, schema, lookup) => {\r\n  if (! isJsonValue(value)) {\r\n    if (schema && schema.type) {\r\n      const error = {code:'type.'+schema.type, detail:'given value: '+value}\r\n      return {...slot, value, invalid:true, error}\r\n    } else {\r\n      const error = {code:'value', detail:'given value: '+value}\r\n      return {...slot, value, invalid:true, error}\r\n    }\r\n  }\r\n\r\n  if (schema) {\r\n    const result = applyRules(value, schema, lookup, rules)\r\n    if (result !== true) {\r\n      return {...slot, value, invalid:true, error:result}\r\n    }\r\n  }\r\n  return {...slot, value, invalid:false, error:null}\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @param {Json} value \r\n * @param {Schema} schema \r\n * @param {LookupFunc} lookup \r\n * @param {Rules} rules \r\n * @returns {true|MgError}\r\n */\r\nexport const applyRules = (value, schema, lookup, rules) => {\r\n  for (let p in schema) {\r\n    const f = rules[p]\r\n    if (! f) continue\r\n    const result = f(schema[p], value, lookup, rules)\r\n    if (result !== true) return result\r\n  }\r\n  return true\r\n}\r\n\r\n/**\r\n * \r\n * @function\r\n * @param {string} input\r\n * @param {Slot} slot\r\n * @param {Schema} schema\r\n * @returns {Slot}\r\n */\r\nexport const coerce = (input, slot, schema) => {\r\n  input = \"\" + input  // coerce to string\r\n  if (! schema) {\r\n    throw new Error('coerce/0: no schema')\r\n  }\r\n  if (! schema.type || typeof schema.type != 'string') {\r\n    throw new Error('coerce/1: type not specified')\r\n  }\r\n  const type = schema.type\r\n  if (['null', 'boolean', 'boolean?', 'integer', 'integer?', 'number', 'number?', 'string'].indexOf(type) == -1) {\r\n    throw new Error('coerce/2: not a coercion enabled type: ' + type)\r\n  }\r\n\r\n  switch (type) {\r\n    case 'null': \r\n      break\r\n    case 'number': \r\n    case 'number?': \r\n      const n = +input\r\n      if (\"\" + n === input) {\r\n        return {value:n, input, touched:slot.touched}\r\n      }\r\n      break\r\n    case 'integer': \r\n    case 'integer?': \r\n      const i = +input\r\n      if (\"\" + i === input && i % 1 === 0) {\r\n        return {value:i, input, touched:slot.touched}\r\n      }\r\n      break\r\n    case 'boolean': \r\n    case 'boolean?': \r\n      if (input === \"true\" || input === \"false\") {\r\n        return {value:input===\"true\", input, touched:slot.touched}\r\n      }\r\n      break\r\n    case 'string': \r\n      return {value:input, input, touched:slot.touched}\r\n  }\r\n  if (input == \"\" && nullable(type)) {\r\n    return {value:null, input, touched:slot.touched}\r\n  }\r\n  return {input, touched:slot.touched}\r\n}\r\n","\r\nimport * as S from '../src/core/schema'\r\n\r\nexport const run = (assert, assertError, assertUndefined) => {\r\n  const v = S.validate(S.defaultRules)\r\n  const c = S.coerce\r\n\r\n  let s = null\r\n  let env = null\r\n\r\n  // type null\r\n  s = {type:'null'}\r\n  assert(1, () => v(null, {}, s).invalid, false)\r\n  assert(1.1, () => v(1, {}, s).invalid, true)\r\n  assert(1.2, () => v(\"abc\", {}, s).invalid, true)\r\n  assert(1.3, () => c(\"\", {}, s).value, null)\r\n  assertUndefined(1.4, () => c(\"abc\", {}, s).value)\r\n  assert(1.5, () => v(undefined, {}, s).invalid, true)\r\n\r\n  // no schema\r\n  s = null\r\n  assert(2, () => v(null, {}, s).invalid, false)\r\n  assert(2.1, () => v(10, {}, s).invalid, false)\r\n  assert(2.2, () => v([], {}, s).invalid, false)\r\n  assertError(2.3, () => c(\"\", {}, s), 'coerce/')\r\n  assertError(2.4, () => c(\"aaa\", {}, s), 'coerce/')\r\n  assert(2.5, () => v(undefined, {}, s).invalid, true)  // because `undefined' is not a JSON value\r\n\r\n  // type boolean\r\n  s = {type:'boolean'}\r\n  assert(3, () => v(null, {}, s).invalid, true)\r\n  assert(3.1, () => v(1, {}, s).invalid, true)\r\n  assert(3.2, () => v(true, {}, s).invalid, false)\r\n  assertUndefined(3.3, () => c('', {}, s).value)\r\n  assert(3.4, () => c('false', {}, s).value, false)\r\n  assertUndefined(3.5, () => c('abc', {}, s).value)\r\n  assert(3.6, () => c('true', {}, s).value, true)\r\n\r\n  // type boolean?\r\n  s = {type:'boolean?'}\r\n  assert(4, () => v(null, {}, s).invalid, false)\r\n  assert(4.1, () => v(1, {}, s).invalid, true)\r\n  assert(4.2, () => v(true, {}, s).invalid, false)\r\n  assert(4.3, () => c('', {}, s).value, null)\r\n  assert(4.4, () => c('false', {}, s).value, false)\r\n  assertUndefined(4.5, () => c('abc', {}, s).value)\r\n\r\n  // type integer\r\n  s = {type:'integer'}\r\n  assert(5, () => v(null, {}, s).invalid, true)\r\n  assert(5.1, () => v(1, {}, s).invalid, false)\r\n  assert(5.2, () => v(true, {}, s).invalid, true)\r\n  assertUndefined(5.3, () => c('', {}, s).value)\r\n  assert(5.4, () => c('10', {}, s).value, 10)\r\n  assertUndefined(5.5, () => c('abc', {}, s).value)\r\n  assert(5.6, () => v(132, {}, s).value, 132)\r\n\r\n  // type integer?\r\n  s = {type:'integer?'}\r\n  assert(6, () => v(null, {}, s).invalid, false)\r\n  assert(6.1, () => v(1, {}, s).invalid, false)\r\n  assert(6.2, () => v(true, {}, s).invalid, true)\r\n  assert(6.3, () => c('', {}, s).value, null)\r\n  assert(6.4, () => c('10', {}, s).value, 10)\r\n  assertUndefined(6.5, () => c('10.3', {}, s).value)\r\n  assert(6.6, () => c('132', {}, s).value, 132)\r\n\r\n  // type number\r\n  s = {type:'number'}\r\n  assert(7, () => v(null, {}, s).invalid, true)\r\n  assert(7.1, () => v(1.2, {}, s).invalid, false)\r\n  assert(7.2, () => v(true, {}, s).invalid, true)\r\n  assertUndefined(7.3, () => c('', {}, s).value)\r\n  assert(7.4, () => c('10.3', {}, s).value, 10.3)\r\n  assertUndefined(7.5, () => c('abc', {}, s).value)\r\n\r\n  // type number?\r\n  s = {type:'number?'}\r\n  assert(8, () => v(null, {}, s).invalid, false)\r\n  assert(8.1, () => v(1.2, {}, s).invalid, false)\r\n  assert(8.2, () => v(true, {}, s).invalid, true)\r\n  assert(8.3, () => c('', {}, s).value, null)\r\n  assert(8.4, () => c('10.3', {}, s).value, 10.3)\r\n  assertUndefined(8.5, () => c('abc', {}, s).value)\r\n\r\n  // type string\r\n  s = {type:'string'}\r\n  assert(9, () => v(null, {}, s).invalid, true)\r\n  assert(9.1, () => v('', {}, s).invalid, false)\r\n  assert(9.2, () => v(true, {}, s).invalid, true)\r\n  assert(9.3, () => v('abc', {}, s).invalid, false)\r\n  assert(9.4, () => c(\"\", {}, s).value, \"\")\r\n  assert(9.5, () => c(\"abc\", {}, s).value, \"abc\")\r\n\r\n  // type object\r\n  s = {type:'object'}\r\n  assert(10, () => v(null, {}, s).invalid, true)\r\n  assert(10.1, () => v('', {}, s).invalid, true)\r\n  assert(10.2, () => v({}, s).invalid, false)\r\n  assertError(10.3, () => c('', {}, s), 'coerce/')\r\n\r\n  // type object?\r\n  s = {type:'object?'}\r\n  assert(11, () => v(null, {}, s).invalid, false)\r\n  assert(11.1, () => v('', {}, s).invalid, true)\r\n  assert(11.2, () => v({}, {}, s).invalid, false)\r\n  assertError(11.3, () => c('', {}, s), 'coerce/')\r\n\r\n  // type array\r\n  s = {type:'array'}\r\n  assert(12, () => v(null, {}, s).invalid, true)\r\n  assert(12.1, () => v('', {}, s).invalid, true)\r\n  assert(12.2, () => v([], {}, s).invalid, false)\r\n  assertError(12.3, () => c('', {}, s), 'coerce/')\r\n\r\n  // type array?\r\n  s = {type:'array?'}\r\n  assert(13, () => v(null, {}, s).invalid, false)\r\n  assert(13.1, () => v('', {}, s).invalid, true)\r\n  assert(13.2, () => v([], {}, s).invalid, false)\r\n  assertError(13.3, () => c('', {}, s), 'coerce/')\r\n\r\n  // rule enum\r\n  s = {type:'integer?', enum:[1]}\r\n  assert(14, () => v(null, {}, s).invalid, true)\r\n  assert(14.1, () => v(1, {}, s).invalid, false)\r\n  assert(14.2, () => v(3, {}, s).invalid, true)\r\n\r\n  // rule const\r\n  s = {type:'number', 'const':3.2}\r\n  assert(15, () => v(3.2, {}, s).invalid, false)\r\n  assert(15.1, () => v(3, {}, s).invalid, true)\r\n\r\n  // rule required\r\n  s = {type:'object', required:['foo', 'bar']}\r\n  assert(16, () => v({foo:1, bar:1}, {}, s).invalid, false)\r\n  assert(16.1, () => v({foo:1}, {}, s).invalid, true)\r\n  assert(16.2, () => v({foo:1, bar:1, baz:1}, {}, s).invalid, false)\r\n  assert(16.3, () => v(1, {}, {...s, type:'integer'}).invalid, false)\r\n\r\n  // rule switchRequired\r\n  s = {\r\n    type:'object', \r\n    switchRequired: {\r\n      tagProperty: 'type', \r\n      types: {\r\n        infix: ['type', 'op', 'lhs', 'rhs'], \r\n        app: ['type', 'f', 'arg'], \r\n        var: ['type', 'var'], \r\n        lit: ['type', 'val'], \r\n        lambda: ['type', 'param', 'expr']\r\n      }\r\n    }\r\n  }\r\n  let data = {type:'infix', op:'*', lhs:{type:'var', var:'n'}, rhs:{type:'app', f:'fact', arg:{type:'infix', op:'-', lhs:{type:'var', var:'n'}, rhs:{type:'lit'}}}}  // n * fact(n - 1)\r\n  assert(17, () => v(data, {}, s, (path) => 'infix').invalid, false)\r\n  assert(17.1, () => v(data.lhs, {}, s, (path) => 'var').invalid, false)\r\n  assert(17.2, () => v(data.rhs.arg.rhs, {}, s, (path) => 'lit').invalid, true)\r\n  assert(17.3, () => v(1, {}, {...s, type:'integer'}).invalid, false)\r\n\r\n  // rule multipleOf\r\n  s = {type:'number?', multipleOf:1.2}\r\n  assert(18, () => v(-2.4, {}, s).invalid, false)\r\n  assert(18.1, () => v(1.5, {}, s).invalid, true)\r\n  assert(18.2, () => v(null, {}, s).invalid, false)\r\n  assert(18.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule maximum\r\n  s = {type:'integer?', maximum:10}\r\n  assert(19, () => v(10, {}, s).invalid, false)\r\n  assert(19.1, () => v(11, {}, s).invalid, true)\r\n  assert(19.2, () => v(null, {}, s).invalid, false)\r\n  assert(19.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule exclusiveMaximum\r\n  s = {type:'integer?', exclusiveMaximum:10}\r\n  assert(20, () => v(9, {}, s).invalid, false)\r\n  assert(20.1, () => v(10, {}, s).invalid, true)\r\n  assert(20.2, () => v(null, {}, s).invalid, false)\r\n  assert(20.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule minimum\r\n  s = {type:'integer?', minimum:10}\r\n  assert(21, () => v(10, {}, s).invalid, false)\r\n  assert(21.1, () => v(9, {}, s).invalid, true)\r\n  assert(21.2, () => v(null, {}, s).invalid, false)\r\n  assert(21.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule exclusiveMinimum\r\n  s = {type:'integer?', exclusiveMinimum:10}\r\n  assert(20, () => v(10, {}, s).invalid, true)\r\n  assert(20.1, () => v(11, {}, s).invalid, false)\r\n  assert(20.2, () => v(null, {}, s).invalid, false)\r\n  assert(20.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule maxLength\r\n  s = {type:'string', maxLength:3}\r\n  assert(21, () => v('abc', {}, s).invalid, false)\r\n  assert(21.1, () => v('abcd', {}, s).invalid, true)\r\n  assert(21.2, () => v('', {}, s).invalid, false)\r\n  assert(21.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule minLength\r\n  s = {type:'string', minLength:3}\r\n  assert(21, () => v('abd', {}, s).invalid, false)\r\n  assert(21.1, () => v('ab', {}, s).invalid, true)\r\n  assert(21.2, () => v('', {}, s).invalid, true)\r\n  assert(21.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n  \r\n  // rule pattern\r\n  s = {type:'string', pattern:\"^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$\"}\r\n  assert(22, () => v('info@example.com', {}, s).invalid, false)\r\n  assert(22.1, () => v('192.168.0.1', {}, s).invalid, true)\r\n  assert(22.2, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule maxItems\r\n  s = {type:'array?', maxItems:3}\r\n  assert(23, () => v([1,2,3], {}, s).invalid, false)\r\n  assert(23.1, () => v([1,2,3,4], {}, s).invalid, true)\r\n  assert(23.2, () => v(null, {}, s).invalid, false)\r\n  assert(23.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule minItems\r\n  s = {type:'array?', minItems:4}\r\n  assert(24, () => v([1,2,3], {}, s).invalid, true)\r\n  assert(24.1, () => v([1,2,3,4], {}, s).invalid, false)\r\n  assert(24.2, () => v(null, {}, s).invalid, false)\r\n  assert(24.3, () => v(true, {}, {...s, type:'boolean'}).invalid, false)\r\n\r\n  // rule same\r\n  s = {type:'string',same:'/first'}\r\n  data = {first:'a', second:'a'}\r\n  assert(25, () => v('a', {}, s, (path) => 'a').invalid, false)\r\n  assert(25.1, () => v('b', {}, s, (path) => 'a').invalid, true)\r\n  s = {same:'/first'}\r\n  assert(25.2, () => v('a', {}, s, (path) => 'a').invalid, false)\r\n\r\n  // rule conditional\r\n  s = {\r\n    type:'object?', \r\n    properties: {\r\n      at: {type:'string'}, \r\n      to: {type:'string'}\r\n    }, \r\n    required:['at', 'to'], \r\n    if: ['/status', {enum:['shipped', 'refunded']}, {type:'object'}]\r\n  }\r\n  assert(26, () => v(null, {}, s, (path) => 'new', S.defaultRules).invalid, false)\r\n  assert(26.1, () => v(null, {}, s, (path) => 'shipped', S.defaultRules).invalid, true)\r\n  assert(26.2, () => v({at:'a',to:'b'}, {}, s, (path) => 'new', S.defaultRules).invalid, false)\r\n  assert(26.3, () => v({at:'a',to:'b'}, {}, s, (path) => 'shipped', S.defaultRules).invalid, false)\r\n  s = {\r\n    type:'object?', \r\n    properties: {\r\n      at: {type:'string'}, \r\n      to: {type:'string'}\r\n    }, \r\n    required:['at', 'to'], \r\n    if: ['/status', {enum:['shipped', 'refunded']}, {type:'object'}, {type:'null'}]\r\n  }\r\n  assert(26.4, () => v(null, {}, s, (path) => 'new', S.defaultRules).invalid, false)\r\n  assert(26.5, () => v(null, {}, s, (path) => 'shipped', S.defaultRules).invalid, true)\r\n  assert(26.6, () => v({at:'a',to:'b'}, {}, s, (path) => 'new', S.defaultRules).invalid, true)\r\n  assert(26.7, () => v({at:'a',to:'b'}, {}, s, (path) => 'shipped', S.defaultRules).invalid, false)\r\n\r\n  /*s = {\r\n    type:'object?', \r\n    properties: {\r\n      at: {type:'string'}, \r\n      to: {type:'string'}\r\n    }, \r\n    required:['at', 'to'], \r\n    allOf: [\r\n      {conditional: ['/status', {enum:['shipped', 'refunded']}, {type:'object'}]}, \r\n      {conditional: ['/status', {not:{enum:['shipped', 'refunded']}}, {type:'null'}]}\r\n    ]\r\n  }*/\r\n}","\r\nimport * as U from './utils'\r\nimport * as E from './env'\r\nimport * as S from './schema'\r\n\r\nconst assert = (ident, thunk, rv) => {\r\n  const lv = thunk()\r\n  if (lv == rv) {\r\n    console.log('- ASSERTION', ident, 'OK')\r\n  } else {\r\n    console.log('! ASSERTION', ident, 'NG', lv, rv)\r\n  }\r\n}\r\n\r\nconst assertUndefined = (ident, thunk) => {\r\n  const lv = thunk()\r\n  if (typeof lv == \"undefined\") {\r\n    console.log('- ASSERTION', ident, 'OK')\r\n  } else {\r\n    console.log('! ASSERTION', ident, 'NG', lv, \"undefined\")\r\n  }\r\n}\r\n\r\nconst assertError = (ident, thunk, match) => {\r\n  let status = null\r\n  try {\r\n    const lv = thunk()\r\n    status = \"no error\"\r\n  } catch (e) {\r\n    if (e instanceof Error && e.message.startsWith(match)) {\r\n      console.log('- ASSERTION', ident, 'OK')\r\n      return\r\n    } else {\r\n      status = \"matching failure: \" + e.message\r\n    }\r\n  }\r\n  console.log('! ASSERTION', ident, 'NG', status)\r\n}\r\n\r\nconst callRun = (m, name) => {\r\n  console.log('TEST START: ' + name)\r\n  m.run(assert, assertError, assertUndefined)\r\n  console.log('TEST DONE: ' + name)\r\n  console.log('')\r\n}\r\n\r\ncallRun(U, 'utils')\r\ncallRun(E, 'env')\r\ncallRun(S, 'schema')"]}