{"version":3,"sources":["../src/env.js","test.js"],"names":["append2","name1","name2","list","R","append","init2","init","hasPath","path","x","length","last2","typeFrag","str","n","normPath","frags","rv","i","wrap","json","validate","Array","isArray","es","path2","rec","p","strip","data","root","fromJson","toJson","env","serialize","unserialize","serialized","basename","Error","last","compose","base","frag0","split","frag","upcount","tail","makePath","epath","goTo","getm","meta","value","slot","hasOwnProperty","gets","setm","slot0","assocPath","sets","lookup","replace","add","location","name","index","lis","insert","value1","remove","dissoc","move","from","copy","console","log","assert","ident","thunk","lv","assertError","match","status","e","message","startsWith","testEnv","E","age","buddies"],"mappings":"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","file":"test.js","sourceRoot":"..\\..\\tests","sourcesContent":["\r\nimport * as R from 'ramda'\r\n\r\nconst append2 = (name1, name2, list) => {\r\n  return R.append(name2, R.append(name1, list))\r\n}\r\n\r\nconst init2 = (list) => {\r\n  return R.init(R.init(list))\r\n}\r\n\r\n// see: https://github.com/ramda/ramda/pull/2841\r\n// Anyway, here we fix the original behavior.\r\nconst hasPath = (path, x) => {\r\n  if (! path.length) return true\r\n  return R.hasPath(path, x)\r\n}\r\n\r\nconst last2 = (list) => {\r\n  return list[list.length - 2]\r\n}\r\n\r\nconst typeFrag = (str) => {\r\n  if (typeof str == 'number') return str\r\n  const n = +str\r\n  return (n + \"\" === str) ? n : str\r\n}\r\n\r\nconst normPath = (frags) => {\r\n  let rv = \"\"\r\n  for (let i = 0; i < frags.length; i++) {\r\n    if (frags[i] == '@value') {\r\n      rv += '/'\r\n    } else if (typeof frags[i] == 'number' || frags[i] == '-') {\r\n      rv += '*'\r\n    } else {\r\n      rv += frags[i]\r\n    }\r\n  }\r\n  return rv\r\n}\r\n\r\nconst wrap = (json, path, validate) => {\r\n  switch (json === null ? 'null' : Array.isArray(json) ? 'array' : typeof json) {\r\n    case 'array': \r\n      const es = []\r\n      const path2 = path + '/*'\r\n      for (let i = 0; i < json.length; i++) {\r\n        es[i] = wrap(json[i], path2, validate)\r\n      }\r\n      return validate(es, path)\r\n    case 'object': \r\n      const rec = {}\r\n      for (let p in json) {\r\n        rec[p] = wrap(json[p], path + '/' + p, validate)\r\n      }\r\n      return validate(rec, path)\r\n    default: \r\n      return validate(json, path)\r\n  }\r\n}\r\n\r\nconst strip = (data) => {\r\n  const root = data['@value']\r\n  switch (root === null ? 'null' : Array.isArray(root) ? 'array' : typeof root) {\r\n    case 'array': \r\n      const es = []\r\n      for (let i = 0; i < root.length; i++) {\r\n        es[i] = strip(root[i])\r\n      }\r\n      return es\r\n    case 'object': \r\n      const rec = {}\r\n      for (let p in root) {\r\n        rec[p] = strip(root[p])\r\n      }\r\n      return rec\r\n    default: \r\n      return root\r\n  }\r\n}\r\n\r\nexport const fromJson = (json, validate) => {\r\n  return {\r\n    data: wrap(json, \"\", validate), \r\n    path: [], \r\n    validate\r\n  }\r\n}\r\n\r\nexport const toJson = (env) => {\r\n  return strip(env.data)\r\n}\r\n\r\nexport const serialize = (env) => {\r\n  return {data:env.data, path:env.path}\r\n}\r\n\r\nexport const unserialize = (serialized, validate) => {\r\n  return {\r\n    data: serialized.data, \r\n    path: serialized.path, \r\n    validate\r\n  }\r\n}\r\n\r\nexport const path = (env) => {\r\n  let rv = \"\"\r\n  for (let i = 0; i < env.path.length; i++) {\r\n    if (env.path[i] == '@value') {\r\n      rv += \"/\"\r\n    } else {\r\n      rv += env.path[i]\r\n    }\r\n  }\r\n  return rv\r\n}\r\n\r\nexport const basename = (env) => {\r\n  if (! R.length(env.path)) {\r\n    throw new Error('basename/1: on root location')\r\n  }\r\n  return R.last(env.path)\r\n}\r\n\r\n/**\r\n * \r\n * @param {index[]} base internal representation of path\r\n * @param {string} path absolute or relative JSON pointer\r\n */\r\nconst compose = (base, path) => {\r\n  if (path === '0') {\r\n    // common easy case first\r\n    return base\r\n  }\r\n  let frag0 = R.split('/', path)\r\n  let frag = []\r\n  if (path.length > 0 && path[0] != '/') {\r\n    // relative\r\n    const upcount = +frag0[0]\r\n    frag = base\r\n    for (let i = 0; i < upcount; i++) {\r\n      if (! R.length(frag)) {\r\n        throw new Error('compose/1: no parent location')\r\n      }\r\n      frag = init2(frag)\r\n    }\r\n  }\r\n\r\n  frag0 = R.tail(frag0)\r\n  for (let i = 0; i < frag0.length; i++) {\r\n    frag = append2('@value', typeFrag(frag0[i]), frag)\r\n  }\r\n  return frag\r\n}\r\n\r\nexport const makePath = (path, env) => {\r\n  const epath = compose(env.path, path)\r\n  //if (! hasPath(epath, env.data)) {\r\n  //  throw new Error('makePath/1: not found: ' + path)\r\n  //}\r\n  let rv = \"\"\r\n  for (let i = 0; i < epath.length; i++) {\r\n    if (epath[i] == '@value') {\r\n      rv += \"/\"\r\n    } else {\r\n      rv += epath[i]\r\n    }\r\n  }\r\n  return rv\r\n}\r\n\r\nexport const goTo = (path, env) => {\r\n  const epath = compose(env.path, path)\r\n  if (! hasPath(epath, env.data)) {\r\n    throw new Error('goTo/1: not found: ' + path)\r\n  }\r\n  return {...env, path:epath}\r\n}\r\n\r\nexport const getm = (path, meta, value, env) => {\r\n  const epath = compose(env.path, path)\r\n  const slot = R.path(epath, env.data)\r\n  if (! slot) {\r\n    throw new Error('getm/1: not found: ' + path)\r\n  }\r\n  return slot.hasOwnProperty(meta) ? slot[meta] : value\r\n}\r\n\r\nexport const gets = (path, env) => {\r\n  const epath = compose(env.path, path)\r\n  const slot = R.path(epath, env.data)\r\n  if (! slot) {\r\n    throw new Error('gets/1: not found: ' + path)\r\n  }\r\n  return slot\r\n}\r\n\r\nexport const setm = (path, meta, value, env) => {\r\n  const epath = compose(env.path, path)\r\n  const slot0 = R.path(epath, env.data)\r\n  if (! slot0) {\r\n    throw new Error('setm/1: not found: ' + path)\r\n  }\r\n  const slot = {...slot0, [meta]:value}\r\n  const data = R.assocPath(epath, slot, env.data)\r\n  return {...env, data}\r\n}\r\n\r\nexport const sets = (path, slot, env) => {\r\n  const epath = compose(env.path, path)\r\n  if (! hasPath(epath, env.data)) {\r\n    throw new Error('sets/1: not found: ' + path)\r\n  }\r\n  const data = R.assocPath(epath, slot, env.data)\r\n  return {...env, data}\r\n}\r\n\r\nexport const lookup = (path, env) => {\r\n  const epath = compose(env.path, path)\r\n  const slot = R.path(epath, env.data)\r\n  if (! slot) {\r\n    throw new Error('lookup/1: not found: ' + path)\r\n  }\r\n  return strip(slot)\r\n}\r\n\r\nexport const length = (path, env) => {\r\n  const epath = compose(env.path, path)\r\n  const slot = R.path(epath, env.data)\r\n  if (! slot) {\r\n    throw new Error('length/1: not found: ' + path)\r\n  }\r\n  if (! Array.isArray(slot['@value'])) {\r\n    throw new Error('length/2: not a list: ' + path)\r\n  }\r\n  return slot['@value'].length\r\n}\r\n\r\n// totally replace the value of the path.\r\n// metas are generated by validation\r\nexport const replace = (path, value, env) => {\r\n  // TODO implement\r\n  throw new Error('implement!')\r\n}\r\n\r\n// generates new metas\r\nexport const add = (path, value, env) => {\r\n  const epath = compose(env.path, path)\r\n  const location = init2(epath)\r\n  const name = R.last(epath)\r\n  const slot0 = R.path(location, env.data)\r\n  if (typeof slot0['@value'] != 'object') {\r\n    throw new Error('add/1 neither a record nor a list: ' + path)\r\n  }\r\n  if (Array.isArray(slot0['@value'])) {\r\n    // insert into list\r\n    const index = (name === '-') ? slot0['@value'].length : name\r\n    if (typeof index != 'number' || index % 1 !== 0) {\r\n      throw new Error('add/2 invalid index: ' + path)\r\n    }\r\n    if (index < 0 || index > slot0['@value'].length) {\r\n      throw new Error('add/3 out of range: ' + path)\r\n    }\r\n    const lis = R.insert(index, wrap(value, normPath(epath), env.validate), slot0['@value'])\r\n    const slot = env.validate(lis, normPath(location))\r\n    const data = R.assocPath(location, slot, env.data)\r\n    return {...env, data}\r\n  } else {\r\n    // define or set into record\r\n    if (typeof name != 'string') {\r\n      throw new Error('add/4 invalid name: ' + path)\r\n    }\r\n    const value1 = wrap(value, normPath(epath), env.validate)\r\n    const rec = {...slot0['@value'], [name]:value1}\r\n    const slot = env.validate(rec, normPath(location))\r\n    const data = R.assocPath(location, slot, env.data)\r\n    return {...env, data}\r\n  }\r\n}\r\n\r\nexport const remove = (path, env) => {\r\n  const epath = compose(env.path, path)\r\n  const location = init2(epath)\r\n  const name = R.last(epath)\r\n  const slot0 = R.path(location, env.data)\r\n  if (typeof slot0['@value'] != 'object' || slot0['@value'] === null) {\r\n    throw new Error('remove/1 neither a record nor a list: ' + path)\r\n  }\r\n  if (Array.isArray(slot0['@value'])) {\r\n    // remove from list\r\n    if (typeof name != 'number' || name % 1 !== 0) {\r\n      throw new Error('remove/2 invalid index: ' + path)\r\n    }\r\n    if (name < 0 || name >= slot0['@value'].length) {\r\n      throw new Error('remove/3 out of range: ' + path)\r\n    }\r\n    const lis = R.remove(name, 1, slot0['@value'])\r\n    const slot = env.validate(lis, normPath(location))\r\n    const data = R.assocPath(location, slot, env.data)\r\n    return {...env, data}\r\n  } else {\r\n    // undefine from record\r\n    if (! slot0['@value'].hasOwnProperty(name)) {\r\n      throw new Error('remove/4: property not found: ' + path)\r\n    }\r\n    const rec = R.dissoc(name, slot0['@value'])\r\n    const slot = env.validate(rec, normPath(location))\r\n    const data = R.assocPath(location, slot, env.data)\r\n    return {...env, data}\r\n  }\r\n}\r\n\r\nexport const move = (from, path, env) => {\r\n  // TODO implement\r\n  throw new Error('impelement!')\r\n}\r\n\r\nexport const copy = (from, path, env) => {\r\n  // TODO implement\r\n  throw new Error('impelement!')\r\n}","\r\nimport * as E from '../src/env'\r\n\r\nconst validate = (value, path) => {\r\n  console.log('validate called', value, path)\r\n  return {'@value':value}\r\n}\r\n\r\nconst assert = (ident, thunk, rv) => {\r\n  const lv = thunk()\r\n  if (lv == rv) {\r\n    console.log('ASSERT', ident, 'OK')\r\n  } else {\r\n    console.log('ASSERT', ident, 'NG', lv, rv)\r\n  }\r\n}\r\n\r\nconst assertError = (ident, thunk, match) => {\r\n  let status = null\r\n  try {\r\n    const lv = thunk()\r\n    status = \"no error\"\r\n  } catch (e) {\r\n    if (e instanceof Error && e.message.startsWith(match)) {\r\n      console.log('ASSERT', ident, 'OK')\r\n      return\r\n    } else {\r\n      status = \"matching failure: \" + e.message\r\n    }\r\n  }\r\n  console.log('ASSERT', ident, 'NG', status)\r\n}\r\n\r\nexport const testEnv = () => {\r\n  const json = {\r\n    name: 'Bob', \r\n    age: 24, \r\n    buddies: [\r\n      'Mam', 'Dad'\r\n    ]\r\n  }\r\n\r\n  let env = E.fromJson(json, validate)\r\n  assert(1, () => E.lookup('/name', env), 'Bob')\r\n\r\n  env = E.add('/email', 'info@example.com', env)\r\n  assert(2, () => E.lookup('/email', env), 'info@example.com')\r\n  assertError(2.1, () => E.lookup('/foo', env), 'lookup/')\r\n\r\n  assert(3, () => E.lookup('/buddies/1', env), 'Dad')\r\n\r\n  env = E.add('/buddies/1', 'Pochi', env)\r\n  assert(4, () => E.lookup('/buddies/1', env), 'Pochi')\r\n  assertError(4.1, () => E.lookup('/buddies/5', env), 'lookup/')\r\n\r\n  env = E.goTo('/buddies', env)\r\n  assert(5, () => E.lookup('0/1', env), 'Pochi')\r\n  assertError(5.1, () => E.lookup('0/5', env), 'lookup/')\r\n  env = E.goTo('', env)\r\n\r\n  env = E.add('/buddies/-', 'Komino', env)\r\n  assert(5, () => E.lookup('/buddies/3', env), 'Komino')\r\n\r\n  env = E.remove('/buddies/3', env)\r\n  assertError(6, () => E.lookup('/buddies/3', env), 'lookup/')\r\n\r\n  env = E.remove('/email', env)\r\n  assertError(7, () => E.lookup('/email', env), 'lookup/')\r\n  assertError(7.1, () => E.remove('/email', env), 'remove/')\r\n\r\n  env = E.setm('/name', 'invalid', true, env)\r\n  assert(8, () => E.getm('/name', 'invalid', false, env), true)\r\n}\r\n\r\ntestEnv()"]}