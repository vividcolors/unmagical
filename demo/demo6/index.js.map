{"version":3,"sources":["../../src/core/utils.js","../../src/core/env.js","../../src/core/schema.js","../../src/core/errors.js","../../src/core/framework.js","src.js"],"names":["isIntStr","x","n","normalizePath","path","frags","split","i","length","join","appendPath","base","charAt","base1","pathToArray","frag0","frag","upcount","splice","shift","concat","normalizePathArray","rv","push","typeOf","Array","isArray","emptyObject","emptyArray","isJsonValue","commonPath","path1","path2","frags1","frags2","normalizeQuery","obj","omitEmptyParam","p","hasPath","init2","list","makeSlot","value","invalid","message","input","touched","wrap","data","inner","es","rec","strip","tree","root","makeEnv","schemaDb","validate","trackUpdate","updatePoint","extra","isSame","env0","env1","internPath","externPath","intersect","path0","beginUpdateTracking","env","endUpdateTracking","console","log","JSON","stringify","test","extract","epath","slot","Error","getSlot","setSlot","slot0","add","location","name","type0","index","value1","lis","remove","hasOwnProperty","replace","move","from","copy","basePath","lookup","pathToLookup","npath","value0","mapDeep","f","reduceDeep","cur","duplicate","fromEnv","toEnv","setExtra","info","_unused","getExtra","setPortal","ret","onPromiseThen","_unused2","env2","doReturn","isEnv","nullable","type","lastChar","buildDb","schema","db","properties","items","testType","defaultRules","param","code","hint","notEmpty","_param","required","switchRequired","tag","tagProperty","decription","types","detail","same","target","if","rules","match","then","el","targetValue","targetResult","applyRules","multipleOf","maximum","exclusiveMaximum","minimum","exclusiveMinimum","maxLength","minLength","RegExp","maxItems","minItems","error","result","coerce","indexOf","isError","normalizeError","catalog","template","defaultErrorMessages","API","E","touchAll","_path","countValidationErrors","validationErrors","errors","_cur","foldValidity","sleep","ms","Promise","fulfill","reject","setTimeout","startReordering","itemPath","group","endReordering","getReordering","openDialog","closeDialog","getDialog","openFeedback","closeFeedback","getFeedback","setPage","current","getPage","nextPage","prevPage","setSwitch","shown","getSwitch","toggleSwitch","openProgress","unknown","closeProgress","getProgress","reorder","fromPath","enter","leave","makePortal","handler","result1","res1","y","updateEnabledApis","start","view","containerEl","evolve","updates","_pointer","_prevEnv","S","X","actions0","onTextboxInput","ev","state","actions","currentTarget","dataset","mgPath","mgValueAttribute","baseEnv","slotb","slotb0","onTextboxBlur","updatePointer","onSliderInput","onSliderChange","onListboxChange","onRadioChange","onCheckboxChange","mgCheckedAttribute","onSmartControlChange","pair","pairs","onUpdate","update","mgUpdate","context","parse","mgContext","func","res","apply","onPromiseSettle","mgName","mgResult","once","h","h0","master","frame","price","os","cpu","memory","accessory","bonus","accessories","reduce","a","flags","isPro","bigDeal","quotation","lines","category","description","unitPrice","quantity","amount","subtotal","tax","total","findByProp","prevEnv","addLine","line","forEach","numErrors"],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["//@ts-check\r\n\r\n/**\r\n * Returns true if x is an string representation of an integer value.\r\n * @param {any} x\r\n * @returns {boolean} \r\n */\r\nexport const isIntStr = (x) => {\r\n  const n = +x\r\n  return (n % 1 === 0 && x === \"\" + n)\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} path \r\n * @returns {string}\r\n */\r\nexport const normalizePath = (path) => {\r\n  const frags = path.split('/')\r\n  for (let i = 1; i < frags.length; i++) {\r\n    if (isIntStr(frags[i])) {\r\n      frags[i] = '*'\r\n    }\r\n  }\r\n  return frags.join('/')\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} base \r\n * @param {string} path \r\n * @returns {string}\r\n */\r\nexport const appendPath = (base, path) => {\r\n  if (path.charAt(0) == '' || path.charAt(0) == '/') return path  // absolute path\r\n  if (path === '0') return base  // easy frequent case\r\n  \r\n  const base1 = pathToArray(base)\r\n  let frag0 = path.split('/')\r\n  let frag = []\r\n  let unused = null\r\n\r\n  let upcount = +frag0[0]\r\n  frag = base1\r\n  if (upcount > frag.length) {\r\n    upcount = frag.length\r\n  }\r\n  frag.splice(frag.length - upcount, upcount)\r\n\r\n  frag0.shift()\r\n\r\n  if (frag0.length == 0 && frag.length == 0) return ''\r\n  return '/' + frag.concat(frag0).join('/')\r\n}\r\n\r\n/**\r\n * \r\n * @param {(string | number)[]} path\r\n * @returns {string} \r\n */\r\nexport const normalizePathArray = (path) => {\r\n  let rv = ''\r\n  for (let i = 0; i < path.length; i++) {\r\n    if (typeof path[i] == 'number' || isIntStr(path[i])) {\r\n      rv += '/*'\r\n    } else {\r\n      rv += '/' + path[i]\r\n    }\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} path \r\n * @returns {(string | number)[]}\r\n */\r\nexport const pathToArray = (path) => {\r\n  const frags = path.split('/')\r\n  const rv = []\r\n  for (let i = 1; i < frags.length; i++) {\r\n    rv.push(isIntStr(frags[i]) ? +frags[i] : frags[i])\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * A variant of `typeof`, which handles null and Array appropreately.\r\n * @param {null|array|object|boolean|number|string} x \r\n * @returns {string}\r\n */\r\nexport const typeOf = (x) => x === null ? 'null' : Array.isArray(x) ? 'array' : typeof x\r\n\r\n/**\r\n * @type {{}}\r\n */\r\nexport const emptyObject = {}\r\n\r\n/**\r\n * @template T\r\n * @type {T[]}\r\n */\r\nexport const emptyArray = []\r\n\r\n/**\r\n * Returns true if `x' is json value.\r\n * @param {any} x\r\n * @returns {boolean} \r\n */\r\nexport const isJsonValue = (x) => {\r\n  switch (typeOf(x)) {\r\n    case 'null': \r\n    case 'number': \r\n    case 'boolean': \r\n    case 'string': \r\n    case 'object': \r\n    case 'array': \r\n      return true\r\n    default: \r\n      return false\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} path1 \r\n * @param {string} path2 \r\n * @return {string}\r\n */\r\nexport const commonPath = (path1, path2) => {\r\n  const frags1 = path1.split('/')\r\n  const frags2 = path2.split('/')\r\n  const rv = []\r\n  for (let i = 0; i < frags1.length; i++) {\r\n    if (frags2.length <= i) break\r\n    if (frags1[i] != frags2[i]) break\r\n    rv.push(frags1[i])\r\n  }\r\n  return rv.join('/')\r\n}\r\n\r\n/**\r\n * \r\n * @param {Object} obj \r\n * @param {boolean} omitEmptyParam \r\n * @returns {Record<string, string>}\r\n */\r\nexport const normalizeQuery = (obj, omitEmptyParam) => {\r\n  const rv = /** @type {Record<string, string>} */ ({})\r\n  for (let p in obj) {\r\n    switch (typeOf(p)) {\r\n      case 'null': \r\n        if (!omitEmptyParam) rv[p] = ''\r\n        break\r\n      case 'boolean': \r\n        rv[p] = obj[p] ? 'true' : 'false'\r\n        break\r\n      case 'number': \r\n        rv[p] = \"\" + obj[p]\r\n        break\r\n      case 'string': \r\n        if (omitEmptyParam && obj[p] === \"\") break\r\n        rv[p] = obj[p]\r\n        break\r\n    }\r\n  }\r\n  return rv\r\n}","//@ts-check\r\n\r\nimport {normalizePath, typeOf, isIntStr, normalizePathArray, appendPath} from './utils'\r\nimport {hasPath as rhasPath, init, path as rpath, assocPath, insert, last, dissoc, remove as rremove, update } from 'ramda'\r\n\r\n/**\r\n * \r\n * @typedef {import(\"./schema\").Json} Json\r\n * @typedef {import(\"./schema\").Schema} Schema\r\n * @typedef {import(\"./schema\").Slot} Slot\r\n * @typedef {import(\"./schema\").SchemaDb} SchemaDb\r\n * @typedef {import(\"./schema\").LookupFunc} LookupFunc\r\n * @typedef {{\r\n *   tree: Json, \r\n *   trackUpdate: boolean\r\n *   updatePoint: ((string|number)[])|null\r\n *   schemaDb: SchemaDb, \r\n *   validate: (value:any, slot:Slot, schema:Schema, lookup:LookupFunc) => Slot\r\n *   extra: {[name:string]:any}\r\n *   ret?: (env:Env) => void\r\n *   onPromiseThen?: any\r\n * }} Env\r\n */\r\n\r\n\r\n/**\r\n * see: https://github.com/ramda/ramda/pull/2841\r\n * Anyway, here we fix the original behavior.\r\n * @param {string[]} path \r\n * @param {any} x \r\n * @return {boolean}\r\n */\r\nconst hasPath = (path, x) => {\r\n  if (! path.length) return true\r\n  return rhasPath(path, x)\r\n}\r\n\r\nconst init2 = (list) => {\r\n  return init(init(list))\r\n}\r\n\r\n/**\r\n * \r\n * @param {Json} value \r\n * @return {Slot} \r\n */\r\nconst makeSlot = (value) => {\r\n  const rv = {'@value':value, invalid:false, message:''}\r\n  switch (typeOf(value)) {\r\n    case 'object': // FALLTHRU\r\n    case 'array': \r\n      break\r\n    case 'number': // FALLTHRU\r\n    case 'integer': \r\n      rv.input = '' + value\r\n      rv.touched = false\r\n      break\r\n    case 'boolean': \r\n      rv.input = (value) ? 'true' : 'false'\r\n      rv.touched = false\r\n      break\r\n    case 'null': \r\n      rv.input = ''\r\n      rv.touched = false\r\n      break\r\n    case 'string': \r\n      rv.input = value\r\n      rv.touched = false\r\n      break\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * @param {Json} data \r\n * @returns {Slot}\r\n */\r\nconst wrap = (data) => {\r\n  /** @type {(data:Json) => Slot} */\r\n  const inner = (data) => {\r\n    switch (typeOf(data)) {\r\n      case 'array': \r\n        const es = []\r\n        for (let i = 0; i < /** @type {Json[]} */ (data).length; i++) {\r\n          es[i] = inner(data[i])\r\n        }\r\n        return makeSlot(es)\r\n      case 'object': \r\n        const rec = {}\r\n        for (let p in /** @type {{[name:string]:Json}} */ (data)) {\r\n          rec[p] = inner(data[p])\r\n        }\r\n        return makeSlot(rec)\r\n      default: \r\n        return makeSlot(data)\r\n    }\r\n  }\r\n  return inner(data)\r\n}\r\n\r\n/**\r\n * \r\n * @param {Json} tree \r\n * @returns {Json}\r\n */\r\nconst strip = (tree) => {\r\n  const root = tree['@value']\r\n  switch (typeOf(root)) {\r\n    case 'array': \r\n      const es = []\r\n      for (let i = 0; i < root.length; i++) {\r\n        es[i] = strip(root[i])\r\n      }\r\n      return es\r\n    case 'object': \r\n      const rec = {}\r\n      for (let p in root) {\r\n        rec[p] = strip(root[p])\r\n      }\r\n      return rec\r\n    default: \r\n      return root\r\n  }\r\n}\r\n\r\n/**\r\n * Makes env.\r\n * @param {Json} data \r\n * @param {SchemaDb} schemaDb \r\n * @param {(value:any, slot:Slot, schema:Schema, lookup:LookupFunc) => Slot} validate\r\n * @param {boolean} trackUpdate\r\n * @returns {Env}\r\n */\r\nexport const makeEnv = (data, schemaDb, validate, trackUpdate) => {\r\n  const tree = wrap(data)\r\n  return {\r\n    tree, \r\n    trackUpdate, \r\n    updatePoint: trackUpdate ? [] : null, \r\n    schemaDb, \r\n    validate, \r\n    extra: {}\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @param {Env} env0 \r\n * @param {Env} env1 \r\n * @returns {boolean}\r\n */\r\nexport const isSame = (env0, env1) => {\r\n  return (env0.tree === env1.tree && env0.extra === env1.extra)\r\n}\r\n\r\n/**\r\n * Internalizes a path\r\n * @param {string} path \r\n * @returns {(string|number)[]}\r\n */\r\nconst internPath = (path) => {\r\n  const frags = path.split('/')\r\n  const rv = []\r\n  for (let i = 1; i < frags.length; i++) {\r\n    rv.push('@value')\r\n    rv.push(isIntStr(frags[i]) ? +frags[i] : frags[i])\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * @param {(string|number)[]} path \r\n * @returns {string}\r\n */\r\nconst externPath = (path) => {\r\n  let rv = \"\"\r\n  for (let i = 0; i < path.length; i += 2) {\r\n    rv += \"/\" + path[i + 1]\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * @param {((string|number)[])|null} path0 \r\n * @param {((string|number)[])|null} path1\r\n * @returns {((string|number)[])|null} \r\n */\r\nconst intersect = (path0, path1) => {\r\n  if (path0 === null) return path1\r\n  if (path1 === null) return path0\r\n\r\n  const rv = []\r\n  for (let i = 0; i < path0.length; i += 2) {\r\n    if (i >= path1.length) break\r\n    if (path0[i + 1] !== path1[i + 1]) break\r\n    rv.push(path0[i])\r\n    rv.push(path0[i + 1])\r\n  }\r\n  return rv\r\n}\r\n\r\n/**\r\n * \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const beginUpdateTracking = (env) => {\r\n  // Essentially, `updatePoint' should be set to null, but it can be omitted \r\n  // because the value when disabled is null.\r\n  return {...env, trackUpdate:true}\r\n}\r\n\r\n/**\r\n * \r\n * @param {Env} env \r\n * @returns {[string|null, Env]}\r\n */\r\nexport const endUpdateTracking = (env) => {\r\n  const updatePoint = env.updatePoint ? externPath(env.updatePoint) : null\r\n  console.log('update occurred at ' + JSON.stringify(updatePoint))\r\n  return [\r\n    updatePoint, \r\n    {...env, trackUpdate:false, updatePoint:null}\r\n  ]\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} path \r\n * @param {Env} env \r\n * @returns {boolean}\r\n */\r\nexport const test = (path, env) => {\r\n  return hasPath(/** @type {string[]} */ (internPath(path)), env.tree)\r\n}\r\n\r\n/**\r\n * Extracts a subtree of Env.\r\n * @param {string} path\r\n * @param {Env} env\r\n * @returns {Json}\r\n */\r\nexport const extract = (path, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const slot = rpath(epath, env.tree)\r\n  if (! slot) {\r\n    throw new Error('extract/1: not found: ' + path)\r\n  }\r\n  return strip(slot)\r\n}\r\n\r\n/**\r\n * Low-level api.\r\n * @param {string} path \r\n * @param {Env} env\r\n * @returns {Slot} \r\n */\r\nexport const getSlot = (path, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const slot = rpath(epath, env.tree)\r\n  if (! slot) {\r\n    throw new Error('getSlot/1: not found: ' + path)\r\n  }\r\n  return slot\r\n}\r\n\r\n/**\r\n * Low-level api. This function executes neither validation nor coercion.\r\n * @param {string} path \r\n * @param {Slot} slot \r\n * @param {Env} env\r\n * @returns {Env} \r\n * \r\n * slot value must be a scalar.\r\n */\r\nexport const setSlot = (path, slot, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const slot0 = rpath(epath, env.tree)\r\n  if (! slot0) {\r\n    throw new Error('setSlot/1: not found: ' + path)\r\n  }\r\n  switch (typeOf(slot0['@value'])) {\r\n    case 'null': \r\n    case 'boolean': \r\n    case 'number': \r\n    case 'string': \r\n    case 'undefined': \r\n      break\r\n    default: \r\n      throw new Error('setSlot/2: not a scalar: ' + path)\r\n  }\r\n  const tree = assocPath(epath, slot, env.tree)\r\n  const updatePoint = env.trackUpdate ? intersect(env.updatePoint, epath) : env.updatePoint\r\n  return {...env, tree, updatePoint}\r\n}\r\n\r\n/**\r\n * Adds value to env. `add' function of JSON patch.\r\n * @param {string} path \r\n * @param {Json} value \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const add = (path, value, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const location = init2(epath)\r\n  const name = last(epath)\r\n  const slot0 = rpath(location, env.tree)\r\n  const type0 = typeOf(slot0['@value'])\r\n  if (type0 != 'object' && type0 != 'array') {\r\n    throw new Error('add/1 neither an object nor an array: ' + path)\r\n  }\r\n  if (type0 == 'array') {\r\n    // insert into array\r\n    const index = (name === '-') ? slot0['@value'].length : name\r\n    if (typeof index != 'number' || index % 1 !== 0) {\r\n      throw new Error('add/2 invalid index: ' + path)\r\n    }\r\n    if (index < 0 || index > slot0['@value'].length) {\r\n      throw new Error('add/3 index out of range: ' + path)\r\n    }\r\n    const value1 = wrap(value)\r\n    const lis = insert(index, value1, slot0['@value'])\r\n    const slot = makeSlot(lis)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    // Insertion to a list is an update not to an item but to the list.\r\n    const updatePoint = env.trackUpdate ? intersect(env.updatePoint, location) : env.updatePoint\r\n    return {...env, tree, updatePoint}\r\n  } else {\r\n    // define or replace into object\r\n    if (typeof name != 'string') {\r\n      throw new Error('add/4 invalid name: ' + path)\r\n    }\r\n    const value1 = wrap(value)\r\n    const rec = {...slot0['@value'], [name]:value1}\r\n    const slot = makeSlot(rec)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    // Adding a property is an update to an object, while replacing a property is an update to an property value.\r\n    const updatePoint = !env.trackUpdate ? env.updatePoint \r\n      : intersect(env.updatePoint, (name in slot0['@value']) ? epath : location)\r\n    return {...env, tree, updatePoint}\r\n  }\r\n}\r\n\r\n/**\r\n * Removes a value specified by path from env. `remove' function of JSON patch.\r\n * @param {string} path \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const remove = (path, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  const location = init2(epath)\r\n  const name = last(epath)\r\n  const slot0 = rpath(location, env.tree)\r\n  const type0 = typeOf(slot0['@value'])\r\n  if (type0 != 'object' && type0 != 'array') {\r\n    throw new Error('remove/1 neither an object nor an array: ' + path)\r\n  }\r\n  if (type0 == 'array') {\r\n    // removes from array\r\n    if (typeof name != 'number' || name % 1 !== 0) {\r\n      throw new Error('remove/2 invalid index: ' + path)\r\n    }\r\n    if (name < 0 || name >= slot0['@value'].length) {\r\n      throw new Error('remove/3 out of range: ' + path)\r\n    }\r\n    const lis = rremove(name, 1, slot0['@value'])\r\n    const slot = makeSlot(lis)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    const updatePoint = env.trackUpdate ? intersect(env.updatePoint, location) : env.updatePoint\r\n    return {...env, tree, updatePoint}\r\n  } else {\r\n    // delete property from object\r\n    if (! slot0['@value'].hasOwnProperty(name)) {\r\n      throw new Error('remove/4: property not found: ' + path)\r\n    }\r\n    const rec = dissoc(name, slot0['@value'])\r\n    const slot = makeSlot(rec)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    const updatePoint = env.trackUpdate ? intersect(env.updatePoint, location) : env.updatePoint\r\n    return {...env, tree, updatePoint}\r\n  }\r\n}\r\n\r\n/**\r\n * Replaces a value specified by path into value.  Implements replace function of JSON patch.\r\n * @param {string} path \r\n * @param {Json} value \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const replace = (path, value, env) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  if (epath.length == 0) {\r\n    // replace whole data\r\n    const tree = wrap(value)\r\n    const updatePoint = env.trackUpdate ? [] : env.updatePoint\r\n    return {...env, tree, updatePoint}\r\n  }\r\n  const location = init2(epath)\r\n  const name = last(epath)\r\n  const slot0 = rpath(location, env.tree)\r\n  const type0 = typeOf(slot0['@value'])\r\n  if (type0 != 'object' && type0 != 'array') {\r\n    throw new Error('replace/1 neither an object nor an array: ' + path)\r\n  }\r\n  if (type0 == 'array') {\r\n    // replace an element in array\r\n    if (typeof name != 'number' || name % 1 !== 0) {\r\n      throw new Error('replace/2 invalid index: ' + path)\r\n    }\r\n    if (name < 0 || name >= slot0['@value'].length) {\r\n      throw new Error('replace/3 out of range: ' + path)\r\n    }\r\n    const value1 = wrap(value)\r\n    const lis = update(name, value1, slot0['@value'])\r\n    const slot = makeSlot(lis)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    const updatePoint = env.trackUpdate ? intersect(env.updatePoint, epath) : env.updatePoint\r\n    return {...env, tree, updatePoint}\r\n  } else {\r\n    // replace a property of object\r\n    if (typeof name != 'string') {\r\n      throw new Error('replace/4 invalid name: ' + path)\r\n    }\r\n    if (!(name in slot0['@value'])) {\r\n      throw new Error('replace/5 undefined property: ' + path)\r\n    }\r\n    const value1 = wrap(value)\r\n    const rec = {...slot0['@value'], [name]:value1}\r\n    const slot = makeSlot(rec)\r\n    const tree = assocPath(location, slot, env.tree)\r\n    const updatePoint = env.trackUpdate ? intersect(env.updatePoint, epath) : env.updatePoint\r\n    return {...env, tree, updatePoint}\r\n  }\r\n}\r\n\r\n/**\r\n * Moves a value located in from, to a location specified by path.  Implements move function of JSON patch.\r\n * @param {string} from \r\n * @param {string} path \r\n * @param {Env} env\r\n * @returns {Env} \r\n */\r\nexport const move = (from, path, env) => {\r\n  const value = extract(from, env)\r\n  env = remove(from, env)\r\n  env = add(path, value, env)\r\n  return env\r\n}\r\n\r\n/**\r\n * Copies a value located in from, to a location specified by path.  Impelementing copy function of JSON patch.\r\n * @param {string} from \r\n * @param {string} path \r\n * @param {Env} env\r\n * @returns {Env} \r\n */\r\nexport const copy = (from, path, env) => {\r\n  const value = extract(from, env)\r\n  env = add(path, value, env)\r\n  return env\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} path \r\n * @param {Env} env\r\n * @returns {Env} \r\n */\r\nexport const validate = (path, env) => {\r\n  let basePath = null\r\n\r\n  /**\r\n   * \r\n   * @param {string} path \r\n   * @returns {Json}\r\n   */\r\n  const lookup = (path) => {\r\n    const pathToLookup = appendPath(basePath, path)\r\n    return extract(pathToLookup, env)\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {Slot} slot0 \r\n   * @param {string} npath\r\n   * @param {string} path\r\n   * @returns {Slot} \r\n   */\r\n  const inner = (slot0, npath, path) => {\r\n    const value0 = slot0['@value']\r\n    switch (typeOf(value0)) {\r\n      case 'array': \r\n        const lis = []\r\n        for (let i = 0; i < (/** @type {Json[]} */(value0)).length; i++) {\r\n          lis[i] = inner(value0[i], npath + '/*', path + '/' + i)\r\n        }\r\n        basePath = path\r\n        return env.validate(lis, slot0, env.schemaDb[npath], lookup)\r\n      case 'object': \r\n        const rec = {}\r\n        for (let p in  /** @type {{[name:string]:Json}} */(value0)) {\r\n          rec[p] = inner(value0[p], npath + '/' + p, path + '/' + p)\r\n        }\r\n        basePath = path\r\n        return env.validate(rec, slot0, env.schemaDb[npath], lookup)\r\n      default: \r\n        basePath = path\r\n        const slot = env.validate(value0, slot0, env.schemaDb[npath], lookup)\r\n        if (slot['@value'] !== value0) {\r\n          throw new Error('validate/0: value changed: ' + path)\r\n        }\r\n        return slot\r\n    }\r\n  }\r\n\r\n  const epath = internPath(path)\r\n  const slot0 = rpath(epath, env.tree)\r\n  if (! slot0) {\r\n    throw new Error('validate/1: not found: ' + path)\r\n  }\r\n  const slot = inner(slot0, normalizePath(path), path)\r\n  const tree = assocPath(epath, slot, env.tree)\r\n  return {...env, tree}\r\n}\r\n\r\n/**\r\n * By f, maps every slot descending to a location specified by path.\r\n * @param {(slot:Slot, path:string) => Slot} f \r\n * @param {string} path \r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const mapDeep = (f, path, env) => {\r\n  const inner = (slot0, path) => {\r\n    const value0 = slot0['@value']\r\n    switch (typeOf(value0)) {\r\n      case 'array': \r\n        const lis = []\r\n        for (let i = 0; i < value0.length; i++) {\r\n          lis[i] = inner(value0[i], path + '/' + i)\r\n        }\r\n        return {...f(slot0, path), '@value':lis}\r\n      case 'object': \r\n        const rec = {}\r\n        for (let p in value0) {\r\n          rec[p] = inner(value0[p], path + '/' + p)\r\n        }\r\n        return {...f(slot0, path), '@value':rec}\r\n      default: \r\n        return {...f(slot0, path), '@value':value0}\r\n    }\r\n  }\r\n  const epath = internPath(path)\r\n  const slot0 = rpath(epath, env.tree)\r\n  if (! slot0) {\r\n    throw new Error('mapDeep/1: not found: ' + path)\r\n  }\r\n  const slot = inner(slot0, path)\r\n  const tree = assocPath(epath, slot, env.tree)\r\n  return {...env, tree}\r\n}\r\n\r\n/**\r\n * By f, deeply reduces a subtree of path.\r\n * @template T\r\n * @param {(cur:T, slot:Slot, path:String) => T} f \r\n * @param {T} cur \r\n * @param {string} path \r\n * @param {Env} env \r\n */\r\nexport const reduceDeep = (f, cur, path, env) => {\r\n  const inner = (cur, slot, path) => {\r\n    const value0 = slot['@value']\r\n    switch (typeOf(value0)) {\r\n      case 'array': \r\n        for (let i = 0; i < value0.length; i++) {\r\n          cur = inner(cur, value0[i], path + '/' + i)\r\n        }\r\n        return f(cur, slot, path)\r\n      case 'object': \r\n        for (let p in value0) {\r\n          cur = inner(cur, value0[p], path + '/' + p)\r\n        }\r\n        return f(cur, slot, path)\r\n      default: \r\n        return f(cur, slot, path)\r\n    }\r\n  }\r\n  const epath = internPath(path)\r\n  const slot = rpath(epath, env.tree)\r\n  if (! slot) {\r\n    throw new Error('reduceDeep/1: not found: ' + path)\r\n  }\r\n  return inner(cur, slot, path)\r\n}\r\n\r\nexport const duplicate = (path, fromEnv, toEnv) => {\r\n  const epath = /** @type {string[]} */ (internPath(path))\r\n  if (epath.length == 0) {\r\n    // duplicate whole data\r\n    const tree = fromEnv.tree\r\n    const updatePoint = toEnv.trackUpdate ? [] : toEnv.updatePoint\r\n    return {...toEnv, tree, updatePoint}\r\n  }\r\n  const location = init2(epath)\r\n  const name = last(epath)\r\n  const slot0 = rpath(location, fromEnv.tree)\r\n  const type0 = typeOf(slot0['@value'])\r\n  if (type0 != 'object' && type0 != 'array') {\r\n    throw new Error('duplicate/1 neither an object nor an array: ' + path)\r\n  }\r\n  if (type0 == 'array') {\r\n    // duplicate an element in an array\r\n    if (typeof name != 'number' || name % 1 !== 0) {\r\n      throw new Error('duplicate/2 invalid index: ' + path)\r\n    }\r\n    if (name < 0 || name >= slot0['@value'].length) {\r\n      throw new Error('duplicate/3 out of range: ' + path)\r\n    }\r\n    const value1 = slot0['@value'][name]\r\n    const lis = update(name, value1, slot0['@value'])\r\n    const slot = makeSlot(lis)\r\n    const tree = assocPath(location, slot, toEnv.tree)\r\n    const updatePoint = toEnv.trackUpdate ? intersect(toEnv.updatePoint, epath) : toEnv.updatePoint\r\n    return {...toEnv, tree, updatePoint}\r\n  } else {\r\n    // duplicate a property of an object\r\n    if (typeof name != 'string') {\r\n      throw new Error('replace/4 invalid name: ' + path)\r\n    }\r\n    if (!(name in slot0['@value'])) {\r\n      throw new Error('replace/5 undefined property: ' + path)\r\n    }\r\n    const value1 = slot0['@value'][name]\r\n    const rec = {...slot0['@value'], [name]:value1}\r\n    const slot = makeSlot(rec)\r\n    const tree = assocPath(location, slot, toEnv.tree)\r\n    const updatePoint = toEnv.trackUpdate ? intersect(toEnv.updatePoint, epath) : toEnv.updatePoint\r\n    return {...toEnv, tree, updatePoint}\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} name \r\n * @param {Object|null} info \r\n * @param {Env} env\r\n * @returns {Env} \r\n */\r\nexport const setExtra = (name, info, env) => {\r\n  if (info === null) {\r\n    const {[name]:_unused, ...extra} = env.extra\r\n    return {...env, extra}\r\n  } else {\r\n    const extra = {...env.extra, [name]:info}\r\n    return {...env, extra}\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} name \r\n * @param {Env} env\r\n * @returns {Object|null} \r\n */\r\nexport const getExtra = (name, env) => {\r\n  return env.extra[name] || null\r\n}\r\n\r\n/**\r\n * \r\n * @param {((env:Env) => void)|null} ret \r\n * @param {any} onPromiseThen\r\n * @param {Env} env \r\n * @returns {Env}\r\n */\r\nexport const setPortal = (ret, onPromiseThen, env) => {\r\n  if (ret) return {...env, ret, onPromiseThen}\r\n  const {ret:_unused, onPromiseThen:_unused2, ...env2} = env\r\n  return env2\r\n}\r\n\r\n/**\r\n * \r\n * @param {Env} env\r\n * @returns {void} \r\n */\r\nexport const doReturn = (env) => {\r\n  if (env.ret) {\r\n    env.ret(env)\r\n  } else {\r\n    throw new Error('doReturn/0: no ret')\r\n  }\r\n}\r\n\r\nexport const isEnv = (x) => {\r\n  return (x != null \r\n    && typeof x == \"object\" \r\n    && \"tree\" in x)\r\n}","//@ts-check\r\n\r\nimport {emptyObject, typeOf, isJsonValue, appendPath} from './utils'\r\n\r\n/**\r\n * @typedef {null|number|string|boolean|any[]|{[name:string]:any}} Json \r\n * @typedef {import(\"./errors\").MgError} MgError\r\n * @typedef {{\r\n *   invalid?:boolean, \r\n *   error?:MgError, \r\n *   touched?:boolean, \r\n *   input?:string, \r\n *   ['@value']?:Json\r\n * }} Slot\r\n * @typedef {import(\"./env\").Env} Env\r\n * @typedef {{\r\n *   [rule:string]:Json\r\n * }} Schema\r\n * @typedef {(path:string) => Json} LookupFunc\r\n * @typedef {(param:Json, value:Json, lookup:LookupFunc, rules:Rules) => true|MgError} RuleFunc\r\n * @typedef {{[name:string]:RuleFunc}} Rules\r\n * @typedef {{[path:string]:Schema}} SchemaDb\r\n * \r\n */\r\n\r\n/**\r\n * Returns true if type specification allows null.\r\n * @param {string|null|undefined} type a type in schema\r\n */\r\nconst nullable = (type) => {\r\n  if (! type) return true\r\n  const lastChar = type.charAt(type.length - 1)\r\n  return type == 'null' || lastChar == '?'\r\n}\r\n\r\n/**\r\n * \r\n * @param {Json} schema \r\n * @returns {SchemaDb}\r\n */\r\nexport const buildDb = (schema) => {\r\n  const db = /** @type SchemaDb */ ({})\r\n  const inner = (schema, path) => {\r\n    db[path] = schema\r\n    switch (schema.type) {\r\n      case 'object': \r\n      case 'object?': \r\n        for (let p in schema.properties) {\r\n          inner(schema.properties[p], path + '/' + p)\r\n        }\r\n        break\r\n      case 'array': \r\n      case 'array?': \r\n        inner(schema.items, path + '/*')\r\n        break\r\n      default: \r\n        break\r\n    }\r\n  }\r\n  inner(schema, \"\")\r\n  return db\r\n}\r\n\r\n/**\r\n * Returns true if the value is in an specified type\r\n * @param {Json} value\r\n * @param {string} type \r\n * @returns {boolean}\r\n */\r\nconst testType = (value, type) => {\r\n  if (! type) return true\r\n  if (value === null) {\r\n    return nullable(type)\r\n  } else {\r\n    switch (type) {\r\n      case 'null': \r\n        return false\r\n      case 'number':  // FALLTHRU\r\n      case 'number?': \r\n        return typeof value == 'number'\r\n      case 'integer':  // FALLTHRU\r\n      case 'integer?': \r\n        return (typeof value == 'number' && value % 1 === 0)\r\n      case 'boolean':  // FALLTHRU\r\n      case 'boolean?': \r\n        return typeof value == 'boolean'\r\n      case 'string': \r\n        return typeof value == 'string'\r\n      case 'object':  // FALLTHRU\r\n      case 'object?': \r\n        return (typeof value == 'object' && value !== null)\r\n      case 'array':  // FALLTHRU\r\n      case 'array?': \r\n        return Array.isArray(value)\r\n      default: \r\n        throw new Error('unknown type: ' + type)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * validation rules.\r\n * @type {Rules}\r\n */\r\nexport const defaultRules = {\r\n  type: (param, value) => {\r\n    if (typeof param != 'string') throw new Error('invalid type')\r\n    const result = testType(value, param)\r\n    if (! result) return {code:'type.'+param}\r\n    return true\r\n  }, \r\n  'enum': (param, value) => {\r\n    if (! Array.isArray(param)) throw new Error('invalid parameter')\r\n    for (let i = 0; i < param.length; i++) {\r\n      if (param[i] === value) return true\r\n    }\r\n    return {code:'rule.enum'}\r\n  }, \r\n  'const': (param, value) => {\r\n    if (param === value) return true\r\n    switch (typeOf(param)) {\r\n      case 'string': \r\n      case 'number': \r\n      case 'null': \r\n      case 'boolean': \r\n        return {code:'rule.const', hint: /** @type {string|number|null|boolean} */(param)}\r\n      default: \r\n        return {code:'rule.const.nohint'}\r\n    }\r\n  }, \r\n  notEmpty: (_param, value) => {\r\n    if (typeOf(value) != 'string') return true\r\n    if (value !== '') return true\r\n    return {code:'rule.notEmpty'}\r\n  }, \r\n  required: (param, value) => {\r\n    if (! Array.isArray(param)) throw new Error('invalid parameter')\r\n    if (typeOf(value) != 'object') return true\r\n    for (let i = 0; i < param.length; i++) {\r\n      if (! value.hasOwnProperty(param[i])) return {code:'rule.required', hint:param[i]}\r\n    }\r\n    return true\r\n  }, \r\n  switchRequired: (param, value, lookup) => {\r\n    if (typeOf(param) != 'object' || !('tagProperty' in /** @type {object} */ (param))) throw new Error('invalid parameter')\r\n    if (typeOf(value) != 'object') return true\r\n    const tag = /** @type {string} */ (lookup('0/' + param.tagProperty))\r\n    if (! tag) return {code:'rule.switchRequired.nohint', decription:'no tag'}\r\n    if (! param.types[tag]) return {code:'rule.switchRequired.nohint', detail:'no type'}\r\n    const required = param.types[tag]\r\n    if (! Array.isArray(required)) throw new Error('invalid parameter')\r\n    for (let i = 0; i < required.length; i++) {\r\n      if (! value.hasOwnProperty(required[i])) return {code:'rule.switchRequired', hint:required[i]}\r\n    }\r\n    return true\r\n  }, \r\n  same: (param, value, lookup) => {\r\n    if (typeof param != 'string') throw new Error('invalid parameter')\r\n    const target = lookup(param)\r\n    if (target !== value) {\r\n      switch (typeOf(target)) {\r\n        case 'string': \r\n        case 'number': \r\n        case 'null': \r\n        case 'boolean': \r\n          return {code:'rule.same', hint: /** @type {string|number|null|boolean} */(target)}\r\n        default: \r\n          return {code:'rule.same.nohint'}\r\n      }\r\n    }\r\n    return true\r\n  }, \r\n  if: (param, value, lookup, rules) => {\r\n    if (typeOf(param) != 'array') throw new Error('invalid parameter')\r\n    const [target, match, then, el = {}] = /** @type {Array} */ (param)\r\n    if (! target || ! match || ! then) throw new Error('invalid parameter')\r\n    const targetValue = lookup(target)\r\n    const targetResult = applyRules(targetValue, match, lookup, rules)\r\n    if (targetResult === true) {\r\n      return applyRules(value, then, lookup, rules)\r\n    } else {\r\n      return applyRules(value, el, lookup, rules)\r\n    }\r\n  }, \r\n  // TODO: allOf, eitherOf, not\r\n  multipleOf: (param, value) => {\r\n    if (typeof param != 'number') throw new Error('invalid parameter')\r\n    if (typeof value != 'number') return true\r\n    if (value % param === 0) return true\r\n    return {code:'rule.multipleOf', hint:param}\r\n  }, \r\n  maximum: (param, value) => {\r\n    if (typeof value != 'number') return true\r\n    if (param >= value) return true\r\n    return {code:'rule.maximum', hint: /** @type {number} */ (param)}\r\n  }, \r\n  exclusiveMaximum: (param, value) => {\r\n    if (typeof value != 'number') return true\r\n    if (param > value) return true\r\n    return {code:'rule.exclusiveMaximum', hint: /** @type {number} */ (param)}\r\n  }, \r\n  minimum: (param, value) => {\r\n    if (typeof value != 'number') return true\r\n    if (param <= value) return true\r\n    return {code:'rule.minimum', hint: /** @type {number} */ (param)}\r\n  }, \r\n  exclusiveMinimum: (param, value) => {\r\n    if (typeof value != 'number') return true\r\n    if (param < value) return true\r\n    return {code:'rule.exclusiveMinimum', hint: /** @type {number} */ (param)}\r\n  }, \r\n  maxLength: (param, value) => {\r\n    if (typeof value != 'string') return true\r\n    if (value.length <= param) return true\r\n    return {code:'rule.maxLength', hint: /** @type {number} */ (param)}\r\n  }, \r\n  minLength: (param, value) => {\r\n    if (typeof value != 'string') return true\r\n    if (value.length >= param) return true\r\n    return {code:'rule.minLength', hint: /** @type {number} */ (param)}\r\n  }, \r\n  'pattern': (param, value) => {\r\n    if (typeof param != 'string') throw new Error('invalid parameter')\r\n    if (typeof value != 'string') return true\r\n    if (new RegExp(param).test(value)) return true\r\n    return {code:'rule.pattern', hint: /** @type {string} */ (param)}\r\n  }, \r\n  maxItems: (param, value) => {\r\n    if (typeof param != 'number') throw new Error('invalid parameter')\r\n    if (! Array.isArray(value)) return true\r\n    if (value.length <= param) return true\r\n    return {code:'rule.maxItems', hint: /** @type {number} */ (param)}\r\n  }, \r\n  minItems: (param, value) => {\r\n    if (typeof param != 'number') throw new Error('invalid parameter')\r\n    if (! Array.isArray(value)) return true\r\n    if (value.length >= param) return true\r\n    return {code:'rule.minItems', hint: /** @type {number} */ (param)}\r\n  }\r\n}\r\n\r\n/**\r\n * Validates a value with a schema.\r\n * @description shallow validation\r\n * @param {Rules} rules\r\n * @returns {(value:any, slot:Slot, schema:Schema, lookup:LookupFunc) => Slot} \r\n */\r\nexport const validate = (rules) => (value, slot, schema, lookup) => {\r\n  if (! isJsonValue(value)) {\r\n    if (schema && schema.type) {\r\n      const error = {code:'type.'+schema.type, detail:'given value: '+value}\r\n      return {...slot, '@value':value, invalid:true, error}\r\n    } else {\r\n      const error = {code:'value', detail:'given value: '+value}\r\n      return {...slot, '@value':value, invalid:true, error}\r\n    }\r\n  }\r\n\r\n  if (schema) {\r\n    const result = applyRules(value, schema, lookup, rules)\r\n    if (result !== true) {\r\n      return {...slot, '@value':value, invalid:true, error:result}\r\n    }\r\n  }\r\n  return {...slot, '@value':value, invalid:false, error:null}\r\n}\r\n\r\n/**\r\n * \r\n * @param {Json} value \r\n * @param {Schema} schema \r\n * @param {LookupFunc} lookup \r\n * @param {Rules} rules \r\n */\r\nexport const applyRules = (value, schema, lookup, rules) => {\r\n  for (let p in schema) {\r\n    const f = rules[p]\r\n    if (! f) continue\r\n    const result = f(schema[p], value, lookup, rules)\r\n    if (result !== true) return result\r\n  }\r\n  return true\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} input\r\n * @param {Slot} slot\r\n * @param {Schema} schema\r\n * @returns {Slot}\r\n */\r\nexport const coerce = (input, slot, schema) => {\r\n  input = \"\" + input  // coerce to string\r\n  if (! schema) {\r\n    throw new Error('coerce/0: no schema')\r\n  }\r\n  if (! schema.type || typeof schema.type != 'string') {\r\n    throw new Error('coerce/1: type not specified')\r\n  }\r\n  const type = schema.type\r\n  if (['null', 'boolean', 'boolean?', 'integer', 'integer?', 'number', 'number?', 'string'].indexOf(type) == -1) {\r\n    throw new Error('coerce/2: not a coercion enabled type: ' + type)\r\n  }\r\n\r\n  switch (type) {\r\n    case 'null': \r\n      break\r\n    case 'number': \r\n    case 'number?': \r\n      const n = +input\r\n      if (\"\" + n === input) {\r\n        return {'@value':n, input, touched:slot.touched}\r\n      }\r\n      break\r\n    case 'integer': \r\n    case 'integer?': \r\n      const i = +input\r\n      if (\"\" + i === input && i % 1 === 0) {\r\n        return {'@value':i, input, touched:slot.touched}\r\n      }\r\n      break\r\n    case 'boolean': \r\n    case 'boolean?': \r\n      if (input === \"true\" || input === \"false\") {\r\n        return {'@value':input===\"true\", input, touched:slot.touched}\r\n      }\r\n      break\r\n    case 'string': \r\n      return {'@value':input, input, touched:slot.touched}\r\n  }\r\n  if (input == \"\" && nullable(type)) {\r\n    return {'@value':null, input, touched:slot.touched}\r\n  }\r\n  return {input, touched:slot.touched}\r\n}\r\n","// @ts-check\r\n\r\nimport showText from 'string-template'\r\n\r\n/**\r\n * @typedef {{\r\n *   code:string, \r\n *   detail?:string, \r\n *   hint?:null|number|boolean|string, \r\n *   message?:string\r\n * }} MgError\r\n * @typedef {{[key:string]:string}} Catalog\r\n * \r\n * - type.{type}\r\n * - rule.{rule}\r\n * - http.{statusCode}\r\n * - system.net\r\n */\r\n\r\nexport const isError = (x) => {\r\n  return (typeof x == 'object' && x != null && 'code' in x)\r\n}\r\n\r\n /**\r\n  * \r\n  * @param {Catalog} catalog\r\n  * @returns {(error:MgError) => MgError}\r\n  */\r\nexport const normalizeError = (catalog) => (error) => {\r\n  const template = catalog[error.code] || catalog['detail' in error ? 'fallback' : 'fallback.nodetail']\r\n  const message = showText(template, error)\r\n  return {...error, message}\r\n}\r\n\r\n/**\r\n * @type Catalog\r\n */\r\nexport const defaultErrorMessages = {\r\n  'fallback': 'Error code:{code}; detail:{detail}', \r\n  'fallback.nodetail': 'Error code:{code}', \r\n  'value': 'Invalid value', \r\n  'type.null': 'Please input a null value', \r\n  'type.boolean': 'Please input a boolean value', \r\n  'type.boolean?': 'Please input a boolean value or a null', \r\n  'type.integer': 'Please input an integer', \r\n  'type.integer?': 'Please input an integer or a null', \r\n  'type.number': 'Please input a number', \r\n  'type.number?': 'Please input a number or a null', \r\n  'type.string': 'Please input a string', \r\n  'type.object': 'Please input an object value', \r\n  'type.object?': 'Please input an object value or a null', \r\n  'type.array': 'Please input an array value', \r\n  'type.array?': 'Please input an array value or a null', \r\n  'rule.enum': 'Invalid input', \r\n  'rule.const': 'Input {hint}',  // param\r\n  'rule.const.nohint': 'Invalid input', \r\n  'rule.notEmpty': 'Please input', \r\n  'rule.required': 'Missing property \"{hint}\"',  // param[i]\r\n  'rule.switchRequired': 'Missing property \"{hint}\"',  // required[i]\r\n  'rule.switchRequired.nohint': 'Properties are missing', \r\n  'rule.same': 'Please input {hint}',  // target\r\n  'rule.same.nohint': 'Invalid input', \r\n  'rule.multipleOf': 'Please enter a multiple of {hint}',  // param\r\n  'rule.maximum': 'Please enter {hint} or less',  // param\r\n  'rule.exclusiveMaximum': 'Please enter less than {hint}',  // param\r\n  'rule.minimum': 'Please enter {hint} or more',  // param\r\n  'rule.exclusiveMinimum': 'Please enter more than {hint}',  // param\r\n  'rule.maxLength': 'Please enter no more than {hint} characters',  // param\r\n  'rule.minLength': 'Please enter at least {hint} characters',  // param\r\n  'rule.pattern': 'Invalid format',  // param\r\n  'rule.maxItems': 'Please make it {hint} or less',  // param\r\n  'rule.minItems': 'Please make it {hint} or more',  // param\r\n  'http.400': 'HTTP error: {detail}', \r\n  'http:401': 'HTTP error: {detail}', \r\n  'http:403': 'HTTP error: {detail}', \r\n  'http.404': 'HTTP error: {detail}', \r\n  'http.405': 'HTTP error: {detail}', \r\n  'http.406': 'HTTP error: {detail}', \r\n  'http.407': 'HTTP error: {detail}', \r\n  'http.408': 'HTTP error: {detail}', \r\n  'http.409': 'HTTP error: {detail}', \r\n  'http.410': 'HTTP error: {detail}', \r\n  'http.500': 'HTTP error: {detail}', \r\n  'http.501': 'HTTP error: {detail}', \r\n  'http.502': 'HTTP error: {detail}', \r\n  'http.503': 'HTTP error: {detail}', \r\n\r\n}","//@ts-check\r\n\r\nimport { normalizePath } from './utils'\r\nimport * as E from './env'\r\nimport * as S from './schema'\r\nimport * as X from './errors'\r\nimport { app, h as h0 } from 'hyperapp'\r\n\r\n/**\r\n * \r\n * @typedef {import(\"./schema\").Json} Json\r\n * @typedef {import(\"./schema\").Schema} Schema\r\n * @typedef {import(\"./schema\").Slot} Slot\r\n * @typedef {import(\"./schema\").SchemaDb} SchemaDb\r\n * @typedef {import(\"./schema\").LookupFunc} LookupFunc\r\n * @typedef {import(\"./schema\").Rules} Rules\r\n * @typedef {import(\"./env\").Env} Env\r\n * @typedef {import(\"./errors\").MgError} MgError\r\n * @typedef {import(\"./errors\").Catalog} Catalog\r\n * \r\n */\r\n\r\n\r\n/**\r\n * @namespace\r\n */\r\nexport const API = {\r\n  // re-export from env\r\n  test: E.test, \r\n  extract: E.extract, \r\n  getSlot: E.getSlot, \r\n  add: E.add, \r\n  remove: E.remove, \r\n  replace: E.replace, \r\n  move: E.move, \r\n  copy: E.copy, \r\n  duplicate: E.duplicate, \r\n  validate: E.validate, \r\n  mapDeep: E.mapDeep, \r\n  reduceDeep: E.reduceDeep, \r\n  getExtra: E.getExtra, \r\n\r\n  /**\r\n   * \r\n   * @param {string} path \r\n   * @param {Env} env\r\n   * @returns {Env} \r\n   */\r\n  touchAll: (path, env) => {\r\n    return E.mapDeep((slot, _path) => ({...slot, touched:true}), path, env)\r\n  }, \r\n\r\n  /**\r\n   * \r\n   * @param {string} path \r\n   * @param {Env} env\r\n   * @returns {number} \r\n   */\r\n  countValidationErrors: (path, env) => {\r\n    return E.reduceDeep((cur, slot, _path) => {\r\n      const d = slot.touched && slot.invalid ? 1 : 0\r\n      return cur + d\r\n    }, 0, path, env)\r\n  }, \r\n\r\n  /**\r\n   * \r\n   * @param {string} path \r\n   * @param {Env} env\r\n   * @returns {string[]} \r\n   */\r\n  validationErrors: (path, env) => {\r\n    const errors = []\r\n    E.reduceDeep((_cur, slot, path) => {\r\n      if (slot.touched && slot.invalid) {\r\n        errors.push(path)\r\n      }\r\n      return null\r\n    }, null, path, env)\r\n    return errors\r\n  }, \r\n\r\n  /**\r\n   * @param {string} path\r\n   * @param {Env} env\r\n   * @returns {{invalid:boolean, error:MgError}}\r\n   */\r\n  foldValidity: (path, env) => {\r\n    return API.reduceDeep((cur, slot, _path) => {\r\n      if (cur.invalid) return cur\r\n      if (slot.touched && slot.invalid) return {invalid:true, error:slot.error}\r\n      return cur\r\n    }, /** @type {{invalid:boolean,error:MgError}} */({invalid:false, error:null}), path, env)\r\n  }, \r\n\r\n  /**\r\n   * @param {number} ms\r\n   * @param {Env} env\r\n   * @returns {[Promise, Env]}\r\n   */\r\n  sleep: (ms, env) => {\r\n    const p = new Promise((fulfill, reject) => {\r\n      setTimeout(() => {\r\n        fulfill(null)\r\n      }, ms)\r\n    })\r\n    return [p, env]\r\n  }, \r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {string} itemPath\r\n   * @param {string} group\r\n   * @param {Env} env\r\n   * @returns {[Promise, Env]}\r\n   */\r\n  startReordering: (name, itemPath, group, env) => {\r\n    const p = new Promise((fulfill, reject) => {\r\n      env = E.setExtra(name, {itemPath, group, fulfill, reject}, env)\r\n    })\r\n    return [p, env]\r\n  }, \r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Env} env\r\n   * @returns {Env}\r\n   */\r\n  endReordering: (name, env) => {\r\n    const extra = E.getExtra(name, env)\r\n    if (! extra) return env\r\n    return E.setExtra(name, null, env)\r\n  }, \r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Env} env\r\n   * @returns {string|null}\r\n   */\r\n  getReordering: (name, env) => {\r\n    const extra = E.getExtra(name, env)\r\n    if (! extra) return null\r\n    return extra.itemPath\r\n  }, \r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {any} data\r\n   * @param {Env} env\r\n   * @returns {[Promise, Env]}\r\n   */\r\n  openDialog: (name, data, env) => {\r\n    const p = new Promise((fulfill, reject) => {\r\n      env = E.setExtra(name, {data, fulfill, reject}, env)\r\n    })\r\n    return [p, env]\r\n  }, \r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Env} env\r\n   * @returns {Env}\r\n   */\r\n  closeDialog: (name, env) => {\r\n    const extra = E.getExtra(name, env)\r\n    if (! extra) return env\r\n    return E.setExtra(name, null, env)\r\n  }, \r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Env} env\r\n   * @returns {any|null}\r\n   */\r\n  getDialog: (name, env) => {\r\n    const extra = E.getExtra(name, env)\r\n    if (! extra) return null\r\n    return extra.data\r\n  }, \r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {any} data\r\n   * @param {Env} env\r\n   * @returns {Env}\r\n   */\r\n  openFeedback: (name, data, env) => {\r\n    return E.setExtra(name, data, env)\r\n  }, \r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Env} env\r\n   * @returns {Env}\r\n   */\r\n  closeFeedback: (name, env) => {\r\n    const extra = E.getExtra(name, env)\r\n    if (! extra) return env\r\n    return E.setExtra(name, null, env)\r\n  }, \r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Env} env\r\n   * @returns {any|null}\r\n   */\r\n  getFeedback: (name, env) => {\r\n    return E.getExtra(name, env)\r\n  }, \r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {number} current\r\n   * @param {Env} env\r\n   * @returns {Env}\r\n   */\r\n  setPage: (name, current, env) => {\r\n    return E.setExtra(name, current, env)\r\n  }, \r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Env} env\r\n   * @returns {number}\r\n   */\r\n  getPage: (name, env) => {\r\n    const extra = E.getExtra(name, env)\r\n    return (extra !== null) ? extra : 0\r\n  }, \r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Env} env\r\n   * @returns {Env}\r\n   */\r\n  nextPage: (name, env) => {\r\n    const extra = E.getExtra(name, env)\r\n    const current = (extra !== null) ? extra : 0\r\n    return E.setExtra(name, current + 1, env)\r\n  }, \r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Env} env\r\n   * @returns {Env}\r\n   */\r\n  prevPage: (name, env) => {\r\n    const extra = E.getExtra(name, env)\r\n    const current = (extra !== null) ? extra : 0\r\n    return E.setExtra(name, current - 1, env)\r\n  }, \r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {boolean} shown\r\n   * @param {Env} env\r\n   * @returns {Env}\r\n   */\r\n  setSwitch: (name, shown, env) => {\r\n    return E.setExtra(name, shown, env)\r\n  }, \r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Env} env\r\n   * @returns {boolean}\r\n   */\r\n  getSwitch: (name, env) => {\r\n    const extra = E.getExtra(name, env)\r\n    return (extra !== null) ? extra : false\r\n  }, \r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Env} env\r\n   * @returns {Env}\r\n   */\r\n  toggleSwitch: (name, env) => {\r\n    const extra = E.getExtra(name, env)\r\n    const current = (extra !== null) ? extra : false\r\n    return E.setExtra(name, !current, env)\r\n  }, \r\n\r\n  /*\r\n   * TODO: progress bar, ReadStream, ...\r\n   */\r\n  /**\r\n   * @param {string} name\r\n   * @param {any} unknown\r\n   * @param {Env} env\r\n   * @returns {Env}\r\n   */\r\n  openProgress: (name, unknown, env) => {\r\n    return E.setExtra(name, {current:-1}, env)\r\n  }, \r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Env} env\r\n   * @returns {Env}\r\n   */\r\n  closeProgress: (name, env) => {\r\n    return E.setExtra(name, null, env)\r\n  }, \r\n\r\n  /**\r\n   * @param {string} name\r\n   * @param {Env} env\r\n   * @returns {number|null}\r\n   */\r\n  getProgress: (name, env) => {\r\n    const extra = E.getExtra(name, env)\r\n    if (! extra) return null\r\n    return extra.current\r\n  }, \r\n  \r\n  /**\r\n   * @param {string} name \r\n   * @param {string} fromPath \r\n   * @param {string} group\r\n   * @param {Env} env\r\n   * @returns {Env|Promise}\r\n   */\r\n  reorder: (name, fromPath, group, env) => {\r\n    const {enter, leave} = API.makePortal(env)\r\n    return /** @type {Promise} */ (leave(API.startReordering(name, fromPath, group, env)))\r\n    .then(enter(({path}, env) => {\r\n      env = API.endReordering(name, env)\r\n      return API.move(fromPath, path, env)\r\n    }))\r\n  }, \r\n\r\n  /**\r\n   * @param {Env} env\r\n   */\r\n  makePortal: (env) => {\r\n    return {\r\n      /**\r\n       * @param {(result:any, env:Env) => any} handler\r\n       * @returns {(result:any) => any}\r\n       */\r\n      enter: (handler) => {  // Our customized handler :: [result, env] => ...\r\n        return (result) => {  // This is the actual, standard promise handler\r\n          let result1 = null  // We will get the result in this variable.\r\n          const ret = (res1) => {result1 = res1}\r\n          env.onPromiseThen({result, handler, ret})  // enter into hyperapp. Its result is undefined.\r\n          return result1\r\n        }\r\n      }, \r\n      /**\r\n       * @param {[(Promise|Error), Env] | (Promise|Error)} x\r\n       * @param {Env} [y]\r\n       * @returns {Promise|Error}\r\n       */\r\n      leave: (x, y) => {\r\n        const p = Array.isArray(x) ? x[0] : x\r\n        const env = Array.isArray(x) ? x[1] : y\r\n        if (! E.isEnv(env)) throw new Error('exit/1: env required')\r\n        E.doReturn(env)\r\n        return p\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst updateEnabledApis = {\r\n  openDialog: API.openDialog, \r\n  closeDialog: API.closeDialog, \r\n  openFeedback: API.openFeedback, \r\n  closeFeedback: API.closeFeedback, \r\n  openProgress: API.openProgress, \r\n  closeProgress: API.closeProgress, \r\n  setPage: API.setPage, \r\n  nextPage: API.nextPage, \r\n  prevPage: API.prevPage, \r\n  setSwitch: API.setSwitch, \r\n  toggleSwitch: API.toggleSwitch, \r\n  reorder: API.reorder\r\n}\r\n\r\n/**\r\n * @param {Object} params\r\n * @param {Json} params.data\r\n * @param {Schema} params.schema\r\n * @param {(env:Env) => import('hyperapp').VNode} params.view\r\n * @param {Element} params.containerEl\r\n * @param {((env:Env, updatePointer:string, prevEnv:Env|null) => Env) | null} params.evolve\r\n * @param {{[name:string]:(any)}} params.updates\r\n * @param {Rules} params.rules\r\n * @param {Catalog} params.catalog\r\n */\r\nexport const start = (\r\n    {\r\n      data, \r\n      schema, \r\n      view, \r\n      containerEl, \r\n      evolve = null, \r\n      updates = {}, \r\n      rules = null, \r\n      catalog = null\r\n    }) => {\r\n  // complements reasonable defaults\r\n  if (! evolve) evolve = (env, _pointer, _prevEnv) => env\r\n  const validate = S.validate(rules || S.defaultRules)\r\n  const coerce = S.coerce\r\n  const normalizeError = X.normalizeError(catalog || X.defaultErrorMessages)\r\n\r\n  const schemaDb = S.buildDb(schema)\r\n\r\n  const actions0 = {\r\n    onTextboxInput: (ev) => (state, actions) => {\r\n      const path = ev.currentTarget.dataset.mgPath\r\n      const value = ev.currentTarget[ev.currentTarget.dataset.mgValueAttribute]\r\n      const slot0 = E.getSlot(path, state.baseEnv)\r\n      const slot = {...slot0, input:value}\r\n      const baseEnv = E.setSlot(path, slot, state.baseEnv)\r\n      // We don't call evolve() here, because oninput is not a check point of evolve().\r\n      // Thus we update not only baseEnv but also env.\r\n      const slotb0 = E.getSlot(path, state.env)\r\n      const slotb = {...slotb0, input:value}\r\n      const env = E.setSlot(path, slotb, state.env)\r\n      return {...state, baseEnv, env}\r\n    }, \r\n    onTextboxBlur: (ev) => (state, actions) => {\r\n      const path = ev.currentTarget.dataset.mgPath\r\n      const value = ev.currentTarget[ev.currentTarget.dataset.mgValueAttribute]\r\n      const npath = normalizePath(path)\r\n      const slot0 = {...E.getSlot(path, state.baseEnv), touched:true}\r\n      const slot = coerce(value, slot0, schemaDb[npath])\r\n      let updatePointer\r\n      let baseEnv = E.beginUpdateTracking(state.baseEnv)\r\n      baseEnv = E.setSlot(path, slot, baseEnv)\r\n      baseEnv = E.validate(\"\", baseEnv);\r\n      [updatePointer, baseEnv] = E.endUpdateTracking(baseEnv)\r\n      let env = evolve(baseEnv, updatePointer, baseEnv)\r\n      env = E.validate(\"\", env)\r\n      return {...state, baseEnv, env}\r\n    }, \r\n    onSliderInput: (ev) => (state, actions) => {\r\n      const path = ev.currentTarget.dataset.mgPath\r\n      const value = ev.currentTarget[ev.currentTarget.dataset.mgValueAttribute]\r\n      const slot0 = E.getSlot(path, state.baseEnv)\r\n      const slot = {...slot0, input:value}\r\n      const baseEnv = E.setSlot(path, slot, state.baseEnv)\r\n      // We don't call evolve() here, because oninput is not a check point of evolve().\r\n      // Thus we update not only baseEnv but also env.\r\n      const slotb0 = E.getSlot(path, state.env)\r\n      const slotb = {...slotb0, input:value}\r\n      const env = E.setSlot(path, slotb, state.env)\r\n      return {...state, baseEnv, env}\r\n    }, \r\n    onSliderChange: (ev) => (state, actions) => {\r\n      const path = ev.currentTarget.dataset.mgPath\r\n      const value = ev.currentTarget[ev.currentTarget.dataset.mgValueAttribute]\r\n      const npath = normalizePath(path)\r\n      const slot0 = {...E.getSlot(path, state.baseEnv), touched:true}\r\n      const slot = coerce(value, slot0, schemaDb[npath])\r\n      let updatePointer\r\n      let baseEnv = E.beginUpdateTracking(state.baseEnv)\r\n      baseEnv = E.setSlot(path, slot, baseEnv)\r\n      baseEnv = E.validate(\"\", baseEnv);\r\n      [updatePointer, baseEnv] = E.endUpdateTracking(baseEnv)\r\n      let env = evolve(baseEnv, updatePointer, state.env)\r\n      env = E.validate(\"\", env)\r\n      return {...state, baseEnv, env}\r\n    }, \r\n    onListboxChange: (ev) => (state, actions) => {\r\n      const path = ev.currentTarget.dataset.mgPath\r\n      const value = ev.currentTarget[ev.currentTarget.dataset.mgValueAttribute]\r\n      const npath = normalizePath(path)\r\n      const slot0 = {...E.getSlot(path, state.baseEnv), touched:true}\r\n      const slot = coerce(value, slot0, schemaDb[npath])\r\n      let updatePointer\r\n      let baseEnv = E.beginUpdateTracking(state.baseEnv)\r\n      baseEnv = E.setSlot(path, slot, baseEnv)\r\n      baseEnv = E.validate(\"\", baseEnv);\r\n      [updatePointer, baseEnv] = E.endUpdateTracking(baseEnv)\r\n      let env = evolve(baseEnv, updatePointer, state.env)\r\n      env = E.validate(\"\", env)\r\n      return {...state, baseEnv, env}\r\n    }, \r\n    onRadioChange: (ev) => (state, actions) => {\r\n      const path = ev.currentTarget.dataset.mgPath\r\n      const value = ev.currentTarget[ev.currentTarget.dataset.mgValueAttribute]\r\n      const npath = normalizePath(path)\r\n      const slot0 = {...E.getSlot(path, state.baseEnv), touched:true}\r\n      const slot = coerce(value, slot0, schemaDb[npath])\r\n      let updatePointer\r\n      let baseEnv = E.beginUpdateTracking(state.baseEnv)\r\n      baseEnv = E.setSlot(path, slot, baseEnv)\r\n      baseEnv = E.validate(\"\", baseEnv);\r\n      [updatePointer, baseEnv] = E.endUpdateTracking(baseEnv)\r\n      let env = evolve(baseEnv, updatePointer, state.env)\r\n      env = E.validate(\"\", env)\r\n      return {...state, baseEnv, env}\r\n    }, \r\n    onCheckboxChange: (ev) => (state, actions) => {\r\n      const path = ev.currentTarget.dataset.mgPath\r\n      const checked = ev.currentTarget[ev.currentTarget.dataset.mgCheckedAttribute]\r\n      const value = checked ? \"true\" : \"false\"\r\n      const npath = normalizePath(path)\r\n      const slot0 = {...E.getSlot(path, state.baseEnv), touched:true}\r\n      const slot = coerce(value, slot0, schemaDb[npath])\r\n      let updatePointer\r\n      let baseEnv = E.beginUpdateTracking(state.baseEnv)\r\n      baseEnv = E.setSlot(path, slot, baseEnv)\r\n      baseEnv = E.validate(\"\", baseEnv);\r\n      [updatePointer, baseEnv] = E.endUpdateTracking(baseEnv)\r\n      let env = evolve(baseEnv, updatePointer, state.env)\r\n      env = E.validate(\"\", env)\r\n      return {...state, baseEnv, env}\r\n    }, \r\n    onSmartControlChange: (pair) => (state, actions) => {\r\n      const pairs = Array.isArray(pair) ? pair : [pair]\r\n      let updatePointer\r\n      let baseEnv = E.beginUpdateTracking(state.baseEnv)\r\n      for (let i = 0; i < pairs.length; i++) {\r\n        const {path, input} = pairs[i]\r\n        const slot0 = {...E.getSlot(path, baseEnv), touched:true}\r\n        const slot = coerce(input, slot0, schemaDb[normalizePath(path)])\r\n        baseEnv = E.setSlot(path, slot, baseEnv)\r\n      }\r\n      baseEnv = E.validate(\"\", baseEnv);\r\n      [updatePointer, baseEnv] = E.endUpdateTracking(baseEnv)\r\n      let env = evolve(baseEnv, updatePointer, state.env)\r\n      env = E.validate(\"\", env)\r\n      return {...state, baseEnv, env}\r\n    }, \r\n    onUpdate: (ev) => (state, actions) => {\r\n      const update = ('currentTarget' in ev) ? ev.currentTarget.dataset.mgUpdate : ev.update\r\n      const context = ('currentTarget' in ev) ? JSON.parse(ev.currentTarget.dataset.mgContext || \"null\") : ev.context\r\n      let updatePointer\r\n      let baseEnv = E.beginUpdateTracking(state.baseEnv)\r\n      baseEnv = E.setPortal((env0) => {baseEnv = env0}, actions.onPromiseThen, baseEnv)\r\n      const func = updates[update] || updateEnabledApis[update]\r\n      if (! func) throw new Error('onUpdate/0: no update or unknown update')\r\n      if (! Array.isArray(context)) throw new Error('onUpdate/1: parameter must be an array')\r\n      if (context.length + 1 != func.length) throw new Error('onUpdate/2: bad number of parameters')\r\n      const res = func.apply(null, [...context, baseEnv])\r\n      baseEnv = E.setPortal(null, null, E.isEnv(res) ? res : baseEnv)\r\n      baseEnv = E.validate(\"\", baseEnv);\r\n      [updatePointer, baseEnv] = E.endUpdateTracking(baseEnv)\r\n      let env = state.env\r\n      if (! E.isSame(state.baseEnv, baseEnv)) {\r\n        env = evolve(baseEnv, updatePointer, env)\r\n        env = E.validate(\"\", env)\r\n      }\r\n      return {...state, baseEnv, env}\r\n    }, \r\n    onPromiseSettle: (ev) => (state, actions) => {\r\n      const name = ('currentTarget' in ev) ? ev.currentTarget.dataset.mgName : ev.name\r\n      const result = ('currentTarget' in ev) ? JSON.parse(ev.currentTarget.dataset.mgResult || \"null\") : ev.result\r\n      const extra = E.getExtra(name, state.baseEnv)\r\n      if (! extra || ! extra.fulfill) throw new Error('onPromiseSettle/0: no callback or unknown callback')\r\n      // Calling fulfill() will cause the process to re-enter the hyperapp, \r\n      // so we call fulfill() not now but in a different opportunity.\r\n      setTimeout(() => {\r\n        extra.fulfill(result)\r\n      }, 0)\r\n      return null  // indicating no update.\r\n    }, \r\n    onPromiseThen: (context) => (state, actions) => {\r\n      let updatePointer\r\n      let baseEnv = E.beginUpdateTracking(state.baseEnv)\r\n      baseEnv = E.setPortal((env0) => {baseEnv = env0}, actions.onPromiseThen, baseEnv)\r\n      const res = context.handler(context.result, baseEnv)\r\n      baseEnv = E.setPortal(null, null, E.isEnv(res) ? res : baseEnv)\r\n      baseEnv = E.validate(\"\", baseEnv);\r\n      [updatePointer, baseEnv] = E.endUpdateTracking(baseEnv)\r\n      let env = state.env\r\n      if (! E.isSame(state.baseEnv, baseEnv)) {\r\n        env = evolve(baseEnv, updatePointer, env)\r\n        env = E.validate(\"\", env)\r\n      }\r\n      if (! E.isEnv(res)) {\r\n        context.ret(res)\r\n      }\r\n      return {...state, baseEnv, env}\r\n    }\r\n  }\r\n\r\n  let updatePointer\r\n  let baseEnv = E.makeEnv(data, schemaDb, validate, true)\r\n  baseEnv = E.validate(\"\", baseEnv);\r\n  [updatePointer, baseEnv] = E.endUpdateTracking(baseEnv)\r\n  let env = evolve(baseEnv, updatePointer, null)\r\n  env = E.validate(\"\", env)\r\n  const state = {\r\n    baseEnv, \r\n    env, \r\n    normalizeError\r\n  }\r\n  const view1 = (state, actions) => view(state.env)\r\n  const actions = app(state, actions0, view1, containerEl)\r\n  return {\r\n    onUpdate: actions.onUpdate, \r\n  }\r\n}\r\n\r\n/**\r\n * @param {Object} params\r\n * @param {Json} params.data\r\n * @param {Schema} params.schema\r\n * @param {((env:Env, updatePointer:string, prevEnv:Env|null) => Env) | null} params.evolve\r\n * @param {Rules} params.rules\r\n */\r\nexport const once = (\r\n    {\r\n      data, \r\n      schema, \r\n      evolve = null, \r\n      rules = null\r\n    }) => {\r\n  // complements reasonable defaults\r\n  if (! evolve) evolve = (env, _pointer, _prevEnv) => env\r\n  const validate = S.validate(rules || S.defaultRules)\r\n\r\n  const schemaDb = S.buildDb(schema)\r\n  \r\n  let updatePointer\r\n  let baseEnv = E.makeEnv(data, schemaDb, validate, true)\r\n  baseEnv = E.validate(\"\", baseEnv);\r\n  [updatePointer, baseEnv] = E.endUpdateTracking(baseEnv)\r\n  let env = evolve(baseEnv, updatePointer, null)\r\n  env = E.validate(\"\", env)\r\n  return env\r\n}\r\n\r\nexport const h = h0","import {once, API} from '../../src/core/framework'\r\n\r\nconst master = {\r\n  frame: [\r\n    {name:'SC130-T', price:32000}\r\n  ], \r\n  os: [\r\n    {name:'Home', price:8000}, \r\n    {name:'Pro', price:13000}\r\n  ], \r\n  cpu: [\r\n    {name:'i7', price:24000}, \r\n    {name:'i5', price:16000}, \r\n    {name:'i3', price:10000}\r\n  ], \r\n  memory: [\r\n    {name:'4G', price:10000}, \r\n    {name:'8G', price:20000}, \r\n    {name:'16G', price:40000}, \r\n    {name:'32G', price:80000}\r\n  ], \r\n  accessory: [\r\n    {name:'Keyboard', price:2000}, \r\n    {name:'Mouse', price:2000}, \r\n    {name:'Touch Pad', price:2000}, \r\n    {name:'Monitor', price:20000}\r\n  ], \r\n  bonus: [\r\n    {name:'Mobile Wi-Fi Adaptor', price:0}, \r\n    {name:'Touchauth Component', price:0}\r\n  ]\r\n}\r\n\r\nconst schema = {\r\n  type: 'object', \r\n  properties: {\r\n    detail: {\r\n      type: 'object', \r\n      properties: {\r\n        frame: {type:'string', notEmpty:true}, \r\n        os: {type:'string', notEmpty:true}, \r\n        cpu: {type:'string', notEmpty:true}, \r\n        memory: {type:'string', notEmpty:true}, \r\n        accessories: {\r\n          type: 'object', \r\n          properties: master.accessory.reduce((cur, a, i) => {\r\n            return {...cur, [`a${i}`]:{type:'boolean'}}\r\n          }, {})\r\n        }, \r\n        bonus: {type:'string', notEmpty:true}\r\n      }\r\n    }, \r\n    flags: {\r\n      type: 'object', \r\n      properties: {\r\n        isPro: {type:'boolean'}, \r\n        bigDeal: {type:'boolean'}\r\n      }\r\n    }, \r\n    quotation: {\r\n      type: 'object', \r\n      properties: {\r\n        lines: {\r\n          type: 'array', \r\n          items: {\r\n            type: 'object', \r\n            properties: {\r\n              category: {type:'string'}, \r\n              description: {type:'string'}, \r\n              unitPrice: {type:'integer'}, \r\n              quantity: {type:'integer'}, \r\n              amount: {type:'integer'}\r\n            }\r\n          }\r\n        }, \r\n        subtotal: {type:'integer'}, \r\n        tax: {type:'integer'}, \r\n        total: {type:'integer'}\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst data = {\r\n  detail: {\r\n    \"frame\": \"SC130-T\",\r\n    \"os\": \"Pro\",\r\n    \"cpu\": \"i5\",\r\n    \"memory\": \"16G\",\r\n    \"accessories\": {\r\n      \"a0\": false,\r\n      \"a1\": false,\r\n      \"a2\": true,\r\n      \"a3\": false\r\n    },\r\n    \"bonus\": \"Touchauth Component\"\r\n  }, \r\n  flags: {\r\n    isPro: false, \r\n    bigDeal: false\r\n  }, \r\n  quotation: {\r\n    lines: [], \r\n    subtotal: 0, \r\n    tax: 0, \r\n    total: 0\r\n  }\r\n}\r\n\r\nconst findByProp = (name, value, lis) => {\r\n  for (let i = 0; i < lis.length; i++) {\r\n    if (lis[i][name] == value) return lis[i]\r\n  }\r\n  return undefined\r\n}\r\nconst evolve = (env, path, prevEnv) => {\r\n  const addLine = (category, x, env) => {\r\n    const line = {category, description:x.name, unitPrice:x.price, quantity:1, amount:x.price}\r\n    return API.add('/quotation/lines/-', line, env)\r\n  }\r\n  let subtotal = 0\r\n  let isPro = false\r\n  let detail = API.extract('/detail', env)\r\n  if (detail.frame) {\r\n    const frame = findByProp('name', detail.frame, master.frame)\r\n    env = addLine('筐体', frame, env)\r\n    subtotal += frame.price\r\n  }\r\n  if (detail.os) {\r\n    const os = findByProp('name', detail.os, master.os)\r\n    env = addLine('OS', os, env)\r\n    subtotal += os.price\r\n    if (os.name == 'Pro') isPro = true\r\n  }\r\n  if (detail.cpu) {\r\n    const cpu = findByProp('name', detail.cpu, master.cpu)\r\n    env = addLine('CPU', cpu, env)\r\n    subtotal += cpu.price\r\n  }\r\n  env = API.add('/flags/isPro', isPro, env)\r\n  if (! isPro && detail.memory && detail.memory == '32G') {\r\n    env = API.add('/detail/memory', '', env)\r\n    detail = API.extract('/detail', env)  // we modified `/detail' so load again.\r\n  }\r\n  if (detail.memory) {\r\n    const memory = findByProp('name', detail.memory, master.memory)\r\n    env = addLine('メモリ', memory, env)\r\n    subtotal += memory.price\r\n  }\r\n  master.accessory.forEach((a, i) => {\r\n    if (detail.accessories[`a${i}`]) {\r\n      env = addLine('アクセサリ', a, env)\r\n      subtotal += a.price\r\n    }\r\n  })\r\n  const bigDeal = subtotal >= 70000\r\n  env = API.add('/flags/bigDeal', bigDeal, env)\r\n  if (! bigDeal) {\r\n    env = API.remove('/detail/bonus', env)\r\n    detail = API.extract('/detail', env)  // we modified `/detail' so load again.\r\n  }\r\n  if (detail.bonus) {\r\n    const bonus = findByProp('name', detail.bonus, master.bonus)\r\n    env = addLine('ボーナス', bonus, env)\r\n    subtotal += bonus.price\r\n  }\r\n  env = API.add('/quotation/subtotal', subtotal, env)\r\n  env = API.add('/quotation/tax', subtotal / 10, env)\r\n  env = API.add('/quotation/total', subtotal + subtotal / 10, env)\r\n  return env\r\n}\r\n\r\nlet env = once({schema, data, evolve})\r\nenv = API.touchAll(\"\", env)\r\nenv = API.validate(\"\", env)\r\nconst numErrors = API.countValidationErrors(\"\", env)\r\nif (numErrors) {\r\n  console.error('ERROR: some validation errors occurred', env.tree)\r\n} else {\r\n  const result = API.extract(\"\", env)\r\n  console.log(\"SUCCESS\", result)\r\n}"]}